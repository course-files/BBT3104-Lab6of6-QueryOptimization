- query: "-- JOB Query 1a\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT\n\tMIN(mc.note) AS production_note,\n\tMIN(t.title) AS movie_title,\n\t
    MIN(t.production_year) AS movie_year\nFROM\n\tcompany_type AS ct,\n\tinfo_type
    AS it,\n\tmovie_companies AS mc,\n\tmovie_info_idx AS mi_idx,\n\ttitle AS t\n
    WHERE\n\tct.kind = 'production companies'\n\tAND it.info = 'top 250 rank'\n\t
    AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'\n\tAND (mc.note LIKE
    '%(co-production)%'\n\t\tOR mc.note LIKE '%(presents)%')\n\tAND ct.id = mc.company_type_id\n
    \tAND t.id = mc.movie_id\n\tAND t.id = mi_idx.movie_id\n\tAND mc.movie_id = mi_idx.movie_id\n
    \tAND it.id = mi_idx.info_type_id"
  qep:
  - node: 'Aggregate: min(mc.note), min(t.title), min(t.production_year) (cost=1.71e+6
      rows=1) (actual time=1486..1486 rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=1.7e+6 rows=76790) (actual time=1468..1485
      rows=142 loops=1)
    actual_rows: 142.0
    estimated_rows: 76790.0
    q_error: 540.7746478873239
  - node: Nested loop inner join (cost=1.67e+6 rows=76790) (actual time=1468..1484
      rows=142 loops=1)
    actual_rows: 142.0
    estimated_rows: 76790.0
    q_error: 540.7746478873239
  - node: Nested loop inner join (cost=1.52e+6 rows=126912) (actual time=1467..1468
      rows=250 loops=1)
    actual_rows: 250.0
    estimated_rows: 126912.0
    q_error: 507.648
  - node: Inner hash join (no condition) (cost=127707 rows=1.27e+6) (actual time=15.1..381
      rows=1.38e+6 loops=1)
    actual_rows: 1380000.0
    estimated_rows: 1270000.0
    q_error: 1.0866141732283465
  - node: Table scan on mi_idx (cost=127706 rows=1.27e+6) (actual time=0.759..258
      rows=1.38e+6 loops=1)
    actual_rows: 1380000.0
    estimated_rows: 1270000.0
    q_error: 1.0866141732283465
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: "Filter: (ct.kind = 'production companies') (cost=1.4 rows=1) (actual time=14.3..14.3
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on ct (cost=1.4 rows=4) (actual time=14.3..14.3 rows=4 loops=1)
    actual_rows: 4.0
    estimated_rows: 4.0
    q_error: 1.0
  - node: "Filter: (it.info = 'top 250 rank') (cost=1 rows=0.1) (actual time=713e-6..713e-6
      rows=181e-6 loops=1.38e+6)"
    actual_rows: 0.000181
    estimated_rows: 0.1
    q_error: 552.4861878453039
  - node: Single-row index lookup on it using PRIMARY (id=mi_idx.info_type_id) (cost=1
      rows=1) (actual time=548e-6..567e-6 rows=1 loops=1.38e+6)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: ((mc.company_type_id = ct.id) and (not((mc.note like '%(as Metro-Goldwyn-Mayer
      Pictures)%'))) and ((mc.note like '%(co-production)%') or (mc.note like '%(presents)%')))
      (cost=0.811 rows=0.605) (actual time=0.066..0.0674 rows=0.568 loops=250)"
    actual_rows: 0.568
    estimated_rows: 0.605
    q_error: 1.0651408450704225
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=mi_idx.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00901..0.063 rows=33.2 loops=250)
    actual_rows: 33.2
    estimated_rows: 3.24
    q_error: 10.246913580246913
  - node: Single-row index lookup on t using PRIMARY (id=mi_idx.movie_id) (cost=0.314
      rows=1) (actual time=0.00303..0.00305 rows=1 loops=142)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 1b\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT\n\tMIN(mc.note) AS production_note,\n\tMIN(t.title) AS movie_title,\n\t
    MIN(t.production_year) AS movie_year\nFROM\n\tcompany_type AS ct,\n\tinfo_type
    AS it,\n\tmovie_companies AS mc,\n\tmovie_info_idx AS mi_idx,\n\ttitle AS t\n
    WHERE\n\tct.kind = 'production companies'\n\tAND it.info = 'bottom 10 rank'\n\t
    AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'\n\tAND t.production_year
    BETWEEN 2005 AND 2010\n\tAND ct.id = mc.company_type_id\n\tAND t.id = mc.movie_id\n
    \tAND t.id = mi_idx.movie_id\n\tAND mc.movie_id = mi_idx.movie_id\n\tAND it.id
    = mi_idx.info_type_id"
  qep:
  - node: 'Aggregate: min(mc.note), min(t.title), min(t.production_year) (cost=644561
      rows=1) (actual time=1547..1547 rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=640496 rows=40653) (actual time=1547..1547
      rows=3 loops=1)
    actual_rows: 3.0
    estimated_rows: 40653.0
    q_error: 13551.0
  - node: Nested loop inner join (cost=624489 rows=14100) (actual time=1546..1546
      rows=4 loops=1)
    actual_rows: 4.0
    estimated_rows: 14100.0
    q_error: 3525.0
  - node: Nested loop inner join (cost=571899 rows=126912) (actual time=1546..1546
      rows=10 loops=1)
    actual_rows: 10.0
    estimated_rows: 126912.0
    q_error: 12691.2
  - node: Inner hash join (no condition) (cost=127706 rows=1.27e+6) (actual time=0.645..394
      rows=1.38e+6 loops=1)
    actual_rows: 1380000.0
    estimated_rows: 1270000.0
    q_error: 1.0866141732283465
  - node: Table scan on mi_idx (cost=127706 rows=1.27e+6) (actual time=0.616..276
      rows=1.38e+6 loops=1)
    actual_rows: 1380000.0
    estimated_rows: 1270000.0
    q_error: 1.0866141732283465
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: "Filter: (ct.kind = 'production companies') (cost=0.65 rows=1) (actual time=0.0193..0.0219
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on ct (cost=0.65 rows=4) (actual time=0.0163..0.0195 rows=4 loops=1)
    actual_rows: 4.0
    estimated_rows: 4.0
    q_error: 1.0
  - node: "Filter: (it.info = 'bottom 10 rank') (cost=0.25 rows=0.1) (actual time=759e-6..759e-6
      rows=7.25e-6 loops=1.38e+6)"
    actual_rows: 7.25e-06
    estimated_rows: 0.1
    q_error: 13793.103448275862
  - node: Single-row index lookup on it using PRIMARY (id=mi_idx.info_type_id) (cost=0.25
      rows=1) (actual time=582e-6..603e-6 rows=1 loops=1.38e+6)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: 'Filter: (t.production_year between 2005 and 2010) (cost=0.314 rows=0.111)
      (actual time=0.0064..0.00644 rows=0.4 loops=10)'
    actual_rows: 0.4
    estimated_rows: 0.111
    q_error: 3.6036036036036037
  - node: Single-row index lookup on t using PRIMARY (id=mi_idx.movie_id) (cost=0.314
      rows=1) (actual time=0.00605..0.00608 rows=1 loops=10)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: ((mc.company_type_id = ct.id) and (not((mc.note like '%(as Metro-Goldwyn-Mayer
      Pictures)%')))) (cost=0.811 rows=2.88) (actual time=0.041..0.0422 rows=0.75
      loops=4)"
    actual_rows: 0.75
    estimated_rows: 2.88
    q_error: 3.84
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=mi_idx.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00943..0.0391 rows=18.2 loops=4)
    actual_rows: 18.2
    estimated_rows: 3.24
    q_error: 5.617283950617283

- query: "-- JOB Query 1c\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT\n\tMIN(mc.note) AS production_note,\n\tMIN(t.title) AS movie_title,\n\t
    MIN(t.production_year) AS movie_year\nFROM\n\tcompany_type AS ct,\n\tinfo_type
    AS it,\n\tmovie_companies AS mc,\n\tmovie_info_idx AS mi_idx,\n\ttitle AS t\n
    WHERE\n\tct.kind = 'production companies'\n\tAND it.info = 'top 250 rank'\n\t
    AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'\n\tAND (mc.note LIKE
    '%(co-production)%')\n\tAND t.production_year >2010\n\tAND ct.id = mc.company_type_id\n
    \tAND t.id = mc.movie_id\n\tAND t.id = mi_idx.movie_id\n\tAND mc.movie_id = mi_idx.movie_id\n
    \tAND it.id = mi_idx.info_type_id"
  qep:
  - node: 'Aggregate: min(mc.note), min(t.title), min(t.production_year) (cost=490157
      rows=1) (actual time=2578..2578 rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=489883 rows=2740) (actual time=2007..2578 rows=3
      loops=1)
    actual_rows: 3.0
    estimated_rows: 2740.0
    q_error: 913.3333333333334
  - node: Nested loop inner join (cost=417773 rows=27403) (actual time=1291..2568
      rows=7404 loops=1)
    actual_rows: 7404.0
    estimated_rows: 27403.0
    q_error: 3.701107509454349
  - node: Nested loop inner join (cost=345663 rows=8451) (actual time=1273..2080 rows=3894
      loops=1)
    actual_rows: 3894.0
    estimated_rows: 8451.0
    q_error: 2.170261941448382
  - node: Inner hash join (mc.company_type_id = ct.id) (cost=262411 rows=25355) (actual
      time=1271..2035 rows=17838 loops=1)
    actual_rows: 17838.0
    estimated_rows: 25355.0
    q_error: 1.421403744814441
  - node: "Filter: ((not((mc.note like '%(as Metro-Goldwyn-Mayer Pictures)%'))) and
      (mc.note like '%(co-production)%')) (cost=262411 rows=256744) (actual time=781..2031
      rows=17843 loops=1)"
    actual_rows: 17843.0
    estimated_rows: 256744.0
    q_error: 14.389060135627417
  - node: Table scan on mc (cost=262411 rows=2.6e+6) (actual time=0.0092..1317 rows=2.61e+6
      loops=1)
    actual_rows: 2610000.0
    estimated_rows: 2600000.0
    q_error: 1.0038461538461538
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: "Filter: (ct.kind = 'production companies') (cost=0.65 rows=1) (actual time=0.019..0.0216
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on ct (cost=0.65 rows=4) (actual time=0.0161..0.0192 rows=4 loops=1)
    actual_rows: 4.0
    estimated_rows: 4.0
    q_error: 1.0
  - node: 'Filter: (t.production_year > 2010) (cost=0.314 rows=0.333) (actual time=0.00233..0.00235
      rows=0.218 loops=17838)'
    actual_rows: 0.218
    estimated_rows: 0.333
    q_error: 1.5275229357798166
  - node: Single-row index lookup on t using PRIMARY (id=mc.movie_id) (cost=0.314
      rows=1) (actual time=0.00214..0.00216 rows=1 loops=17838)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mi_idx using movie_id_movie_info_idx (movie_id=mc.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.125..0.125 rows=1.9 loops=3894)
    actual_rows: 1.9
    estimated_rows: 3.24
    q_error: 1.705263157894737
  - node: "Filter: (it.info = 'top 250 rank') (cost=0.25 rows=0.1) (actual time=0.00121..0.00121
      rows=405e-6 loops=7404)"
    actual_rows: 0.000405
    estimated_rows: 0.1
    q_error: 246.9135802469136
  - node: Single-row index lookup on it using PRIMARY (id=mi_idx.info_type_id) (cost=0.25
      rows=1) (actual time=940e-6..964e-6 rows=1 loops=7404)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 1d\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT\n\tMIN(mc.note) AS production_note,\n\tMIN(t.title) AS movie_title,\n\t
    MIN(t.production_year) AS movie_year\nFROM\n\tcompany_type AS ct,\n\tinfo_type
    AS it,\n\tmovie_companies AS mc,\n\tmovie_info_idx AS mi_idx,\n\ttitle AS t\n
    WHERE\n\tct.kind = 'production companies'\n\tAND it.info = 'bottom 10 rank'\n\t
    AND mc.note NOT LIKE '%(as Metro-Goldwyn-Mayer Pictures)%'\n\tAND t.production_year
    >2000\n\tAND ct.id = mc.company_type_id\n\tAND t.id = mc.movie_id\n\tAND t.id
    = mi_idx.movie_id\n\tAND mc.movie_id = mi_idx.movie_id\n\tAND it.id = mi_idx.info_type_id"
  qep:
  - node: 'Aggregate: min(mc.note), min(t.title), min(t.production_year) (cost=684706
      rows=1) (actual time=1488..1488 rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=672510 rows=121960) (actual time=1488..1488
      rows=4 loops=1)
    actual_rows: 4.0
    estimated_rows: 121960.0
    q_error: 30490.0
  - node: Nested loop inner join (cost=624489 rows=42300) (actual time=1488..1488
      rows=6 loops=1)
    actual_rows: 6.0
    estimated_rows: 42300.0
    q_error: 7050.0
  - node: Nested loop inner join (cost=571899 rows=126912) (actual time=1488..1488
      rows=10 loops=1)
    actual_rows: 10.0
    estimated_rows: 126912.0
    q_error: 12691.2
  - node: Inner hash join (no condition) (cost=127706 rows=1.27e+6) (actual time=0.686..383
      rows=1.38e+6 loops=1)
    actual_rows: 1380000.0
    estimated_rows: 1270000.0
    q_error: 1.0866141732283465
  - node: Table scan on mi_idx (cost=127706 rows=1.27e+6) (actual time=0.66..270 rows=1.38e+6
      loops=1)
    actual_rows: 1380000.0
    estimated_rows: 1270000.0
    q_error: 1.0866141732283465
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: "Filter: (ct.kind = 'production companies') (cost=0.65 rows=1) (actual time=0.0173..0.0196
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on ct (cost=0.65 rows=4) (actual time=0.0142..0.017 rows=4 loops=1)
    actual_rows: 4.0
    estimated_rows: 4.0
    q_error: 1.0
  - node: "Filter: (it.info = 'bottom 10 rank') (cost=0.25 rows=0.1) (actual time=729e-6..729e-6
      rows=7.25e-6 loops=1.38e+6)"
    actual_rows: 7.25e-06
    estimated_rows: 0.1
    q_error: 13793.103448275862
  - node: Single-row index lookup on it using PRIMARY (id=mi_idx.info_type_id) (cost=0.25
      rows=1) (actual time=559e-6..579e-6 rows=1 loops=1.38e+6)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: 'Filter: (t.production_year > 2000) (cost=0.314 rows=0.333) (actual time=0.00329..0.00331
      rows=0.6 loops=10)'
    actual_rows: 0.6
    estimated_rows: 0.333
    q_error: 1.8018018018018016
  - node: Single-row index lookup on t using PRIMARY (id=mi_idx.movie_id) (cost=0.314
      rows=1) (actual time=0.00309..0.00312 rows=1 loops=10)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: ((mc.company_type_id = ct.id) and (not((mc.note like '%(as Metro-Goldwyn-Mayer
      Pictures)%')))) (cost=0.811 rows=2.88) (actual time=0.0194..0.0202 rows=0.667
      loops=6)"
    actual_rows: 0.667
    estimated_rows: 2.88
    q_error: 4.317841079460269
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=mi_idx.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00513..0.0188 rows=15.5 loops=6)
    actual_rows: 15.5
    estimated_rows: 3.24
    q_error: 4.78395061728395

- query: "-- JOB Query 2a\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(t.title) AS movie_title\nFROM company_name AS cn,\n     keyword AS
    k,\n     movie_companies AS mc,\n     movie_keyword AS mk,\n     title AS t\n
    WHERE cn.country_code ='[de]'\n  AND k.keyword ='character-name-in-title'\n  AND
    cn.id = mc.company_id\n  AND mc.movie_id = t.id\n  AND t.id = mk.movie_id\n  AND
    mk.keyword_id = k.id\n  AND mc.movie_id = mk.movie_id"
  qep:
  - node: 'Aggregate: min(t.title) (cost=3.12e+6 rows=1) (actual time=1261..1261 rows=1
      loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=3.1e+6 rows=195857) (actual time=10.1..1258
      rows=7834 loops=1)
    actual_rows: 7834.0
    estimated_rows: 195857.0
    q_error: 25.000893540975238
  - node: Nested loop inner join (cost=3.07e+6 rows=195857) (actual time=10..1246
      rows=7834 loops=1)
    actual_rows: 7834.0
    estimated_rows: 195857.0
    q_error: 25.000893540975238
  - node: Nested loop inner join (cost=911316 rows=1.96e+6) (actual time=4.44..617
      rows=148552 loops=1)
    actual_rows: 148552.0
    estimated_rows: 1960000.0
    q_error: 13.19403306586246
  - node: Nested loop inner join (cost=225817 rows=603829) (actual time=4.42..327
      rows=41840 loops=1)
    actual_rows: 41840.0
    estimated_rows: 603829.0
    q_error: 14.43185946462715
  - node: "Filter: (k.keyword = 'character-name-in-title') (cost=14477 rows=13804)
      (actual time=3.88..249 rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 13804.0
    q_error: 13804.0
  - node: Table scan on k (cost=14477 rows=138037) (actual time=3.83..238 rows=134170
      loops=1)
    actual_rows: 134170.0
    estimated_rows: 138037.0
    q_error: 1.0288216441827531
  - node: Index lookup on mk using keyword_id_movie_keyword (keyword_id=k.id) (cost=10.9
      rows=43.7) (actual time=0.541..76.6 rows=41840 loops=1)
    actual_rows: 41840.0
    estimated_rows: 43.7
    q_error: 957.437070938215
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=mk.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.0047..0.00668 rows=3.55 loops=41840)
    actual_rows: 3.55
    estimated_rows: 3.24
    q_error: 1.095679012345679
  - node: "Filter: (cn.country_code = '[de]') (cost=1 rows=0.1) (actual time=0.00415..0.00415
      rows=0.0527 loops=148552)"
    actual_rows: 0.0527
    estimated_rows: 0.1
    q_error: 1.8975332068311197
  - node: Single-row index lookup on cn using PRIMARY (id=mc.company_id) (cost=1 rows=1)
      (actual time=0.00395..0.00398 rows=1 loops=148552)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Single-row index lookup on t using PRIMARY (id=mk.movie_id) (cost=0.0969
      rows=1) (actual time=0.00138..0.00141 rows=1 loops=7834)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 2b\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(t.title) AS movie_title\nFROM company_name AS cn,\n     keyword AS
    k,\n     movie_companies AS mc,\n     movie_keyword AS mk,\n     title AS t\n
    WHERE cn.country_code ='[nl]'\n  AND k.keyword ='character-name-in-title'\n  AND
    cn.id = mc.company_id\n  AND mc.movie_id = t.id\n  AND t.id = mk.movie_id\n  AND
    mk.keyword_id = k.id\n  AND mc.movie_id = mk.movie_id"
  qep:
  - node: 'Aggregate: min(t.title) (cost=1.7e+6 rows=1) (actual time=571..571 rows=1
      loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=1.68e+6 rows=195857) (actual time=1.27..570
      rows=5228 loops=1)
    actual_rows: 5228.0
    estimated_rows: 195857.0
    q_error: 37.463083397092575
  - node: Nested loop inner join (cost=1.64e+6 rows=195857) (actual time=1.27..563
      rows=5228 loops=1)
    actual_rows: 5228.0
    estimated_rows: 195857.0
    q_error: 37.463083397092575
  - node: Nested loop inner join (cost=910811 rows=1.96e+6) (actual time=0.133..383
      rows=148552 loops=1)
    actual_rows: 148552.0
    estimated_rows: 1960000.0
    q_error: 13.19403306586246
  - node: Nested loop inner join (cost=225312 rows=603829) (actual time=0.12..114
      rows=41840 loops=1)
    actual_rows: 41840.0
    estimated_rows: 603829.0
    q_error: 14.43185946462715
  - node: "Filter: (k.keyword = 'character-name-in-title') (cost=13972 rows=13804)
      (actual time=0.0621..59.5 rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 13804.0
    q_error: 13804.0
  - node: Table scan on k (cost=13972 rows=138037) (actual time=0.0138..52.3 rows=134170
      loops=1)
    actual_rows: 134170.0
    estimated_rows: 138037.0
    q_error: 1.0288216441827531
  - node: Index lookup on mk using keyword_id_movie_keyword (keyword_id=k.id) (cost=10.9
      rows=43.7) (actual time=0.0574..52.9 rows=41840 loops=1)
    actual_rows: 41840.0
    estimated_rows: 43.7
    q_error: 957.437070938215
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=mk.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.0042..0.00616 rows=3.55 loops=41840)
    actual_rows: 3.55
    estimated_rows: 3.24
    q_error: 1.095679012345679
  - node: "Filter: (cn.country_code = '[nl]') (cost=0.271 rows=0.1) (actual time=0.00112..0.00113
      rows=0.0352 loops=148552)"
    actual_rows: 0.0352
    estimated_rows: 0.1
    q_error: 2.840909090909091
  - node: Single-row index lookup on cn using PRIMARY (id=mc.company_id) (cost=0.271
      rows=1) (actual time=923e-6..944e-6 rows=1 loops=148552)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Single-row index lookup on t using PRIMARY (id=mk.movie_id) (cost=0.0969
      rows=1) (actual time=0.00111..0.00113 rows=1 loops=5228)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 2c\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(t.title) AS movie_title\nFROM company_name AS cn,\n     keyword AS
    k,\n     movie_companies AS mc,\n     movie_keyword AS mk,\n     title AS t\n
    WHERE cn.country_code ='[sm]'\n  AND k.keyword ='character-name-in-title'\n  AND
    cn.id = mc.company_id\n  AND mc.movie_id = t.id\n  AND t.id = mk.movie_id\n  AND
    mk.keyword_id = k.id\n  AND mc.movie_id = mk.movie_id"
  qep:
  - node: 'Aggregate: min(t.title) (cost=1.7e+6 rows=1) (actual time=511..511 rows=1
      loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=1.68e+6 rows=195857) (actual time=511..511
      rows=0 loops=1)
    actual_rows: 0.0
    estimated_rows: 195857.0
    q_error:
  - node: Nested loop inner join (cost=1.64e+6 rows=195857) (actual time=511..511
      rows=0 loops=1)
    actual_rows: 0.0
    estimated_rows: 195857.0
    q_error:
  - node: Nested loop inner join (cost=910811 rows=1.96e+6) (actual time=0.174..362
      rows=148552 loops=1)
    actual_rows: 148552.0
    estimated_rows: 1960000.0
    q_error: 13.19403306586246
  - node: Nested loop inner join (cost=225312 rows=603829) (actual time=0.159..118
      rows=41840 loops=1)
    actual_rows: 41840.0
    estimated_rows: 603829.0
    q_error: 14.43185946462715
  - node: "Filter: (k.keyword = 'character-name-in-title') (cost=13972 rows=13804)
      (actual time=0.0947..67.9 rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 13804.0
    q_error: 13804.0
  - node: Table scan on k (cost=13972 rows=138037) (actual time=0.0441..59.9 rows=134170
      loops=1)
    actual_rows: 134170.0
    estimated_rows: 138037.0
    q_error: 1.0288216441827531
  - node: Index lookup on mk using keyword_id_movie_keyword (keyword_id=k.id) (cost=10.9
      rows=43.7) (actual time=0.0633..48.6 rows=41840 loops=1)
    actual_rows: 41840.0
    estimated_rows: 43.7
    q_error: 957.437070938215
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=mk.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00384..0.00561 rows=3.55 loops=41840)
    actual_rows: 3.55
    estimated_rows: 3.24
    q_error: 1.095679012345679
  - node: "Filter: (cn.country_code = '[sm]') (cost=0.271 rows=0.1) (actual time=929e-6..929e-6
      rows=0 loops=148552)"
    actual_rows: 0.0
    estimated_rows: 0.1
    q_error:
  - node: Single-row index lookup on cn using PRIMARY (id=mc.company_id) (cost=0.271
      rows=1) (actual time=762e-6..782e-6 rows=1 loops=148552)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Single-row index lookup on t using PRIMARY (id=mk.movie_id) (cost=0.0969
      rows=1) (never executed)
    actual_rows:
    estimated_rows: 1.0
    q_error:

- query: "-- JOB Query 2d\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(t.title) AS movie_title\nFROM company_name AS cn,\n     keyword AS
    k,\n     movie_companies AS mc,\n     movie_keyword AS mk,\n     title AS t\n
    WHERE cn.country_code ='[us]'\n  AND k.keyword ='character-name-in-title'\n  AND
    cn.id = mc.company_id\n  AND mc.movie_id = t.id\n  AND t.id = mk.movie_id\n  AND
    mk.keyword_id = k.id\n  AND mc.movie_id = mk.movie_id"
  qep:
  - node: 'Aggregate: min(t.title) (cost=1.7e+6 rows=1) (actual time=694..694 rows=1
      loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=1.68e+6 rows=195857) (actual time=0.172..684
      rows=68316 loops=1)
    actual_rows: 68316.0
    estimated_rows: 195857.0
    q_error: 2.866927220563265
  - node: Nested loop inner join (cost=1.64e+6 rows=195857) (actual time=0.166..610
      rows=68316 loops=1)
    actual_rows: 68316.0
    estimated_rows: 195857.0
    q_error: 2.866927220563265
  - node: Nested loop inner join (cost=910811 rows=1.96e+6) (actual time=0.149..417
      rows=148552 loops=1)
    actual_rows: 148552.0
    estimated_rows: 1960000.0
    q_error: 13.19403306586246
  - node: Nested loop inner join (cost=225312 rows=603829) (actual time=0.135..127
      rows=41840 loops=1)
    actual_rows: 41840.0
    estimated_rows: 603829.0
    q_error: 14.43185946462715
  - node: "Filter: (k.keyword = 'character-name-in-title') (cost=13972 rows=13804)
      (actual time=0.0677..70.5 rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 13804.0
    q_error: 13804.0
  - node: Table scan on k (cost=13972 rows=138037) (actual time=0.019..62.2 rows=134170
      loops=1)
    actual_rows: 134170.0
    estimated_rows: 138037.0
    q_error: 1.0288216441827531
  - node: Index lookup on mk using keyword_id_movie_keyword (keyword_id=k.id) (cost=10.9
      rows=43.7) (actual time=0.0664..54.8 rows=41840 loops=1)
    actual_rows: 41840.0
    estimated_rows: 43.7
    q_error: 957.437070938215
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=mk.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.0045..0.00665 rows=3.55 loops=41840)
    actual_rows: 3.55
    estimated_rows: 3.24
    q_error: 1.095679012345679
  - node: "Filter: (cn.country_code = '[us]') (cost=0.271 rows=0.1) (actual time=0.00116..0.00119
      rows=0.46 loops=148552)"
    actual_rows: 0.46
    estimated_rows: 0.1
    q_error: 4.6
  - node: Single-row index lookup on cn using PRIMARY (id=mc.company_id) (cost=0.271
      rows=1) (actual time=954e-6..978e-6 rows=1 loops=148552)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Single-row index lookup on t using PRIMARY (id=mk.movie_id) (cost=0.0969
      rows=1) (actual time=911e-6..934e-6 rows=1 loops=68316)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 3a\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(t.title) AS movie_title\nFROM keyword AS k,\n     movie_info AS mi,\n\
    \     movie_keyword AS mk,\n     title AS t\nWHERE k.keyword LIKE '%sequel%'\n\
    \  AND mi.info IN ('Sweden',\n                  'Norway',\n                  'Germany',\n\
    \                  'Denmark',\n                  'Swedish',\n                \
    \  'Denish',\n                  'Norwegian',\n                  'German')\n  AND
    t.production_year > 2005\n  AND t.id = mi.movie_id\n  AND t.id = mk.movie_id\n\
    \  AND mk.movie_id = mi.movie_id\n  AND k.id = mk.keyword_id"
  qep:
  - node: 'Aggregate: min(t.title) (cost=1.02e+6 rows=1) (actual time=334..334 rows=1
      loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=958841 rows=600572) (actual time=0.948..334
      rows=206 loops=1)
    actual_rows: 206.0
    estimated_rows: 600572.0
    q_error: 2915.3980582524273
  - node: Nested loop inner join (cost=526762 rows=223596) (actual time=0.459..134
      rows=2235 loops=1)
    actual_rows: 2235.0
    estimated_rows: 223596.0
    q_error: 100.04295302013423
  - node: Nested loop inner join (cost=248771 rows=670854) (actual time=0.27..114
      rows=12951 loops=1)
    actual_rows: 12951.0
    estimated_rows: 670854.0
    q_error: 51.799397729905024
  - node: "Filter: (k.keyword like '%sequel%') (cost=13972 rows=15336) (actual time=0.196..83.8
      rows=30 loops=1)"
    actual_rows: 30.0
    estimated_rows: 15336.0
    q_error: 511.2
  - node: Table scan on k (cost=13972 rows=138037) (actual time=0.0158..60.1 rows=134170
      loops=1)
    actual_rows: 134170.0
    estimated_rows: 138037.0
    q_error: 1.0288216441827531
  - node: Index lookup on mk using keyword_id_movie_keyword (keyword_id=k.id) (cost=10.9
      rows=43.7) (actual time=0.372..0.994 rows=432 loops=30)
    actual_rows: 432.0
    estimated_rows: 43.7
    q_error: 9.88558352402746
  - node: 'Filter: (t.production_year > 2005) (cost=0.314 rows=0.333) (actual time=0.00144..0.00145
      rows=0.173 loops=12951)'
    actual_rows: 0.173
    estimated_rows: 0.333
    q_error: 1.92485549132948
  - node: Single-row index lookup on t using PRIMARY (id=mk.movie_id) (cost=0.314
      rows=1) (actual time=0.0013..0.00132 rows=1 loops=12951)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (mi.info in ('Sweden','Norway','Germany','Denmark','Swedish','Denish','Norwegian','German'))
      (cost=1.4 rows=2.69) (actual time=0.0843..0.0892 rows=0.0922 loops=2235)"
    actual_rows: 0.0922
    estimated_rows: 2.69
    q_error: 29.17570498915401
  - node: Index lookup on mi using movie_id_movie_info (movie_id=mk.movie_id) (cost=1.4
      rows=5.37) (actual time=0.00482..0.0827 rows=44.8 loops=2235)
    actual_rows: 44.8
    estimated_rows: 5.37
    q_error: 8.342644320297952

- query: "-- JOB Query 3b\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(t.title) AS movie_title\nFROM keyword AS k,\n     movie_info AS mi,\n\
    \     movie_keyword AS mk,\n     title AS t\nWHERE k.keyword LIKE '%sequel%'\n\
    \  AND mi.info IN ('Bulgaria')\n  AND t.production_year > 2010\n  AND t.id = mi.movie_id\n\
    \  AND t.id = mk.movie_id\n  AND mk.movie_id = mi.movie_id\n  AND k.id = mk.keyword_id"
  qep:
  - node: 'Aggregate: min(t.title) (cost=970853 rows=1) (actual time=157..157 rows=1
      loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=958841 rows=120114) (actual time=1.58..157
      rows=5 loops=1)
    actual_rows: 5.0
    estimated_rows: 120114.0
    q_error: 24022.8
  - node: Nested loop inner join (cost=526762 rows=223596) (actual time=0.463..115
      rows=405 loops=1)
    actual_rows: 405.0
    estimated_rows: 223596.0
    q_error: 552.0888888888888
  - node: Nested loop inner join (cost=248771 rows=670854) (actual time=0.275..99.2
      rows=12951 loops=1)
    actual_rows: 12951.0
    estimated_rows: 670854.0
    q_error: 51.799397729905024
  - node: "Filter: (k.keyword like '%sequel%') (cost=13972 rows=15336) (actual time=0.201..83.8
      rows=30 loops=1)"
    actual_rows: 30.0
    estimated_rows: 15336.0
    q_error: 511.2
  - node: Table scan on k (cost=13972 rows=138037) (actual time=0.0158..60.3 rows=134170
      loops=1)
    actual_rows: 134170.0
    estimated_rows: 138037.0
    q_error: 1.0288216441827531
  - node: Index lookup on mk using keyword_id_movie_keyword (keyword_id=k.id) (cost=10.9
      rows=43.7) (actual time=0.0367..0.493 rows=432 loops=30)
    actual_rows: 432.0
    estimated_rows: 43.7
    q_error: 9.88558352402746
  - node: 'Filter: (t.production_year > 2010) (cost=0.314 rows=0.333) (actual time=0.00115..0.00115
      rows=0.0313 loops=12951)'
    actual_rows: 0.0313
    estimated_rows: 0.333
    q_error: 10.638977635782748
  - node: Single-row index lookup on t using PRIMARY (id=mk.movie_id) (cost=0.314
      rows=1) (actual time=0.00103..0.00105 rows=1 loops=12951)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (mi.info = 'Bulgaria') (cost=1.4 rows=0.537) (actual time=0.102..0.103
      rows=0.0123 loops=405)"
    actual_rows: 0.0123
    estimated_rows: 0.537
    q_error: 43.65853658536586
  - node: Index lookup on mi using movie_id_movie_info (movie_id=mk.movie_id) (cost=1.4
      rows=5.37) (actual time=0.00421..0.0999 rows=63.3 loops=405)
    actual_rows: 63.3
    estimated_rows: 5.37
    q_error: 11.787709497206704

- query: "-- JOB Query 3c\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(t.title) AS movie_title\nFROM keyword AS k,\n     movie_info AS mi,\n\
    \     movie_keyword AS mk,\n     title AS t\nWHERE k.keyword LIKE '%sequel%'\n\
    \  AND mi.info IN ('Sweden',\n                  'Norway',\n                  'Germany',\n\
    \                  'Denmark',\n                  'Swedish',\n                \
    \  'Denish',\n                  'Norwegian',\n                  'German',\n  \
    \                'USA',\n                  'American')\n  AND t.production_year
    > 1990\n  AND t.id = mi.movie_id\n  AND t.id = mk.movie_id\n  AND mk.movie_id
    = mi.movie_id\n  AND k.id = mk.keyword_id"
  qep:
  - node: 'Aggregate: min(t.title) (cost=1.02e+6 rows=1) (actual time=647..647 rows=1
      loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=958841 rows=600572) (actual time=0.356..646
      rows=7250 loops=1)
    actual_rows: 7250.0
    estimated_rows: 600572.0
    q_error: 82.83751724137932
  - node: Nested loop inner join (cost=526762 rows=223596) (actual time=0.282..120
      rows=7874 loops=1)
    actual_rows: 7874.0
    estimated_rows: 223596.0
    q_error: 28.396748793497586
  - node: Nested loop inner join (cost=248771 rows=670854) (actual time=0.275..97.9
      rows=12951 loops=1)
    actual_rows: 12951.0
    estimated_rows: 670854.0
    q_error: 51.799397729905024
  - node: "Filter: (k.keyword like '%sequel%') (cost=13972 rows=15336) (actual time=0.198..79.2
      rows=30 loops=1)"
    actual_rows: 30.0
    estimated_rows: 15336.0
    q_error: 511.2
  - node: Table scan on k (cost=13972 rows=138037) (actual time=0.017..57.2 rows=134170
      loops=1)
    actual_rows: 134170.0
    estimated_rows: 138037.0
    q_error: 1.0288216441827531
  - node: Index lookup on mk using keyword_id_movie_keyword (keyword_id=k.id) (cost=10.9
      rows=43.7) (actual time=0.0449..0.603 rows=432 loops=30)
    actual_rows: 432.0
    estimated_rows: 43.7
    q_error: 9.88558352402746
  - node: 'Filter: (t.production_year > 1990) (cost=0.314 rows=0.333) (actual time=0.00155..0.00159
      rows=0.608 loops=12951)'
    actual_rows: 0.608
    estimated_rows: 0.333
    q_error: 1.8258258258258258
  - node: Single-row index lookup on t using PRIMARY (id=mk.movie_id) (cost=0.314
      rows=1) (actual time=0.00141..0.00143 rows=1 loops=12951)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (mi.info in ('Sweden','Norway','Germany','Denmark','Swedish','Denish','Norwegian','German','USA','American'))
      (cost=1.4 rows=2.69) (actual time=0.0451..0.0666 rows=0.921 loops=7874)"
    actual_rows: 0.921
    estimated_rows: 2.69
    q_error: 2.9207383279044516
  - node: Index lookup on mi using movie_id_movie_info (movie_id=mk.movie_id) (cost=1.4
      rows=5.37) (actual time=0.00381..0.0611 rows=36.3 loops=7874)
    actual_rows: 36.3
    estimated_rows: 5.37
    q_error: 6.759776536312849

- query: "-- JOB Query 4a\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(mi_idx.info) AS rating,\n       MIN(t.title) AS movie_title\nFROM info_type
    AS it,\n     keyword AS k,\n     movie_info_idx AS mi_idx,\n     movie_keyword
    AS mk,\n     title AS t\nWHERE it.info ='rating'\n  AND k.keyword LIKE '%sequel%'\n\
    \  AND mi_idx.info > '5.0'\n  AND t.production_year > 2005\n  AND t.id = mi_idx.movie_id\n\
    \  AND t.id = mk.movie_id\n  AND mk.movie_id = mi_idx.movie_id\n  AND k.id = mk.keyword_id\n\
    \  AND it.id = mi_idx.info_type_id"
  qep:
  - node: 'Aggregate: min(mi_idx.info), min(t.title) (cost=408977 rows=1) (actual
      time=5372..5372 rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=407170 rows=18075) (actual time=494..5371 rows=740
      loops=1)
    actual_rows: 740.0
    estimated_rows: 18075.0
    q_error: 24.425675675675677
  - node: Nested loop inner join (cost=350226 rows=162695) (actual time=0.0547..2977
      rows=697651 loops=1)
    actual_rows: 697651.0
    estimated_rows: 162695.0
    q_error: 4.288091213620579
  - node: Nested loop inner join (cost=293283 rows=14099) (actual time=0.0401..1850
      rows=106021 loops=1)
    actual_rows: 106021.0
    estimated_rows: 14099.0
    q_error: 7.519753173983971
  - node: Nested loop inner join (cost=275755 rows=42300) (actual time=0.0347..1321
      rows=352990 loops=1)
    actual_rows: 352990.0
    estimated_rows: 42300.0
    q_error: 8.344917257683216
  - node: "Filter: (mi_idx.info > '5.0') (cost=127705 rows=422998) (actual time=0.0207..901
      rows=517682 loops=1)"
    actual_rows: 517682.0
    estimated_rows: 422998.0
    q_error: 1.2238403018453987
  - node: Table scan on mi_idx (cost=127705 rows=1.27e+6) (actual time=0.0159..772
      rows=1.38e+6 loops=1)
    actual_rows: 1380000.0
    estimated_rows: 1270000.0
    q_error: 1.0866141732283465
  - node: "Filter: (it.info = 'rating') (cost=0.25 rows=0.1) (actual time=648e-6..694e-6
      rows=0.682 loops=517682)"
    actual_rows: 0.682
    estimated_rows: 0.1
    q_error: 6.82
  - node: Single-row index lookup on it using PRIMARY (id=mi_idx.info_type_id) (cost=0.25
      rows=1) (actual time=452e-6..475e-6 rows=1 loops=517682)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: 'Filter: (t.production_year > 2005) (cost=0.314 rows=0.333) (actual time=0.00137..0.0014
      rows=0.3 loops=352990)'
    actual_rows: 0.3
    estimated_rows: 0.333
    q_error: 1.11
  - node: Single-row index lookup on t using PRIMARY (id=mi_idx.movie_id) (cost=0.314
      rows=1) (actual time=0.00121..0.00123 rows=1 loops=352990)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mk using movie_id_movie_keyword (movie_id=mi_idx.movie_id)
      (cost=2.89 rows=11.5) (actual time=0.00512..0.0102 rows=6.58 loops=106021)
    actual_rows: 6.58
    estimated_rows: 11.5
    q_error: 1.7477203647416413
  - node: "Filter: (k.keyword like '%sequel%') (cost=0.25 rows=0.111) (actual time=0.00335..0.00335
      rows=0.00106 loops=697651)"
    actual_rows: 0.00106
    estimated_rows: 0.111
    q_error: 104.71698113207547
  - node: Single-row index lookup on k using PRIMARY (id=mk.keyword_id) (cost=0.25
      rows=1) (actual time=0.00303..0.00306 rows=1 loops=697651)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 4b\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(mi_idx.info) AS rating,\n       MIN(t.title) AS movie_title\nFROM info_type
    AS it,\n     keyword AS k,\n     movie_info_idx AS mi_idx,\n     movie_keyword
    AS mk,\n     title AS t\nWHERE it.info ='rating'\n  AND k.keyword LIKE '%sequel%'\n\
    \  AND mi_idx.info > '9.0'\n  AND t.production_year > 2010\n  AND t.id = mi_idx.movie_id\n\
    \  AND t.id = mk.movie_id\n  AND mk.movie_id = mi_idx.movie_id\n  AND k.id = mk.keyword_id\n\
    \  AND it.id = mi_idx.info_type_id"
  qep:
  - node: 'Aggregate: min(mi_idx.info), min(t.title) (cost=408977 rows=1) (actual
      time=819..819 rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=407170 rows=18075) (actual time=335..819 rows=6
      loops=1)
    actual_rows: 6.0
    estimated_rows: 18075.0
    q_error: 3012.5
  - node: Nested loop inner join (cost=350226 rows=162695) (actual time=24.4..814
      rows=1070 loops=1)
    actual_rows: 1070.0
    estimated_rows: 162695.0
    q_error: 152.05140186915887
  - node: Nested loop inner join (cost=293283 rows=14099) (actual time=5.67..812 rows=72
      loops=1)
    actual_rows: 72.0
    estimated_rows: 14099.0
    q_error: 195.81944444444446
  - node: Nested loop inner join (cost=275755 rows=42300) (actual time=5.66..811 rows=305
      loops=1)
    actual_rows: 305.0
    estimated_rows: 42300.0
    q_error: 138.68852459016392
  - node: "Filter: (mi_idx.info > '9.0') (cost=127705 rows=422998) (actual time=0.284..806
      rows=8322 loops=1)"
    actual_rows: 8322.0
    estimated_rows: 422998.0
    q_error: 50.82888728670993
  - node: Table scan on mi_idx (cost=127705 rows=1.27e+6) (actual time=0.0176..701
      rows=1.38e+6 loops=1)
    actual_rows: 1380000.0
    estimated_rows: 1270000.0
    q_error: 1.0866141732283465
  - node: "Filter: (it.info = 'rating') (cost=0.25 rows=0.1) (actual time=490e-6..494e-6
      rows=0.0366 loops=8322)"
    actual_rows: 0.0366
    estimated_rows: 0.1
    q_error: 2.73224043715847
  - node: Single-row index lookup on it using PRIMARY (id=mi_idx.info_type_id) (cost=0.25
      rows=1) (actual time=281e-6..304e-6 rows=1 loops=8322)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: 'Filter: (t.production_year > 2010) (cost=0.314 rows=0.333) (actual time=0.00392..0.00394
      rows=0.236 loops=305)'
    actual_rows: 0.236
    estimated_rows: 0.333
    q_error: 1.4110169491525426
  - node: Single-row index lookup on t using PRIMARY (id=mi_idx.movie_id) (cost=0.314
      rows=1) (actual time=0.00355..0.00358 rows=1 loops=305)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mk using movie_id_movie_keyword (movie_id=mi_idx.movie_id)
      (cost=2.89 rows=11.5) (actual time=0.0127..0.0289 rows=14.9 loops=72)
    actual_rows: 14.9
    estimated_rows: 11.5
    q_error: 1.2956521739130435
  - node: "Filter: (k.keyword like '%sequel%') (cost=0.25 rows=0.111) (actual time=0.00399..0.00399
      rows=0.00561 loops=1070)"
    actual_rows: 0.00561
    estimated_rows: 0.111
    q_error: 19.78609625668449
  - node: Single-row index lookup on k using PRIMARY (id=mk.keyword_id) (cost=0.25
      rows=1) (actual time=0.00364..0.00366 rows=1 loops=1070)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 4c\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(mi_idx.info) AS rating,\n       MIN(t.title) AS movie_title\nFROM info_type
    AS it,\n     keyword AS k,\n     movie_info_idx AS mi_idx,\n     movie_keyword
    AS mk,\n     title AS t\nWHERE it.info ='rating'\n  AND k.keyword LIKE '%sequel%'\n\
    \  AND mi_idx.info > '2.0'\n  AND t.production_year > 1990\n  AND t.id = mi_idx.movie_id\n\
    \  AND t.id = mk.movie_id\n  AND mk.movie_id = mi_idx.movie_id\n  AND k.id = mk.keyword_id\n\
    \  AND it.id = mi_idx.info_type_id"
  qep:
  - node: 'Aggregate: min(mi_idx.info), min(t.title) (cost=408977 rows=1) (actual
      time=11538..11538 rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=407170 rows=18075) (actual time=2.89..11535
      rows=4700 loops=1)
    actual_rows: 4700.0
    estimated_rows: 18075.0
    q_error: 3.845744680851064
  - node: Nested loop inner join (cost=350226 rows=162695) (actual time=0.0495..5620
      rows=2.01e+6 loops=1)
    actual_rows: 2010000.0
    estimated_rows: 162695.0
    q_error: 12.354405482651588
  - node: Nested loop inner join (cost=293283 rows=14099) (actual time=0.0371..2430
      rows=294217 loops=1)
    actual_rows: 294217.0
    estimated_rows: 14099.0
    q_error: 20.867933896020993
  - node: Nested loop inner join (cost=275755 rows=42300) (actual time=0.0317..1718
      rows=448969 loops=1)
    actual_rows: 448969.0
    estimated_rows: 42300.0
    q_error: 10.613924349881797
  - node: "Filter: (mi_idx.info > '2.0') (cost=127705 rows=422998) (actual time=0.0199..936
      rows=806365 loops=1)"
    actual_rows: 806365.0
    estimated_rows: 422998.0
    q_error: 1.9063092496891239
  - node: Table scan on mi_idx (cost=127705 rows=1.27e+6) (actual time=0.0156..795
      rows=1.38e+6 loops=1)
    actual_rows: 1380000.0
    estimated_rows: 1270000.0
    q_error: 1.0866141732283465
  - node: "Filter: (it.info = 'rating') (cost=0.25 rows=0.1) (actual time=820e-6..859e-6
      rows=0.557 loops=806365)"
    actual_rows: 0.557
    estimated_rows: 0.1
    q_error: 5.57
  - node: Single-row index lookup on it using PRIMARY (id=mi_idx.info_type_id) (cost=0.25
      rows=1) (actual time=621e-6..643e-6 rows=1 loops=806365)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: 'Filter: (t.production_year > 1990) (cost=0.314 rows=0.333) (actual time=0.00142..0.00146
      rows=0.655 loops=448969)'
    actual_rows: 0.655
    estimated_rows: 0.333
    q_error: 1.966966966966967
  - node: Single-row index lookup on t using PRIMARY (id=mi_idx.movie_id) (cost=0.314
      rows=1) (actual time=0.00126..0.00128 rows=1 loops=448969)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mk using movie_id_movie_keyword (movie_id=mi_idx.movie_id)
      (cost=2.89 rows=11.5) (actual time=0.00523..0.0104 rows=6.84 loops=294217)
    actual_rows: 6.84
    estimated_rows: 11.5
    q_error: 1.6812865497076024
  - node: "Filter: (k.keyword like '%sequel%') (cost=0.25 rows=0.111) (actual time=0.00285..0.00285
      rows=0.00234 loops=2.01e+6)"
    actual_rows: 0.00234
    estimated_rows: 0.111
    q_error: 47.43589743589744
  - node: Single-row index lookup on k using PRIMARY (id=mk.keyword_id) (cost=0.25
      rows=1) (actual time=0.00254..0.00256 rows=1 loops=2.01e+6)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 5a\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(t.title) AS typical_european_movie\nFROM company_type AS ct,\n    \
    \ info_type AS it,\n     movie_companies AS mc,\n     movie_info AS mi,\n    \
    \ title AS t\nWHERE ct.kind = 'production companies'\n  AND mc.note LIKE '%(theatrical)%'\n\
    \  AND mc.note LIKE '%(France)%'\n  AND mi.info IN ('Sweden',\n              \
    \    'Norway',\n                  'Germany',\n                  'Denmark',\n \
    \                 'Swedish',\n                  'Denish',\n                  'Norwegian',\n\
    \                  'German')\n  AND t.production_year > 2005\n  AND t.id = mi.movie_id\n\
    \  AND t.id = mc.movie_id\n  AND mc.movie_id = mi.movie_id\n  AND ct.id = mc.company_type_id\n\
    \  AND it.id = mi.info_type_id"
  qep:
  - node: 'Aggregate: min(t.title) (cost=233084 rows=1) (actual time=28992..28992
      rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=232827 rows=2566) (actual time=28992..28992
      rows=0 loops=1)
    actual_rows: 0.0
    estimated_rows: 2566.0
    q_error:
  - node: Nested loop inner join (cost=174573 rows=51314) (actual time=6569..28663
      rows=48168 loops=1)
    actual_rows: 48168.0
    estimated_rows: 51314.0
    q_error: 1.0653130709184522
  - node: Nested loop inner join (cost=110776 rows=153957) (actual time=6568..28281
      rows=153897 loops=1)
    actual_rows: 153897.0
    estimated_rows: 153957.0
    q_error: 1.0003898711475858
  - node: Inner hash join (no condition) (cost=12.2 rows=113) (actual time=0.0423..0.368
      rows=113 loops=1)
    actual_rows: 113.0
    estimated_rows: 113.0
    q_error: 1.0
  - node: Covering index scan on it using PRIMARY (cost=11.6 rows=113) (actual time=0.0116..0.128
      rows=113 loops=1)
    actual_rows: 113.0
    estimated_rows: 113.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: "Filter: (ct.kind = 'production companies') (cost=0.65 rows=1) (actual time=0.0195..0.0219
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on ct (cost=0.65 rows=4) (actual time=0.0172..0.0203 rows=4 loops=1)
    actual_rows: 4.0
    estimated_rows: 4.0
    q_error: 1.0
  - node: "Filter: (mi.info in ('Sweden','Norway','Germany','Denmark','Swedish','Denish','Norwegian','German'))
      (cost=709 rows=1362) (actual time=197..250 rows=1362 loops=113)"
    actual_rows: 1362.0
    estimated_rows: 1362.0
    q_error: 1.0
  - node: Index lookup on mi using info_type_id_movie_info (info_type_id=it.id) (cost=709
      rows=2725) (actual time=0.0233..229 rows=131290 loops=113)
    actual_rows: 131290.0
    estimated_rows: 2725.0
    q_error: 48.179816513761466
  - node: 'Filter: (t.production_year > 2005) (cost=0.314 rows=0.333) (actual time=0.00234..0.00236
      rows=0.313 loops=153897)'
    actual_rows: 0.313
    estimated_rows: 0.333
    q_error: 1.063897763578275
  - node: Single-row index lookup on t using PRIMARY (id=mi.movie_id) (cost=0.314
      rows=1) (actual time=0.00214..0.00217 rows=1 loops=153897)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: ((mc.company_type_id = ct.id) and (mc.note like '%(theatrical)%')
      and (mc.note like '%(France)%')) (cost=0.811 rows=0.05) (actual time=0.00665..0.00665
      rows=0 loops=48168)"
    actual_rows: 0.0
    estimated_rows: 0.05
    q_error:
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=mi.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00342..0.00612 rows=2.5 loops=48168)
    actual_rows: 2.5
    estimated_rows: 3.24
    q_error: 1.296

- query: "-- JOB Query 5b\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(t.title) AS american_vhs_movie\nFROM company_type AS ct,\n     info_type
    AS it,\n     movie_companies AS mc,\n     movie_info AS mi,\n     title AS t\n
    WHERE ct.kind = 'production companies'\n  AND mc.note LIKE '%(VHS)%'\n  AND mc.note
    LIKE '%(USA)%'\n  AND mc.note LIKE '%(1994)%'\n  AND mi.info IN ('USA',\n    \
    \              'America')\n  AND t.production_year > 2010\n  AND t.id = mi.movie_id\n\
    \  AND t.id = mc.movie_id\n  AND mc.movie_id = mi.movie_id\n  AND ct.id = mc.company_type_id\n\
    \  AND it.id = mi.info_type_id"
  qep:
  - node: 'Aggregate: min(t.title) (cost=156673 rows=1) (actual time=28565..28565
      rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=156570 rows=1026) (actual time=28565..28565
      rows=0 loops=1)
    actual_rows: 0.0
    estimated_rows: 1026.0
    q_error:
  - node: Nested loop inner join (cost=133268 rows=20526) (actual time=12713..28136
      rows=82354 loops=1)
    actual_rows: 82354.0
    estimated_rows: 20526.0
    q_error: 4.012179674559095
  - node: Nested loop inner join (cost=107782 rows=61583) (actual time=12713..27020
      rows=552779 loops=1)
    actual_rows: 552779.0
    estimated_rows: 61583.0
    q_error: 8.976162252569702
  - node: Inner hash join (no condition) (cost=12.2 rows=113) (actual time=0.0346..0.407
      rows=113 loops=1)
    actual_rows: 113.0
    estimated_rows: 113.0
    q_error: 1.0
  - node: Covering index scan on it using PRIMARY (cost=11.6 rows=113) (actual time=0.0092..0.141
      rows=113 loops=1)
    actual_rows: 113.0
    estimated_rows: 113.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: "Filter: (ct.kind = 'production companies') (cost=0.65 rows=1) (actual time=0.0161..0.0182
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on ct (cost=0.65 rows=4) (actual time=0.014..0.0165 rows=4 loops=1)
    actual_rows: 4.0
    estimated_rows: 4.0
    q_error: 1.0
  - node: "Filter: (mi.info in ('USA','America')) (cost=682 rows=545) (actual time=203..239
      rows=4892 loops=113)"
    actual_rows: 4892.0
    estimated_rows: 545.0
    q_error: 8.976146788990826
  - node: Index lookup on mi using info_type_id_movie_info (info_type_id=it.id) (cost=682
      rows=2725) (actual time=0.00948..219 rows=131290 loops=113)
    actual_rows: 131290.0
    estimated_rows: 2725.0
    q_error: 48.179816513761466
  - node: 'Filter: (t.production_year > 2010) (cost=0.314 rows=0.333) (actual time=0.0019..0.00191
      rows=0.149 loops=552779)'
    actual_rows: 0.149
    estimated_rows: 0.333
    q_error: 2.234899328859061
  - node: Single-row index lookup on t using PRIMARY (id=mi.movie_id) (cost=0.314
      rows=1) (actual time=0.00171..0.00173 rows=1 loops=552779)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: ((mc.company_type_id = ct.id) and (mc.note like '%(VHS)%') and
      (mc.note like '%(USA)%') and (mc.note like '%(1994)%')) (cost=0.811 rows=0.05)
      (actual time=0.00503..0.00503 rows=0 loops=82354)"
    actual_rows: 0.0
    estimated_rows: 0.05
    q_error:
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=mi.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00317..0.0047 rows=1.46 loops=82354)
    actual_rows: 1.46
    estimated_rows: 3.24
    q_error: 2.219178082191781

- query: "-- JOB Query 5c\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(t.title) AS american_movie\nFROM company_type AS ct,\n     info_type
    AS it,\n     movie_companies AS mc,\n     movie_info AS mi,\n     title AS t\n
    WHERE ct.kind = 'production companies'\n  AND mc.note NOT LIKE '%(TV)%'\n  AND
    mc.note LIKE '%(USA)%'\n  AND mi.info IN ('Sweden',\n                  'Norway',\n\
    \                  'Germany',\n                  'Denmark',\n                \
    \  'Swedish',\n                  'Denish',\n                  'Norwegian',\n \
    \                 'German',\n                  'USA',\n                  'American')\n\
    \  AND t.production_year > 1990\n  AND t.id = mi.movie_id\n  AND t.id = mc.movie_id\n\
    \  AND mc.movie_id = mi.movie_id\n  AND ct.id = mc.company_type_id\n  AND it.id
    = mi.info_type_id"
  qep:
  - node: 'Aggregate: min(t.title) (cost=230742 rows=1) (actual time=30978..30978
      rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=229098 rows=16437) (actual time=7524..30977
      rows=669 loops=1)
    actual_rows: 669.0
    estimated_rows: 16437.0
    q_error: 24.569506726457398
  - node: Nested loop inner join (cost=170844 rows=51314) (actual time=6392..28432
      rows=476405 loops=1)
    actual_rows: 476405.0
    estimated_rows: 51314.0
    q_error: 9.284113497291187
  - node: Nested loop inner join (cost=107782 rows=153957) (actual time=6392..27290
      rows=706676 loops=1)
    actual_rows: 706676.0
    estimated_rows: 153957.0
    q_error: 4.590086842430029
  - node: Inner hash join (no condition) (cost=12.2 rows=113) (actual time=0.0357..0.381
      rows=113 loops=1)
    actual_rows: 113.0
    estimated_rows: 113.0
    q_error: 1.0
  - node: Covering index scan on it using PRIMARY (cost=11.6 rows=113) (actual time=0.0089..0.132
      rows=113 loops=1)
    actual_rows: 113.0
    estimated_rows: 113.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: "Filter: (ct.kind = 'production companies') (cost=0.65 rows=1) (actual time=0.0169..0.0195
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on ct (cost=0.65 rows=4) (actual time=0.0148..0.0178 rows=4 loops=1)
    actual_rows: 4.0
    estimated_rows: 4.0
    q_error: 1.0
  - node: "Filter: (mi.info in ('Sweden','Norway','Germany','Denmark','Swedish','Denish','Norwegian','German','USA','American'))
      (cost=682 rows=1362) (actual time=185..241 rows=6254 loops=113)"
    actual_rows: 6254.0
    estimated_rows: 1362.0
    q_error: 4.591776798825257
  - node: Index lookup on mi using info_type_id_movie_info (info_type_id=it.id) (cost=682
      rows=2725) (actual time=0.00912..216 rows=131290 loops=113)
    actual_rows: 131290.0
    estimated_rows: 2725.0
    q_error: 48.179816513761466
  - node: 'Filter: (t.production_year > 1990) (cost=0.31 rows=0.333) (actual time=0.00143..0.00148
      rows=0.674 loops=706676)'
    actual_rows: 0.674
    estimated_rows: 0.333
    q_error: 2.024024024024024
  - node: Single-row index lookup on t using PRIMARY (id=mi.movie_id) (cost=0.31 rows=1)
      (actual time=0.00126..0.00129 rows=1 loops=706676)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: ((mc.company_type_id = ct.id) and (not((mc.note like '%(TV)%')))
      and (mc.note like '%(USA)%')) (cost=0.811 rows=0.32) (actual time=0.00518..0.00518
      rows=0.0014 loops=476405)"
    actual_rows: 0.0014
    estimated_rows: 0.32
    q_error: 228.57142857142858
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=mi.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00273..0.00478 rows=2.06 loops=476405)
    actual_rows: 2.06
    estimated_rows: 3.24
    q_error: 1.5728155339805825

- query: "-- JOB Query 6a\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(k.keyword) AS movie_keyword,\n       MIN(n.name) AS actor_name,\n \
    \      MIN(t.title) AS marvel_movie\nFROM cast_info AS ci,\n     keyword AS k,\n\
    \     movie_keyword AS mk,\n     name AS n,\n     title AS t\nWHERE k.keyword
    = 'marvel-cinematic-universe'\n  AND n.name LIKE '%Downey%Robert%'\n  AND t.production_year
    > 2010\n  AND k.id = mk.keyword_id\n  AND t.id = mk.movie_id\n  AND t.id = ci.movie_id\n\
    \  AND ci.movie_id = mk.movie_id\n  AND n.id = ci.person_id"
  qep:
  - node: 'Aggregate: min(k.keyword), min(n.`name`), min(t.title) (cost=5.04e+6 rows=1)
      (actual time=545..545 rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=5.01e+6 rows=345853) (actual time=77.2..545
      rows=6 loops=1)
    actual_rows: 6.0
    estimated_rows: 345853.0
    q_error: 57642.166666666664
  - node: Nested loop inner join (cost=1.58e+6 rows=3.11e+6) (actual time=3.85..117
      rows=1224 loops=1)
    actual_rows: 1224.0
    estimated_rows: 3110000.0
    q_error: 2540.849673202614
  - node: Nested loop inner join (cost=472646 rows=201256) (actual time=3.78..107
      rows=11 loops=1)
    actual_rows: 11.0
    estimated_rows: 201256.0
    q_error: 18296.0
  - node: Nested loop inner join (cost=225312 rows=603829) (actual time=3.77..107
      rows=14 loops=1)
    actual_rows: 14.0
    estimated_rows: 603829.0
    q_error: 43130.642857142855
  - node: "Filter: (k.keyword = 'marvel-cinematic-universe') (cost=13972 rows=13804)
      (actual time=3.26..106 rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 13804.0
    q_error: 13804.0
  - node: Table scan on k (cost=13972 rows=138037) (actual time=0.0094..89.5 rows=134170
      loops=1)
    actual_rows: 134170.0
    estimated_rows: 138037.0
    q_error: 1.0288216441827531
  - node: Index lookup on mk using keyword_id_movie_keyword (keyword_id=k.id) (cost=10.9
      rows=43.7) (actual time=0.506..0.53 rows=14 loops=1)
    actual_rows: 14.0
    estimated_rows: 43.7
    q_error: 3.1214285714285714
  - node: 'Filter: (t.production_year > 2010) (cost=0.31 rows=0.333) (actual time=0.0129..0.0132
      rows=0.786 loops=14)'
    actual_rows: 0.786
    estimated_rows: 0.333
    q_error: 2.3603603603603602
  - node: Single-row index lookup on t using PRIMARY (id=mk.movie_id) (cost=0.31 rows=1)
      (actual time=0.0111..0.0112 rows=1 loops=14)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on ci using movie_id_cast_info (movie_id=mk.movie_id) (cost=3.96
      rows=15.5) (actual time=0.122..0.918 rows=111 loops=11)
    actual_rows: 111.0
    estimated_rows: 15.5
    q_error: 7.161290322580645
  - node: "Filter: (n.`name` like '%Downey%Robert%') (cost=1 rows=0.111) (actual time=0.349..0.349
      rows=0.0049 loops=1224)"
    actual_rows: 0.0049
    estimated_rows: 0.111
    q_error: 22.653061224489797
  - node: Single-row index lookup on n using PRIMARY (id=ci.person_id) (cost=1 rows=1)
      (actual time=0.346..0.347 rows=1 loops=1224)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 6b\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(k.keyword) AS movie_keyword,\n       MIN(n.name) AS actor_name,\n \
    \      MIN(t.title) AS hero_movie\nFROM cast_info AS ci,\n     keyword AS k,\n\
    \     movie_keyword AS mk,\n     name AS n,\n     title AS t\nWHERE k.keyword
    IN ('superhero',\n                    'sequel',\n                    'second-part',\n\
    \                    'marvel-comics',\n                    'based-on-comic',\n\
    \                    'tv-special',\n                    'fight',\n           \
    \         'violence')\n  AND n.name LIKE '%Downey%Robert%'\n  AND t.production_year
    > 2014\n  AND k.id = mk.keyword_id\n  AND t.id = mk.movie_id\n  AND t.id = ci.movie_id\n\
    \  AND ci.movie_id = mk.movie_id\n  AND n.id = ci.person_id"
  qep:
  - node: 'Aggregate: min(k.keyword), min(n.`name`), min(t.title) (cost=13.2e+6 rows=1)
      (actual time=17837..17837 rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=12.5e+6 rows=6.74e+6) (actual time=1034..17837
      rows=12 loops=1)
    actual_rows: 12.0
    estimated_rows: 6740000.0
    q_error: 561666.6666666666
  - node: Nested loop inner join (cost=7.8e+6 rows=13.5e+6) (actual time=1034..17837
      rows=18 loops=1)
    actual_rows: 18.0
    estimated_rows: 13500000.0
    q_error: 750000.0
  - node: Nested loop inner join (cost=3.09e+6 rows=1.17e+6) (actual time=1033..17837
      rows=3 loops=1)
    actual_rows: 3.0
    estimated_rows: 1170000.0
    q_error: 390000.0
  - node: Nested loop inner join (cost=1.65e+6 rows=3.5e+6) (actual time=1033..17830
      rows=486 loops=1)
    actual_rows: 486.0
    estimated_rows: 3500000.0
    q_error: 7201.6460905349795
  - node: "Filter: (n.`name` like '%Downey%Robert%') (cost=405312 rows=409489) (actual
      time=1032..17828 rows=2 loops=1)"
    actual_rows: 2.0
    estimated_rows: 409489.0
    q_error: 204744.5
  - node: Table scan on n (cost=405312 rows=3.69e+6) (actual time=0.229..16423 rows=4.17e+6
      loops=1)
    actual_rows: 4170000.0
    estimated_rows: 3690000.0
    q_error: 1.1300813008130082
  - node: Index lookup on ci using person_id_cast_info (person_id=n.id) (cost=2.19
      rows=8.56) (actual time=0.414..1.06 rows=243 loops=2)
    actual_rows: 243.0
    estimated_rows: 8.56
    q_error: 28.387850467289717
  - node: 'Filter: (t.production_year > 2014) (cost=0.31 rows=0.333) (actual time=0.0134..0.0134
      rows=0.00617 loops=486)'
    actual_rows: 0.00617
    estimated_rows: 0.333
    q_error: 53.970826580226905
  - node: Single-row index lookup on t using PRIMARY (id=ci.movie_id) (cost=0.31 rows=1)
      (actual time=0.0132..0.0132 rows=1 loops=486)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mk using movie_id_movie_keyword (movie_id=ci.movie_id) (cost=2.88
      rows=11.5) (actual time=0.0115..0.0124 rows=6 loops=3)
    actual_rows: 6.0
    estimated_rows: 11.5
    q_error: 1.9166666666666667
  - node: "Filter: (k.keyword in ('superhero','sequel','second-part','marvel-comics','based-on-comic','tv-special','fight','violence'))
      (cost=0.25 rows=0.5) (actual time=0.00273..0.00277 rows=0.667 loops=18)"
    actual_rows: 0.667
    estimated_rows: 0.5
    q_error: 1.334
  - node: Single-row index lookup on k using PRIMARY (id=mk.keyword_id) (cost=0.25
      rows=1) (actual time=0.00231..0.00233 rows=1 loops=18)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 6c\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(k.keyword) AS movie_keyword,\n       MIN(n.name) AS actor_name,\n \
    \      MIN(t.title) AS marvel_movie\nFROM cast_info AS ci,\n     keyword AS k,\n\
    \     movie_keyword AS mk,\n     name AS n,\n     title AS t\nWHERE k.keyword
    = 'marvel-cinematic-universe'\n  AND n.name LIKE '%Downey%Robert%'\n  AND t.production_year
    > 2014\n  AND k.id = mk.keyword_id\n  AND t.id = mk.movie_id\n  AND t.id = ci.movie_id\n\
    \  AND ci.movie_id = mk.movie_id\n  AND n.id = ci.person_id"
  qep:
  - node: 'Aggregate: min(k.keyword), min(n.`name`), min(t.title) (cost=2.71e+6 rows=1)
      (actual time=59.2..59.2 rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=2.67e+6 rows=345853) (actual time=3.54..59.2
      rows=2 loops=1)
    actual_rows: 2.0
    estimated_rows: 345853.0
    q_error: 172926.5
  - node: Nested loop inner join (cost=1.58e+6 rows=3.11e+6) (actual time=3.42..59
      rows=33 loops=1)
    actual_rows: 33.0
    estimated_rows: 3110000.0
    q_error: 94242.42424242424
  - node: Nested loop inner join (cost=472413 rows=201256) (actual time=3.38..59 rows=2
      loops=1)
    actual_rows: 2.0
    estimated_rows: 201256.0
    q_error: 100628.0
  - node: Nested loop inner join (cost=225312 rows=603829) (actual time=3.37..58.9
      rows=14 loops=1)
    actual_rows: 14.0
    estimated_rows: 603829.0
    q_error: 43130.642857142855
  - node: "Filter: (k.keyword = 'marvel-cinematic-universe') (cost=13972 rows=13804)
      (actual time=3.31..58.9 rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 13804.0
    q_error: 13804.0
  - node: Table scan on k (cost=13972 rows=138037) (actual time=0.0161..52 rows=134170
      loops=1)
    actual_rows: 134170.0
    estimated_rows: 138037.0
    q_error: 1.0288216441827531
  - node: Index lookup on mk using keyword_id_movie_keyword (keyword_id=k.id) (cost=10.9
      rows=43.7) (actual time=0.0552..0.0573 rows=14 loops=1)
    actual_rows: 14.0
    estimated_rows: 43.7
    q_error: 3.1214285714285714
  - node: 'Filter: (t.production_year > 2014) (cost=0.309 rows=0.333) (actual time=0.00225..0.00226
      rows=0.143 loops=14)'
    actual_rows: 0.143
    estimated_rows: 0.333
    q_error: 2.328671328671329
  - node: Single-row index lookup on t using PRIMARY (id=mk.movie_id) (cost=0.309
      rows=1) (actual time=0.00199..0.00201 rows=1 loops=14)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on ci using movie_id_cast_info (movie_id=mk.movie_id) (cost=3.96
      rows=15.5) (actual time=0.0345..0.0433 rows=16.5 loops=2)
    actual_rows: 16.5
    estimated_rows: 15.5
    q_error: 1.064516129032258
  - node: "Filter: (n.`name` like '%Downey%Robert%') (cost=0.25 rows=0.111) (actual
      time=0.00356..0.00356 rows=0.0606 loops=33)"
    actual_rows: 0.0606
    estimated_rows: 0.111
    q_error: 1.8316831683168318
  - node: Single-row index lookup on n using PRIMARY (id=ci.person_id) (cost=0.25
      rows=1) (actual time=0.0033..0.00332 rows=1 loops=33)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 6d\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(k.keyword) AS movie_keyword,\n       MIN(n.name) AS actor_name,\n \
    \      MIN(t.title) AS hero_movie\nFROM cast_info AS ci,\n     keyword AS k,\n\
    \     movie_keyword AS mk,\n     name AS n,\n     title AS t\nWHERE k.keyword
    IN ('superhero',\n                    'sequel',\n                    'second-part',\n\
    \                    'marvel-comics',\n                    'based-on-comic',\n\
    \                    'tv-special',\n                    'fight',\n           \
    \         'violence')\n  AND n.name LIKE '%Downey%Robert%'\n  AND t.production_year
    > 2000\n  AND k.id = mk.keyword_id\n  AND t.id = mk.movie_id\n  AND t.id = ci.movie_id\n\
    \  AND ci.movie_id = mk.movie_id\n  AND n.id = ci.person_id"
  qep:
  - node: 'Aggregate: min(k.keyword), min(n.`name`), min(t.title) (cost=10.5e+6 rows=1)
      (actual time=20924..20924 rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=10.4e+6 rows=1.2e+6) (actual time=892..20924
      rows=88 loops=1)
    actual_rows: 88.0
    estimated_rows: 1200000.0
    q_error: 13636.363636363636
  - node: Nested loop inner join (cost=6.58e+6 rows=10.8e+6) (actual time=2.34..17666
      rows=785477 loops=1)
    actual_rows: 785477.0
    estimated_rows: 10800000.0
    q_error: 13.749606926746424
  - node: Nested loop inner join (cost=2.74e+6 rows=696772) (actual time=2.33..14908
      rows=14165 loops=1)
    actual_rows: 14165.0
    estimated_rows: 696772.0
    q_error: 49.18969290504765
  - node: Nested loop inner join (cost=1.88e+6 rows=2.09e+6) (actual time=2.32..14804
      rows=35548 loops=1)
    actual_rows: 35548.0
    estimated_rows: 2090000.0
    q_error: 58.793743670529985
  - node: Table scan on mk (cost=420275 rows=4.18e+6) (actual time=0.71..1169 rows=4.52e+6
      loops=1)
    actual_rows: 4520000.0
    estimated_rows: 4180000.0
    q_error: 1.0813397129186604
  - node: "Filter: (k.keyword in ('superhero','sequel','second-part','marvel-comics','based-on-comic','tv-special','fight','violence'))
      (cost=0.25 rows=0.5) (actual time=0.00292..0.00292 rows=0.00786 loops=4.52e+6)"
    actual_rows: 0.00786
    estimated_rows: 0.5
    q_error: 63.613231552162844
  - node: Single-row index lookup on k using PRIMARY (id=mk.keyword_id) (cost=0.25
      rows=1) (actual time=0.00258..0.00261 rows=1 loops=4.52e+6)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: 'Filter: (t.production_year > 2000) (cost=0.309 rows=0.333) (actual time=0.00271..0.00274
      rows=0.398 loops=35548)'
    actual_rows: 0.398
    estimated_rows: 0.333
    q_error: 1.1951951951951951
  - node: Single-row index lookup on t using PRIMARY (id=mk.movie_id) (cost=0.309
      rows=1) (actual time=0.00237..0.00239 rows=1 loops=35548)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on ci using movie_id_cast_info (movie_id=mk.movie_id) (cost=3.96
      rows=15.5) (actual time=0.0684..0.191 rows=55.5 loops=14165)
    actual_rows: 55.5
    estimated_rows: 15.5
    q_error: 3.5806451612903225
  - node: "Filter: (n.`name` like '%Downey%Robert%') (cost=0.25 rows=0.111) (actual
      time=0.00405..0.00405 rows=112e-6 loops=785477)"
    actual_rows: 0.000112
    estimated_rows: 0.111
    q_error: 991.0714285714286
  - node: Single-row index lookup on n using PRIMARY (id=ci.person_id) (cost=0.25
      rows=1) (actual time=0.00365..0.00368 rows=1 loops=785477)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 6e\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(k.keyword) AS movie_keyword,\n       MIN(n.name) AS actor_name,\n \
    \      MIN(t.title) AS marvel_movie\nFROM cast_info AS ci,\n     keyword AS k,\n\
    \     movie_keyword AS mk,\n     name AS n,\n     title AS t\nWHERE k.keyword
    = 'marvel-cinematic-universe'\n  AND n.name LIKE '%Downey%Robert%'\n  AND t.production_year
    > 2000\n  AND k.id = mk.keyword_id\n  AND t.id = mk.movie_id\n  AND t.id = ci.movie_id\n\
    \  AND ci.movie_id = mk.movie_id\n  AND n.id = ci.person_id"
  qep:
  - node: 'Aggregate: min(k.keyword), min(n.`name`), min(t.title) (cost=2.7e+6 rows=1)
      (actual time=68.9..68.9 rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=2.67e+6 rows=345853) (actual time=4.29..68.8
      rows=6 loops=1)
    actual_rows: 6.0
    estimated_rows: 345853.0
    q_error: 57642.166666666664
  - node: Nested loop inner join (cost=1.58e+6 rows=3.11e+6) (actual time=3.52..66.8
      rows=1224 loops=1)
    actual_rows: 1224.0
    estimated_rows: 3110000.0
    q_error: 2540.849673202614
  - node: Nested loop inner join (cost=472413 rows=201256) (actual time=3.47..64 rows=11
      loops=1)
    actual_rows: 11.0
    estimated_rows: 201256.0
    q_error: 18296.0
  - node: Nested loop inner join (cost=225312 rows=603829) (actual time=3.46..64 rows=14
      loops=1)
    actual_rows: 14.0
    estimated_rows: 603829.0
    q_error: 43130.642857142855
  - node: "Filter: (k.keyword = 'marvel-cinematic-universe') (cost=13972 rows=13804)
      (actual time=3.41..63.9 rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 13804.0
    q_error: 13804.0
  - node: Table scan on k (cost=13972 rows=138037) (actual time=0.0136..56.2 rows=134170
      loops=1)
    actual_rows: 134170.0
    estimated_rows: 138037.0
    q_error: 1.0288216441827531
  - node: Index lookup on mk using keyword_id_movie_keyword (keyword_id=k.id) (cost=10.9
      rows=43.7) (actual time=0.0499..0.0552 rows=14 loops=1)
    actual_rows: 14.0
    estimated_rows: 43.7
    q_error: 3.1214285714285714
  - node: 'Filter: (t.production_year > 2000) (cost=0.309 rows=0.333) (actual time=0.00294..0.00301
      rows=0.786 loops=14)'
    actual_rows: 0.786
    estimated_rows: 0.333
    q_error: 2.3603603603603602
  - node: Single-row index lookup on t using PRIMARY (id=mk.movie_id) (cost=0.309
      rows=1) (actual time=0.0027..0.00271 rows=1 loops=14)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on ci using movie_id_cast_info (movie_id=mk.movie_id) (cost=3.95
      rows=15.5) (actual time=0.0363..0.248 rows=111 loops=11)
    actual_rows: 111.0
    estimated_rows: 15.5
    q_error: 7.161290322580645
  - node: "Filter: (n.`name` like '%Downey%Robert%') (cost=0.25 rows=0.111) (actual
      time=0.0016..0.0016 rows=0.0049 loops=1224)"
    actual_rows: 0.0049
    estimated_rows: 0.111
    q_error: 22.653061224489797
  - node: Single-row index lookup on n using PRIMARY (id=ci.person_id) (cost=0.25
      rows=1) (actual time=0.00135..0.00137 rows=1 loops=1224)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 6f\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(k.keyword) AS movie_keyword,\n       MIN(n.name) AS actor_name,\n \
    \      MIN(t.title) AS hero_movie\nFROM cast_info AS ci,\n     keyword AS k,\n\
    \     movie_keyword AS mk,\n     name AS n,\n     title AS t\nWHERE k.keyword
    IN ('superhero',\n                    'sequel',\n                    'second-part',\n\
    \                    'marvel-comics',\n                    'based-on-comic',\n\
    \                    'tv-special',\n                    'fight',\n           \
    \         'violence')\n  AND t.production_year > 2000\n  AND k.id = mk.keyword_id\n\
    \  AND t.id = mk.movie_id\n  AND t.id = ci.movie_id\n  AND ci.movie_id = mk.movie_id\n\
    \  AND n.id = ci.person_id"
  qep:
  - node: 'Aggregate: min(k.keyword), min(n.`name`), min(t.title) (cost=11.4e+6 rows=1)
      (actual time=18373..18373 rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=10.3e+6 rows=10.8e+6) (actual time=2.22..18145
      rows=785477 loops=1)
    actual_rows: 785477.0
    estimated_rows: 10800000.0
    q_error: 13.749606926746424
  - node: Nested loop inner join (cost=6.57e+6 rows=10.8e+6) (actual time=2.21..16492
      rows=785477 loops=1)
    actual_rows: 785477.0
    estimated_rows: 10800000.0
    q_error: 13.749606926746424
  - node: Nested loop inner join (cost=2.74e+6 rows=696772) (actual time=2.2..14489
      rows=14165 loops=1)
    actual_rows: 14165.0
    estimated_rows: 696772.0
    q_error: 49.18969290504765
  - node: Nested loop inner join (cost=1.88e+6 rows=2.09e+6) (actual time=2.18..14399
      rows=35548 loops=1)
    actual_rows: 35548.0
    estimated_rows: 2090000.0
    q_error: 58.793743670529985
  - node: Table scan on mk (cost=420275 rows=4.18e+6) (actual time=0.605..1066 rows=4.52e+6
      loops=1)
    actual_rows: 4520000.0
    estimated_rows: 4180000.0
    q_error: 1.0813397129186604
  - node: "Filter: (k.keyword in ('superhero','sequel','second-part','marvel-comics','based-on-comic','tv-special','fight','violence'))
      (cost=0.25 rows=0.5) (actual time=0.00285..0.00285 rows=0.00786 loops=4.52e+6)"
    actual_rows: 0.00786
    estimated_rows: 0.5
    q_error: 63.613231552162844
  - node: Single-row index lookup on k using PRIMARY (id=mk.keyword_id) (cost=0.25
      rows=1) (actual time=0.00252..0.00255 rows=1 loops=4.52e+6)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: 'Filter: (t.production_year > 2000) (cost=0.309 rows=0.333) (actual time=0.00231..0.00235
      rows=0.398 loops=35548)'
    actual_rows: 0.398
    estimated_rows: 0.333
    q_error: 1.1951951951951951
  - node: Single-row index lookup on t using PRIMARY (id=mk.movie_id) (cost=0.309
      rows=1) (actual time=0.00199..0.00202 rows=1 loops=35548)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on ci using movie_id_cast_info (movie_id=mk.movie_id) (cost=3.95
      rows=15.5) (actual time=0.0392..0.138 rows=55.5 loops=14165)
    actual_rows: 55.5
    estimated_rows: 15.5
    q_error: 3.5806451612903225
  - node: Single-row index lookup on n using PRIMARY (id=ci.person_id) (cost=0.25
      rows=1) (actual time=0.00193..0.00196 rows=1 loops=785477)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 7a\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(n.name) AS of_person,\n       MIN(t.title) AS biography_movie\nFROM
    aka_name AS an,\n     cast_info AS ci,\n     info_type AS it,\n     link_type
    AS lt,\n     movie_link AS ml,\n     name AS n,\n     person_info AS pi,\n   \
    \  title AS t\nWHERE an.name LIKE '%a%'\n  AND it.info ='mini biography'\n  AND
    lt.link ='features'\n  AND n.name_pcode_cf BETWEEN 'A' AND 'F'\n  AND (n.gender='m'\n\
    \       OR (n.gender = 'f'\n           AND n.name LIKE 'B%'))\n  AND pi.note ='Volker
    Boehm'\n  AND t.production_year BETWEEN 1980 AND 1995\n  AND n.id = an.person_id\n\
    \  AND n.id = pi.person_id\n  AND ci.person_id = n.id\n  AND t.id = ci.movie_id\n\
    \  AND ml.linked_movie_id = t.id\n  AND lt.id = ml.link_type_id\n  AND it.id =
    pi.info_type_id\n  AND pi.person_id = an.person_id\n  AND pi.person_id = ci.person_id\n\
    \  AND an.person_id = ci.person_id\n  AND ci.movie_id = ml.linked_movie_id"
  qep:
  - node: 'Aggregate: min(n.`name`), min(t.title) (cost=7164 rows=1) (actual time=4600..4600
      rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=7164 rows=2.4) (actual time=499..4600 rows=37
      loops=1)
    actual_rows: 37.0
    estimated_rows: 2.4
    q_error: 15.416666666666668
  - node: Nested loop inner join (cost=7155 rows=24) (actual time=499..4600 rows=37
      loops=1)
    actual_rows: 37.0
    estimated_rows: 24.0
    q_error: 1.5416666666666667
  - node: Nested loop inner join (cost=6891 rows=49) (actual time=86..2001 rows=20770
      loops=1)
    actual_rows: 20770.0
    estimated_rows: 49.0
    q_error: 423.8775510204082
  - node: Nested loop inner join (cost=6406 rows=293) (actual time=81.7..1154 rows=17559
      loops=1)
    actual_rows: 17559.0
    estimated_rows: 293.0
    q_error: 59.9283276450512
  - node: Nested loop inner join (cost=4352 rows=5869) (actual time=81.6..800 rows=105262
      loops=1)
    actual_rows: 105262.0
    estimated_rows: 5869.0
    q_error: 17.93525302436531
  - node: Nested loop inner join (cost=2266 rows=379) (actual time=81.6..252 rows=1467
      loops=1)
    actual_rows: 1467.0
    estimated_rows: 379.0
    q_error: 3.870712401055409
  - node: Nested loop inner join (cost=868 rows=3416) (actual time=81.6..205 rows=5186
      loops=1)
    actual_rows: 5186.0
    estimated_rows: 3416.0
    q_error: 1.5181498829039812
  - node: "Filter: (lt.link = 'features') (cost=2.8 rows=1.8) (actual time=8.62..8.62
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.8
    q_error: 1.8
  - node: Table scan on lt (cost=2.8 rows=18) (actual time=8.61..8.62 rows=18 loops=1)
    actual_rows: 18.0
    estimated_rows: 18.0
    q_error: 1.0
  - node: Index lookup on ml using link_type_id_movie_link (link_type_id=lt.id) (cost=396
      rows=1898) (actual time=73..196 rows=5186 loops=1)
    actual_rows: 5186.0
    estimated_rows: 1898.0
    q_error: 2.732349841938883
  - node: 'Filter: (t.production_year between 1980 and 1995) (cost=0.309 rows=0.111)
      (actual time=0.00881..0.00884 rows=0.283 loops=5186)'
    actual_rows: 0.283
    estimated_rows: 0.111
    q_error: 2.5495495495495493
  - node: Single-row index lookup on t using PRIMARY (id=ml.linked_movie_id) (cost=0.309
      rows=1) (actual time=0.00844..0.00846 rows=1 loops=5186)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on ci using movie_id_cast_info (movie_id=ml.linked_movie_id)
      (cost=3.95 rows=15.5) (actual time=0.122..0.37 rows=71.8 loops=1467)
    actual_rows: 71.8
    estimated_rows: 15.5
    q_error: 4.632258064516129
  - node: "Filter: ((n.name_pcode_cf between 'A' and 'F') and ((n.gender = 'm') or
      ((n.gender = 'f') and (n.`name` like 'B%')))) (cost=0.25 rows=0.05) (actual
      time=0.00324..0.00326 rows=0.167 loops=105262)"
    actual_rows: 0.167
    estimated_rows: 0.05
    q_error: 3.34
  - node: Single-row index lookup on n using PRIMARY (id=ci.person_id) (cost=0.25
      rows=1) (actual time=0.0029..0.00292 rows=1 loops=105262)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (an.`name` like '%a%') (cost=1.5 rows=0.167) (actual time=0.0398..0.0481
      rows=1.18 loops=17559)"
    actual_rows: 1.18
    estimated_rows: 0.167
    q_error: 7.065868263473053
  - node: Index lookup on an using person_id_aka_name (person_id=ci.person_id) (cost=1.5
      rows=1.5) (actual time=0.0381..0.0474 rows=1.56 loops=17559)
    actual_rows: 1.56
    estimated_rows: 1.5
    q_error: 1.04
  - node: "Filter: (pi.note = 'Volker Boehm') (cost=4.9 rows=0.49) (actual time=0.125..0.125
      rows=0.00178 loops=20770)"
    actual_rows: 0.00178
    estimated_rows: 0.49
    q_error: 275.2808988764045
  - node: Index lookup on pi using person_id_person_info (person_id=ci.person_id)
      (cost=4.9 rows=4.9) (actual time=0.0642..0.122 rows=39.5 loops=20770)
    actual_rows: 39.5
    estimated_rows: 4.9
    q_error: 8.061224489795919
  - node: "Filter: (it.info = 'mini biography') (cost=0.25 rows=0.1) (actual time=0.00134..0.00142
      rows=1 loops=37)"
    actual_rows: 1.0
    estimated_rows: 0.1
    q_error: 10.0
  - node: Single-row index lookup on it using PRIMARY (id=pi.info_type_id) (cost=0.25
      rows=1) (actual time=868e-6..897e-6 rows=1 loops=37)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 7b\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(n.name) AS of_person,\n       MIN(t.title) AS biography_movie\nFROM
    aka_name AS an,\n     cast_info AS ci,\n     info_type AS it,\n     link_type
    AS lt,\n     movie_link AS ml,\n     name AS n,\n     person_info AS pi,\n   \
    \  title AS t\nWHERE an.name LIKE '%a%'\n  AND it.info ='mini biography'\n  AND
    lt.link ='features'\n  AND n.name_pcode_cf LIKE 'D%'\n  AND n.gender='m'\n  AND
    pi.note ='Volker Boehm'\n  AND t.production_year BETWEEN 1980 AND 1984\n  AND
    n.id = an.person_id\n  AND n.id = pi.person_id\n  AND ci.person_id = n.id\n  AND
    t.id = ci.movie_id\n  AND ml.linked_movie_id = t.id\n  AND lt.id = ml.link_type_id\n\
    \  AND it.id = pi.info_type_id\n  AND pi.person_id = an.person_id\n  AND pi.person_id
    = ci.person_id\n  AND an.person_id = ci.person_id\n  AND ci.movie_id = ml.linked_movie_id"
  qep:
  - node: 'Aggregate: min(n.`name`), min(t.title) (cost=6709 rows=1) (actual time=271..271
      rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=6709 rows=2.4) (actual time=3.54..271 rows=16
      loops=1)
    actual_rows: 16.0
    estimated_rows: 2.4
    q_error: 6.666666666666667
  - node: Nested loop inner join (cost=6701 rows=24) (actual time=3.54..271 rows=16
      loops=1)
    actual_rows: 16.0
    estimated_rows: 24.0
    q_error: 1.5
  - node: Nested loop inner join (cost=6449 rows=49) (actual time=0.768..233 rows=1036
      loops=1)
    actual_rows: 1036.0
    estimated_rows: 49.0
    q_error: 21.142857142857142
  - node: Nested loop inner join (cost=6046 rows=293) (actual time=0.374..223 rows=1076
      loops=1)
    actual_rows: 1076.0
    estimated_rows: 293.0
    q_error: 3.6723549488054608
  - node: Nested loop inner join (cost=3991 rows=5869) (actual time=0.353..146 rows=33415
      loops=1)
    actual_rows: 33415.0
    estimated_rows: 5869.0
    q_error: 5.693474186403135
  - node: Nested loop inner join (cost=1906 rows=379) (actual time=0.302..54.2 rows=435
      loops=1)
    actual_rows: 435.0
    estimated_rows: 379.0
    q_error: 1.1477572559366755
  - node: Nested loop inner join (cost=509 rows=3416) (actual time=0.295..43.5 rows=5186
      loops=1)
    actual_rows: 5186.0
    estimated_rows: 3416.0
    q_error: 1.5181498829039812
  - node: "Filter: (lt.link = 'features') (cost=2.05 rows=1.8) (actual time=0.0339..0.0405
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.8
    q_error: 1.8
  - node: Table scan on lt (cost=2.05 rows=18) (actual time=0.0295..0.0364 rows=18
      loops=1)
    actual_rows: 18.0
    estimated_rows: 18.0
    q_error: 1.0
  - node: Index lookup on ml using link_type_id_movie_link (link_type_id=lt.id) (cost=197
      rows=1898) (actual time=0.26..43.3 rows=5186 loops=1)
    actual_rows: 5186.0
    estimated_rows: 1898.0
    q_error: 2.732349841938883
  - node: 'Filter: (t.production_year between 1980 and 1984) (cost=0.309 rows=0.111)
      (actual time=0.00197..0.00198 rows=0.0839 loops=5186)'
    actual_rows: 0.0839
    estimated_rows: 0.111
    q_error: 1.3230035756853398
  - node: Single-row index lookup on t using PRIMARY (id=ml.linked_movie_id) (cost=0.309
      rows=1) (actual time=0.00176..0.00178 rows=1 loops=5186)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on ci using movie_id_cast_info (movie_id=ml.linked_movie_id)
      (cost=3.95 rows=15.5) (actual time=0.0432..0.207 rows=76.8 loops=435)
    actual_rows: 76.8
    estimated_rows: 15.5
    q_error: 4.95483870967742
  - node: "Filter: ((n.gender = 'm') and (n.name_pcode_cf like 'D%')) (cost=0.25 rows=0.05)
      (actual time=0.00222..0.00222 rows=0.0322 loops=33415)"
    actual_rows: 0.0322
    estimated_rows: 0.05
    q_error: 1.5527950310559007
  - node: Single-row index lookup on n using PRIMARY (id=ci.person_id) (cost=0.25
      rows=1) (actual time=0.00192..0.00194 rows=1 loops=33415)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (an.`name` like '%a%') (cost=1.23 rows=0.167) (actual time=0.00703..0.00927
      rows=0.963 loops=1076)"
    actual_rows: 0.963
    estimated_rows: 0.167
    q_error: 5.766467065868263
  - node: Index lookup on an using person_id_aka_name (person_id=ci.person_id) (cost=1.23
      rows=1.5) (actual time=0.00577..0.00866 rows=1.52 loops=1076)
    actual_rows: 1.52
    estimated_rows: 1.5
    q_error: 1.0133333333333334
  - node: "Filter: (pi.note = 'Volker Boehm') (cost=4.64 rows=0.49) (actual time=0.036..0.0368
      rows=0.0154 loops=1036)"
    actual_rows: 0.0154
    estimated_rows: 0.49
    q_error: 31.818181818181817
  - node: Index lookup on pi using person_id_person_info (person_id=ci.person_id)
      (cost=4.64 rows=4.9) (actual time=0.00421..0.0346 rows=26.3 loops=1036)
    actual_rows: 26.3
    estimated_rows: 4.9
    q_error: 5.36734693877551
  - node: "Filter: (it.info = 'mini biography') (cost=0.25 rows=0.1) (actual time=994e-6..0.00107
      rows=1 loops=16)"
    actual_rows: 1.0
    estimated_rows: 0.1
    q_error: 10.0
  - node: Single-row index lookup on it using PRIMARY (id=pi.info_type_id) (cost=0.25
      rows=1) (actual time=662e-6..681e-6 rows=1 loops=16)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 7c\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(n.name) AS cast_member_name,\n       MIN(pi.info) AS cast_member_info\n
    FROM aka_name AS an,\n     cast_info AS ci,\n     info_type AS it,\n     link_type
    AS lt,\n     movie_link AS ml,\n     name AS n,\n     person_info AS pi,\n   \
    \  title AS t\nWHERE an.name IS NOT NULL\n  AND (an.name LIKE '%a%'\n       OR
    an.name LIKE 'A%')\n  AND it.info ='mini biography'\n  AND lt.link IN ('references',\n\
    \                  'referenced in',\n                  'features',\n         \
    \         'featured in')\n  AND n.name_pcode_cf BETWEEN 'A' AND 'F'\n  AND (n.gender='m'\n\
    \       OR (n.gender = 'f'\n           AND n.name LIKE 'A%'))\n  AND pi.note IS
    NOT NULL\n  AND t.production_year BETWEEN 1980 AND 2010\n  AND n.id = an.person_id\n\
    \  AND n.id = pi.person_id\n  AND ci.person_id = n.id\n  AND t.id = ci.movie_id\n\
    \  AND ml.linked_movie_id = t.id\n  AND lt.id = ml.link_type_id\n  AND it.id =
    pi.info_type_id\n  AND pi.person_id = an.person_id\n  AND pi.person_id = ci.person_id\n\
    \  AND an.person_id = ci.person_id\n  AND ci.movie_id = ml.linked_movie_id"
  qep:
  - node: 'Aggregate: min(n.`name`), min(pi.info) (cost=28278 rows=1) (actual time=20865..20865
      rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=28261 rows=163) (actual time=3.06..20789 rows=70896
      loops=1)
    actual_rows: 70896.0
    estimated_rows: 163.0
    q_error: 434.9447852760736
  - node: Nested loop inner join (cost=27690 rows=1633) (actual time=3.05..20726 rows=70896
      loops=1)
    actual_rows: 70896.0
    estimated_rows: 1633.0
    q_error: 43.41457440293937
  - node: Nested loop inner join (cost=25791 rows=370) (actual time=1.55..8866 rows=191957
      loops=1)
    actual_rows: 191957.0
    estimated_rows: 370.0
    q_error: 518.8027027027027
  - node: Nested loop inner join (cost=24176 rows=1174) (actual time=0.9..7597 rows=150775
      loops=1)
    actual_rows: 150775.0
    estimated_rows: 1174.0
    q_error: 128.42844974446336
  - node: Nested loop inner join (cost=15959 rows=23478) (actual time=0.778..5008
      rows=1.1e+6 loops=1)
    actual_rows: 1100000.0
    estimated_rows: 23478.0
    q_error: 46.85237243376778
  - node: Nested loop inner join (cost=7618 rows=1518) (actual time=0.721..149 rows=14194
      loops=1)
    actual_rows: 14194.0
    estimated_rows: 1518.0
    q_error: 9.350461133069828
  - node: Nested loop inner join (cost=2029 rows=13662) (actual time=0.707..44.2 rows=21505
      loops=1)
    actual_rows: 21505.0
    estimated_rows: 13662.0
    q_error: 1.5740740740740742
  - node: "Filter: (lt.link in ('references','referenced in','features','featured
      in')) (cost=2.05 rows=7.2) (actual time=0.021..0.0438 rows=4 loops=1)"
    actual_rows: 4.0
    estimated_rows: 7.2
    q_error: 1.8
  - node: Table scan on lt (cost=2.05 rows=18) (actual time=0.0178..0.0332 rows=18
      loops=1)
    actual_rows: 18.0
    estimated_rows: 18.0
    q_error: 1.0
  - node: Index lookup on ml using link_type_id_movie_link (link_type_id=lt.id) (cost=118
      rows=1898) (actual time=0.617..10.7 rows=5376 loops=4)
    actual_rows: 5376.0
    estimated_rows: 1898.0
    q_error: 2.83245521601686
  - node: 'Filter: (t.production_year between 1980 and 2010) (cost=0.309 rows=0.111)
      (actual time=0.00463..0.00469 rows=0.66 loops=21505)'
    actual_rows: 0.66
    estimated_rows: 0.111
    q_error: 5.9459459459459465
  - node: Single-row index lookup on t using PRIMARY (id=ml.linked_movie_id) (cost=0.309
      rows=1) (actual time=0.00424..0.00426 rows=1 loops=21505)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on ci using movie_id_cast_info (movie_id=ml.linked_movie_id)
      (cost=3.95 rows=15.5) (actual time=0.125..0.338 rows=77.3 loops=14194)
    actual_rows: 77.3
    estimated_rows: 15.5
    q_error: 4.987096774193549
  - node: "Filter: ((n.name_pcode_cf between 'A' and 'F') and ((n.gender = 'm') or
      ((n.gender = 'f') and (n.`name` like 'A%')))) (cost=0.25 rows=0.05) (actual
      time=0.00225..0.00226 rows=0.137 loops=1.1e+6)"
    actual_rows: 0.137
    estimated_rows: 0.05
    q_error: 2.74
  - node: Single-row index lookup on n using PRIMARY (id=ci.person_id) (cost=0.25
      rows=1) (actual time=0.00195..0.00197 rows=1 loops=1.1e+6)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: ((an.`name` like '%a%') or (an.`name` like 'A%')) (cost=1.23 rows=0.315)
      (actual time=0.0059..0.00823 rows=1.27 loops=150775)"
    actual_rows: 1.27
    estimated_rows: 0.315
    q_error: 4.031746031746032
  - node: Index lookup on an using person_id_aka_name (person_id=ci.person_id) (cost=1.23
      rows=1.5) (actual time=0.00524..0.0076 rows=1.65 loops=150775)
    actual_rows: 1.65
    estimated_rows: 1.5
    q_error: 1.0999999999999999
  - node: 'Filter: (pi.note is not null) (cost=4.64 rows=4.41) (actual time=0.0376..0.0616
      rows=0.369 loops=191957)'
    actual_rows: 0.369
    estimated_rows: 4.41
    q_error: 11.951219512195122
  - node: Index lookup on pi using person_id_person_info (person_id=ci.person_id)
      (cost=4.64 rows=4.9) (actual time=0.0113..0.0593 rows=42.2 loops=191957)
    actual_rows: 42.2
    estimated_rows: 4.9
    q_error: 8.612244897959183
  - node: "Filter: (it.info = 'mini biography') (cost=0.25 rows=0.1) (actual time=610e-6..686e-6
      rows=1 loops=70896)"
    actual_rows: 1.0
    estimated_rows: 0.1
    q_error: 10.0
  - node: Single-row index lookup on it using PRIMARY (id=pi.info_type_id) (cost=0.25
      rows=1) (actual time=214e-6..239e-6 rows=1 loops=70896)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 8a\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(an1.name) AS actress_pseudonym,\n       MIN(t.title) AS japanese_movie_dubbed\n
    FROM aka_name AS an1,\n     cast_info AS ci,\n     company_name AS cn,\n     movie_companies
    AS mc,\n     name AS n1,\n     role_type AS rt,\n     title AS t\nWHERE ci.note
    ='(voice: English version)'\n  AND cn.country_code ='[jp]'\n  AND mc.note LIKE
    '%(Japan)%'\n  AND mc.note NOT LIKE '%(USA)%'\n  AND n1.name LIKE '%Yo%'\n  AND
    n1.name NOT LIKE '%Yu%'\n  AND rt.role ='actress'\n  AND an1.person_id = n1.id\n\
    \  AND n1.id = ci.person_id\n  AND ci.movie_id = t.id\n  AND t.id = mc.movie_id\n\
    \  AND mc.company_id = cn.id\n  AND ci.role_id = rt.id\n  AND an1.person_id =
    ci.person_id\n  AND ci.movie_id = mc.movie_id"
  qep:
  - node: 'Aggregate: min(an1.`name`), min(t.title) (cost=2572 rows=1) (actual time=21295..21295
      rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=2572 rows=2.76) (actual time=5642..21295 rows=104
      loops=1)
    actual_rows: 104.0
    estimated_rows: 2.76
    q_error: 37.68115942028986
  - node: Nested loop inner join (cost=2570 rows=1.84) (actual time=2619..21288 rows=71
      loops=1)
    actual_rows: 71.0
    estimated_rows: 1.84
    q_error: 38.586956521739125
  - node: Nested loop inner join (cost=2563 rows=18.4) (actual time=2619..21288 rows=72
      loops=1)
    actual_rows: 72.0
    estimated_rows: 18.4
    q_error: 3.91304347826087
  - node: Nested loop inner join (cost=2498 rows=57.3) (actual time=2619..21286 rows=429
      loops=1)
    actual_rows: 429.0
    estimated_rows: 57.3
    q_error: 7.486910994764398
  - node: Nested loop inner join (cost=2295 rows=580) (actual time=14.9..21245 rows=34857
      loops=1)
    actual_rows: 34857.0
    estimated_rows: 580.0
    q_error: 60.09827586206897
  - node: Nested loop inner join (cost=2058 rows=580) (actual time=14.9..21154 rows=34857
      loops=1)
    actual_rows: 34857.0
    estimated_rows: 580.0
    q_error: 60.09827586206897
  - node: "Filter: (rt.`role` = 'actress') (cost=2.2 rows=1.2) (actual time=4.34..4.35
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.2
    q_error: 1.2
  - node: Table scan on rt (cost=2.2 rows=12) (actual time=4.34..4.35 rows=12 loops=1)
    actual_rows: 12.0
    estimated_rows: 12.0
    q_error: 1.0
  - node: "Filter: (ci.note = '(voice: English version)') (cost=1269 rows=484) (actual
      time=10.5..21147 rows=34857 loops=1)"
    actual_rows: 34857.0
    estimated_rows: 484.0
    q_error: 72.01859504132231
  - node: Index lookup on ci using role_id_cast_info (role_id=rt.id) (cost=1269 rows=4836)
      (actual time=0.125..20604 rows=7.45e+6 loops=1)
    actual_rows: 7450000.0
    estimated_rows: 4836.0
    q_error: 1540.5293631100083
  - node: Single-row index lookup on t using PRIMARY (id=ci.movie_id) (cost=0.309
      rows=1) (actual time=0.00239..0.00241 rows=1 loops=34857)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: ((n1.`name` like '%Yo%') and (not((n1.`name` like '%Yu%')))) (cost=0.25
      rows=0.0988) (actual time=0.00101..0.00101 rows=0.0123 loops=34857)"
    actual_rows: 0.0123
    estimated_rows: 0.0988
    q_error: 8.032520325203253
  - node: Single-row index lookup on n1 using PRIMARY (id=ci.person_id) (cost=0.25
      rows=1) (actual time=492e-6..518e-6 rows=1 loops=34857)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: ((mc.note like '%(Japan)%') and (not((mc.note like '%(USA)%'))))
      (cost=0.811 rows=0.32) (actual time=0.00467..0.00564 rows=0.168 loops=429)"
    actual_rows: 0.168
    estimated_rows: 0.32
    q_error: 1.9047619047619047
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=ci.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00323..0.00521 rows=1.59 loops=429)
    actual_rows: 1.59
    estimated_rows: 3.24
    q_error: 2.0377358490566038
  - node: "Filter: (cn.country_code = '[jp]') (cost=0.271 rows=0.1) (actual time=0.00284..0.00291
      rows=0.986 loops=72)"
    actual_rows: 0.986
    estimated_rows: 0.1
    q_error: 9.86
  - node: Single-row index lookup on cn using PRIMARY (id=mc.company_id) (cost=0.271
      rows=1) (actual time=0.00255..0.00258 rows=1 loops=72)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on an1 using person_id_aka_name (person_id=ci.person_id) (cost=1.27
      rows=1.5) (actual time=0.0807..0.0936 rows=1.46 loops=71)
    actual_rows: 1.46
    estimated_rows: 1.5
    q_error: 1.0273972602739727

- query: "-- JOB Query 8b\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(an.name) AS acress_pseudonym,\n       MIN(t.title) AS japanese_anime_movie\n
    FROM aka_name AS an,\n     cast_info AS ci,\n     company_name AS cn,\n     movie_companies
    AS mc,\n     name AS n,\n     role_type AS rt,\n     title AS t\nWHERE ci.note
    ='(voice: English version)'\n  AND cn.country_code ='[jp]'\n  AND mc.note LIKE
    '%(Japan)%'\n  AND mc.note NOT LIKE '%(USA)%'\n  AND (mc.note LIKE '%(2006)%'\n\
    \       OR mc.note LIKE '%(2007)%')\n  AND n.name LIKE '%Yo%'\n  AND n.name NOT
    LIKE '%Yu%'\n  AND rt.role ='actress'\n  AND t.production_year BETWEEN 2006 AND
    2007\n  AND (t.title LIKE 'One Piece%'\n       OR t.title LIKE 'Dragon Ball Z%')\n\
    \  AND an.person_id = n.id\n  AND n.id = ci.person_id\n  AND ci.movie_id = t.id\n\
    \  AND t.id = mc.movie_id\n  AND mc.company_id = cn.id\n  AND ci.role_id = rt.id\n\
    \  AND an.person_id = ci.person_id\n  AND ci.movie_id = mc.movie_id"
  qep:
  - node: 'Aggregate: min(an.`name`), min(t.title) (cost=2283 rows=1) (actual time=17994..17994
      rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=2283 rows=0.0289) (actual time=17794..17994
      rows=6 loops=1)
    actual_rows: 6.0
    estimated_rows: 0.0289
    q_error: 207.61245674740485
  - node: Nested loop inner join (cost=2283 rows=0.0193) (actual time=17794..17994
      rows=4 loops=1)
    actual_rows: 4.0
    estimated_rows: 0.0193
    q_error: 207.2538860103627
  - node: Nested loop inner join (cost=2283 rows=0.193) (actual time=17794..17993
      rows=4 loops=1)
    actual_rows: 4.0
    estimated_rows: 0.193
    q_error: 20.72538860103627
  - node: Nested loop inner join (cost=2280 rows=2.87) (actual time=17794..17993 rows=7
      loops=1)
    actual_rows: 7.0
    estimated_rows: 2.87
    q_error: 2.4390243902439024
  - node: Nested loop inner join (cost=2270 rows=29) (actual time=484..17993 rows=56
      loops=1)
    actual_rows: 56.0
    estimated_rows: 29.0
    q_error: 1.9310344827586208
  - node: Nested loop inner join (cost=2033 rows=580) (actual time=9.34..17915 rows=34857
      loops=1)
    actual_rows: 34857.0
    estimated_rows: 580.0
    q_error: 60.09827586206897
  - node: "Filter: (rt.`role` = 'actress') (cost=1.45 rows=1.2) (actual time=0.0199..0.0279
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.2
    q_error: 1.2
  - node: Table scan on rt (cost=1.45 rows=12) (actual time=0.0174..0.0241 rows=12
      loops=1)
    actual_rows: 12.0
    estimated_rows: 12.0
    q_error: 1.0
  - node: "Filter: (ci.note = '(voice: English version)') (cost=1249 rows=484) (actual
      time=9.32..17913 rows=34857 loops=1)"
    actual_rows: 34857.0
    estimated_rows: 484.0
    q_error: 72.01859504132231
  - node: Index lookup on ci using role_id_cast_info (role_id=rt.id) (cost=1249 rows=4836)
      (actual time=0.0219..17389 rows=7.45e+6 loops=1)
    actual_rows: 7450000.0
    estimated_rows: 4836.0
    q_error: 1540.5293631100083
  - node: "Filter: ((t.production_year between 2006 and 2007) and ((t.title like 'One
      Piece%') or (t.title like 'Dragon Ball Z%'))) (cost=0.308 rows=0.05) (actual
      time=0.0021..0.0021 rows=0.00161 loops=34857)"
    actual_rows: 0.00161
    estimated_rows: 0.05
    q_error: 31.055900621118013
  - node: Single-row index lookup on t using PRIMARY (id=ci.movie_id) (cost=0.308
      rows=1) (actual time=0.00172..0.00174 rows=1 loops=34857)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: ((n.`name` like '%Yo%') and (not((n.`name` like '%Yu%')))) (cost=0.25
      rows=0.0988) (actual time=0.00329..0.00331 rows=0.125 loops=56)"
    actual_rows: 0.125
    estimated_rows: 0.0988
    q_error: 1.2651821862348178
  - node: Single-row index lookup on n using PRIMARY (id=ci.person_id) (cost=0.25
      rows=1) (actual time=0.00259..0.00263 rows=1 loops=56)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: ((mc.note like '%(Japan)%') and (not((mc.note like '%(USA)%')))
      and ((mc.note like '%(2006)%') or (mc.note like '%(2007)%'))) (cost=0.813 rows=0.0672)
      (actual time=0.0335..0.0376 rows=0.571 loops=7)"
    actual_rows: 0.571
    estimated_rows: 0.0672
    q_error: 8.49702380952381
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=ci.movie_id)
      (cost=0.813 rows=3.24) (actual time=0.0273..0.0342 rows=2.86 loops=7)
    actual_rows: 2.86
    estimated_rows: 3.24
    q_error: 1.132867132867133
  - node: "Filter: (cn.country_code = '[jp]') (cost=0.323 rows=0.1) (actual time=0.0053..0.00552
      rows=1 loops=4)"
    actual_rows: 1.0
    estimated_rows: 0.1
    q_error: 10.0
  - node: Single-row index lookup on cn using PRIMARY (id=mc.company_id) (cost=0.323
      rows=1) (actual time=0.00445..0.00455 rows=1 loops=4)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on an using person_id_aka_name (person_id=ci.person_id) (cost=8.98
      rows=1.5) (actual time=0.013..0.0159 rows=1.5 loops=4)
    actual_rows: 1.5
    estimated_rows: 1.5
    q_error: 1.0

- query: "-- JOB Query 8c\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(a1.name) AS writer_pseudo_name,\n       MIN(t.title) AS movie_title\n
    FROM aka_name AS a1,\n     cast_info AS ci,\n     company_name AS cn,\n     movie_companies
    AS mc,\n     name AS n1,\n     role_type AS rt,\n     title AS t\nWHERE cn.country_code
    ='[us]'\n  AND rt.role ='writer'\n  AND a1.person_id = n1.id\n  AND n1.id = ci.person_id\n\
    \  AND ci.movie_id = t.id\n  AND t.id = mc.movie_id\n  AND mc.company_id = cn.id\n\
    \  AND ci.role_id = rt.id\n  AND a1.person_id = ci.person_id\n  AND ci.movie_id
    = mc.movie_id"
  qep:
  - node: 'Aggregate: min(a1.`name`), min(t.title) (cost=19098 rows=1) (actual time=38538..38538
      rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=18815 rows=2828) (actual time=1.61..38009 rows=2.49e+6
      loops=1)
    actual_rows: 2490000.0
    estimated_rows: 2828.0
    q_error: 880.4809052333804
  - node: Nested loop inner join (cost=16304 rows=1882) (actual time=1.6..30155 rows=1.97e+6
      loops=1)
    actual_rows: 1970000.0
    estimated_rows: 1882.0
    q_error: 1046.7587672688628
  - node: Nested loop inner join (cost=15971 rows=1882) (actual time=1.59..29300 rows=1.97e+6
      loops=1)
    actual_rows: 1970000.0
    estimated_rows: 1882.0
    q_error: 1046.7587672688628
  - node: Nested loop inner join (cost=15604 rows=1882) (actual time=1.59..27327 rows=1.97e+6
      loops=1)
    actual_rows: 1970000.0
    estimated_rows: 1882.0
    q_error: 1046.7587672688628
  - node: Nested loop inner join (cost=8621 rows=18824) (actual time=1.58..21910 rows=4.45e+6
      loops=1)
    actual_rows: 4450000.0
    estimated_rows: 18824.0
    q_error: 236.4003399915002
  - node: Nested loop inner join (cost=2033 rows=5804) (actual time=1.54..8765 rows=2.73e+6
      loops=1)
    actual_rows: 2730000.0
    estimated_rows: 5804.0
    q_error: 470.36526533425223
  - node: "Filter: (rt.`role` = 'writer') (cost=1.45 rows=1.2) (actual time=0.0202..0.0283
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.2
    q_error: 1.2
  - node: Table scan on rt (cost=1.45 rows=12) (actual time=0.0169..0.0253 rows=12
      loops=1)
    actual_rows: 12.0
    estimated_rows: 12.0
    q_error: 1.0
  - node: Index lookup on ci using role_id_cast_info (role_id=rt.id) (cost=1612 rows=4836)
      (actual time=1.52..8633 rows=2.73e+6 loops=1)
    actual_rows: 2730000.0
    estimated_rows: 4836.0
    q_error: 564.516129032258
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=ci.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00386..0.00465 rows=1.63 loops=2.73e+6)
    actual_rows: 1.63
    estimated_rows: 3.24
    q_error: 1.9877300613496935
  - node: "Filter: (cn.country_code = '[us]') (cost=0.271 rows=0.1) (actual time=0.00108..0.00111
      rows=0.443 loops=4.45e+6)"
    actual_rows: 0.443
    estimated_rows: 0.1
    q_error: 4.43
  - node: Single-row index lookup on cn using PRIMARY (id=mc.company_id) (cost=0.271
      rows=1) (actual time=868e-6..890e-6 rows=1 loops=4.45e+6)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Single-row index lookup on t using PRIMARY (id=ci.movie_id) (cost=0.0951
      rows=1) (actual time=835e-6..857e-6 rows=1 loops=1.97e+6)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Single-row covering index lookup on n1 using PRIMARY (id=ci.person_id) (cost=0.0771
      rows=1) (actual time=266e-6..288e-6 rows=1 loops=1.97e+6)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on a1 using person_id_aka_name (person_id=ci.person_id) (cost=1.18
      rows=1.5) (actual time=0.00272..0.00378 rows=1.26 loops=1.97e+6)
    actual_rows: 1.26
    estimated_rows: 1.5
    q_error: 1.1904761904761905

- query: "-- JOB Query 8d\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(an1.name) AS costume_designer_pseudo,\n       MIN(t.title) AS movie_with_costumes\n
    FROM aka_name AS an1,\n     cast_info AS ci,\n     company_name AS cn,\n     movie_companies
    AS mc,\n     name AS n1,\n     role_type AS rt,\n     title AS t\nWHERE cn.country_code
    ='[us]'\n  AND rt.role ='costume designer'\n  AND an1.person_id = n1.id\n  AND
    n1.id = ci.person_id\n  AND ci.movie_id = t.id\n  AND t.id = mc.movie_id\n  AND
    mc.company_id = cn.id\n  AND ci.role_id = rt.id\n  AND an1.person_id = ci.person_id\n\
    \  AND ci.movie_id = mc.movie_id"
  qep:
  - node: 'Aggregate: min(an1.`name`), min(t.title) (cost=23689 rows=1) (actual time=3685..3685
      rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=23406 rows=2828) (actual time=1.4..3627 rows=323005
      loops=1)
    actual_rows: 323005.0
    estimated_rows: 2828.0
    q_error: 114.21676096181046
  - node: Nested loop inner join (cost=22978 rows=2828) (actual time=1.39..3539 rows=323005
      loops=1)
    actual_rows: 323005.0
    estimated_rows: 2828.0
    q_error: 114.21676096181046
  - node: Nested loop inner join (cost=22516 rows=2828) (actual time=1.39..3383 rows=323005
      loops=1)
    actual_rows: 323005.0
    estimated_rows: 2828.0
    q_error: 114.21676096181046
  - node: Nested loop inner join (cost=14982 rows=28280) (actual time=1.38..2603 rows=752819
      loops=1)
    actual_rows: 752819.0
    estimated_rows: 28280.0
    q_error: 26.620190947666195
  - node: Nested loop inner join (cost=5084 rows=8719) (actual time=1.36..1381 rows=218966
      loops=1)
    actual_rows: 218966.0
    estimated_rows: 8719.0
    q_error: 25.113659823374242
  - node: Nested loop inner join (cost=2033 rows=5804) (actual time=1.1..647 rows=276403
      loops=1)
    actual_rows: 276403.0
    estimated_rows: 5804.0
    q_error: 47.62284631288767
  - node: "Filter: (rt.`role` = 'costume designer') (cost=1.45 rows=1.2) (actual time=0.0284..0.0334
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.2
    q_error: 1.2
  - node: Table scan on rt (cost=1.45 rows=12) (actual time=0.0243..0.0299 rows=12
      loops=1)
    actual_rows: 12.0
    estimated_rows: 12.0
    q_error: 1.0
  - node: Index lookup on ci using role_id_cast_info (role_id=rt.id) (cost=1612 rows=4836)
      (actual time=1.07..634 rows=276403 loops=1)
    actual_rows: 276403.0
    estimated_rows: 4836.0
    q_error: 57.15529363110008
  - node: Index lookup on an1 using person_id_aka_name (person_id=ci.person_id) (cost=0.376
      rows=1.5) (actual time=0.00195..0.00255 rows=0.792 loops=276403)
    actual_rows: 0.792
    estimated_rows: 1.5
    q_error: 1.8939393939393938
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=ci.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00363..0.00534 rows=3.44 loops=218966)
    actual_rows: 3.44
    estimated_rows: 3.24
    q_error: 1.0617283950617282
  - node: "Filter: (cn.country_code = '[us]') (cost=0.166 rows=0.1) (actual time=913e-6..939e-6
      rows=0.429 loops=752819)"
    actual_rows: 0.429
    estimated_rows: 0.1
    q_error: 4.29
  - node: Single-row index lookup on cn using PRIMARY (id=mc.company_id) (cost=0.166
      rows=1) (actual time=736e-6..756e-6 rows=1 loops=752819)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Single-row index lookup on t using PRIMARY (id=ci.movie_id) (cost=0.0633
      rows=1) (actual time=336e-6..356e-6 rows=1 loops=323005)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Single-row covering index lookup on n1 using PRIMARY (id=ci.person_id) (cost=0.0513
      rows=1) (actual time=121e-6..141e-6 rows=1 loops=323005)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 9a\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(an.name) AS alternative_name,\n       MIN(chn.name) AS character_name,\n\
    \       MIN(t.title) AS movie\nFROM aka_name AS an,\n     char_name AS chn,\n\
    \     cast_info AS ci,\n     company_name AS cn,\n     movie_companies AS mc,\n\
    \     name AS n,\n     role_type AS rt,\n     title AS t\nWHERE ci.note IN ('(voice)',\n\
    \                  '(voice: Japanese version)',\n                  '(voice) (uncredited)',\n\
    \                  '(voice: English version)')\n  AND cn.country_code ='[us]'\n\
    \  AND mc.note IS NOT NULL\n  AND (mc.note LIKE '%(USA)%'\n       OR mc.note LIKE
    '%(worldwide)%')\n  AND n.gender ='f'\n  AND n.name LIKE '%Ang%'\n  AND rt.role
    ='actress'\n  AND t.production_year BETWEEN 2005 AND 2015\n  AND ci.movie_id =
    t.id\n  AND t.id = mc.movie_id\n  AND ci.movie_id = mc.movie_id\n  AND mc.company_id
    = cn.id\n  AND ci.role_id = rt.id\n  AND n.id = ci.person_id\n  AND chn.id = ci.person_role_id\n\
    \  AND an.person_id = n.id\n  AND an.person_id = ci.person_id"
  qep:
  - node: 'Aggregate: min(an.`name`), min(chn.`name`), min(t.title) (cost=3352 rows=1)
      (actual time=19112..19112 rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=3352 rows=1.19) (actual time=427..19112 rows=151
      loops=1)
    actual_rows: 151.0
    estimated_rows: 1.19
    q_error: 126.89075630252101
  - node: Nested loop inner join (cost=3352 rows=0.79) (actual time=427..19111 rows=166
      loops=1)
    actual_rows: 166.0
    estimated_rows: 0.79
    q_error: 210.126582278481
  - node: Nested loop inner join (cost=3346 rows=15.8) (actual time=7.28..19058 rows=28401
      loops=1)
    actual_rows: 28401.0
    estimated_rows: 15.8
    q_error: 1797.5316455696202
  - node: Nested loop inner join (cost=3329 rows=15.8) (actual time=3.01..17669 rows=28401
      loops=1)
    actual_rows: 28401.0
    estimated_rows: 15.8
    q_error: 1797.5316455696202
  - node: Nested loop inner join (cost=3273 rows=158) (actual time=3..17614 rows=30744
      loops=1)
    actual_rows: 30744.0
    estimated_rows: 158.0
    q_error: 194.58227848101265
  - node: Nested loop inner join (cost=2981 rows=258) (actual time=2.98..16975 rows=112011
      loops=1)
    actual_rows: 112011.0
    estimated_rows: 258.0
    q_error: 434.1511627906977
  - node: Nested loop inner join (cost=2033 rows=2321) (actual time=1.41..16350 rows=255750
      loops=1)
    actual_rows: 255750.0
    estimated_rows: 2321.0
    q_error: 110.18957345971565
  - node: "Filter: (rt.`role` = 'actress') (cost=1.45 rows=1.2) (actual time=0.0096..0.0183
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.2
    q_error: 1.2
  - node: Table scan on rt (cost=1.45 rows=12) (actual time=0.0082..0.0161 rows=12
      loops=1)
    actual_rows: 12.0
    estimated_rows: 12.0
    q_error: 1.0
  - node: "Filter: ((ci.note in ('(voice)','(voice: Japanese version)','(voice) (uncredited)','(voice:
      English version)')) and (ci.person_role_id is not null)) (cost=1370 rows=1935)
      (actual time=1.4..16337 rows=255750 loops=1)"
    actual_rows: 255750.0
    estimated_rows: 1935.0
    q_error: 132.1705426356589
  - node: Index lookup on ci using role_id_cast_info (role_id=rt.id) (cost=1370 rows=4836)
      (actual time=0.0173..15668 rows=7.45e+6 loops=1)
    actual_rows: 7450000.0
    estimated_rows: 4836.0
    q_error: 1540.5293631100083
  - node: 'Filter: (t.production_year between 2005 and 2015) (cost=0.308 rows=0.111)
      (actual time=0.00229..0.00233 rows=0.438 loops=255750)'
    actual_rows: 0.438
    estimated_rows: 0.111
    q_error: 3.945945945945946
  - node: Single-row index lookup on t using PRIMARY (id=ci.movie_id) (cost=0.308
      rows=1) (actual time=0.00211..0.00213 rows=1 loops=255750)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: ((mc.note is not null) and ((mc.note like '%(USA)%') or (mc.note
      like '%(worldwide)%'))) (cost=0.811 rows=0.613) (actual time=0.00406..0.00557
      rows=0.274 loops=112011)"
    actual_rows: 0.274
    estimated_rows: 0.613
    q_error: 2.2372262773722627
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=ci.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00286..0.00483 rows=1.76 loops=112011)
    actual_rows: 1.76
    estimated_rows: 3.24
    q_error: 1.840909090909091
  - node: "Filter: (cn.country_code = '[us]') (cost=0.25 rows=0.1) (actual time=0.00158..0.00164
      rows=0.924 loops=30744)"
    actual_rows: 0.924
    estimated_rows: 0.1
    q_error: 9.24
  - node: Single-row index lookup on cn using PRIMARY (id=mc.company_id) (cost=0.25
      rows=1) (actual time=0.00134..0.00136 rows=1 loops=30744)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Single-row index lookup on chn using PRIMARY (id=ci.person_role_id) (cost=1.01
      rows=1) (actual time=0.0487..0.0487 rows=1 loops=28401)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: ((n.gender = 'f') and (n.`name` like '%Ang%')) (cost=0.25 rows=0.05)
      (actual time=0.00169..0.00169 rows=0.00584 loops=28401)"
    actual_rows: 0.00584
    estimated_rows: 0.05
    q_error: 8.561643835616438
  - node: Single-row index lookup on n using PRIMARY (id=ci.person_id) (cost=0.25
      rows=1) (actual time=985e-6..0.00101 rows=1 loops=28401)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on an using person_id_aka_name (person_id=ci.person_id) (cost=0.566
      rows=1.5) (actual time=0.00544..0.00634 rows=0.91 loops=166)
    actual_rows: 0.91
    estimated_rows: 1.5
    q_error: 1.6483516483516483

- query: "-- JOB Query 9b\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(an.name) AS alternative_name,\n       MIN(chn.name) AS voiced_character,\n\
    \       MIN(n.name) AS voicing_actress,\n       MIN(t.title) AS american_movie\n
    FROM aka_name AS an,\n     char_name AS chn,\n     cast_info AS ci,\n     company_name
    AS cn,\n     movie_companies AS mc,\n     name AS n,\n     role_type AS rt,\n\
    \     title AS t\nWHERE ci.note = '(voice)'\n  AND cn.country_code ='[us]'\n \
    \ AND mc.note LIKE '%(200%)%'\n  AND (mc.note LIKE '%(USA)%'\n       OR mc.note
    LIKE '%(worldwide)%')\n  AND n.gender ='f'\n  AND n.name LIKE '%Angel%'\n  AND
    rt.role ='actress'\n  AND t.production_year BETWEEN 2007 AND 2010\n  AND ci.movie_id
    = t.id\n  AND t.id = mc.movie_id\n  AND ci.movie_id = mc.movie_id\n  AND mc.company_id
    = cn.id\n  AND ci.role_id = rt.id\n  AND n.id = ci.person_id\n  AND chn.id = ci.person_role_id\n\
    \  AND an.person_id = n.id\n  AND an.person_id = ci.person_id"
  qep:
  - node: 'Aggregate: min(an.`name`), min(chn.`name`), min(n.`name`), min(t.title)
      (cost=2342 rows=1) (actual time=16617..16617 rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=2342 rows=0.0366) (actual time=1048..16617
      rows=42 loops=1)
    actual_rows: 42.0
    estimated_rows: 0.0366
    q_error: 1147.5409836065573
  - node: Nested loop inner join (cost=2342 rows=0.0244) (actual time=446..16616 rows=32
      loops=1)
    actual_rows: 32.0
    estimated_rows: 0.0244
    q_error: 1311.4754098360654
  - node: Nested loop inner join (cost=2342 rows=0.488) (actual time=3.01..16605 rows=6893
      loops=1)
    actual_rows: 6893.0
    estimated_rows: 0.488
    q_error: 14125.0
  - node: Nested loop inner join (cost=2342 rows=0.488) (actual time=2.99..16580 rows=6893
      loops=1)
    actual_rows: 6893.0
    estimated_rows: 0.488
    q_error: 14125.0
  - node: Nested loop inner join (cost=2340 rows=4.88) (actual time=2.98..16563 rows=7497
      loops=1)
    actual_rows: 7497.0
    estimated_rows: 4.88
    q_error: 1536.2704918032787
  - node: Nested loop inner join (cost=2267 rows=64.5) (actual time=2.96..16286 rows=46674
      loops=1)
    actual_rows: 46674.0
    estimated_rows: 64.5
    q_error: 723.6279069767442
  - node: Nested loop inner join (cost=2033 rows=580) (actual time=1.72..15940 rows=203241
      loops=1)
    actual_rows: 203241.0
    estimated_rows: 580.0
    q_error: 350.4155172413793
  - node: "Filter: (rt.`role` = 'actress') (cost=1.45 rows=1.2) (actual time=0.0331..0.0499
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.2
    q_error: 1.2
  - node: Table scan on rt (cost=1.45 rows=12) (actual time=0.0287..0.0429 rows=12
      loops=1)
    actual_rows: 12.0
    estimated_rows: 12.0
    q_error: 1.0
  - node: "Filter: ((ci.note = '(voice)') and (ci.person_role_id is not null)) (cost=1249
      rows=484) (actual time=1.68..15930 rows=203241 loops=1)"
    actual_rows: 203241.0
    estimated_rows: 484.0
    q_error: 419.9194214876033
  - node: Index lookup on ci using role_id_cast_info (role_id=rt.id) (cost=1249 rows=4836)
      (actual time=0.0372..15405 rows=7.45e+6 loops=1)
    actual_rows: 7450000.0
    estimated_rows: 4836.0
    q_error: 1540.5293631100083
  - node: 'Filter: (t.production_year between 2007 and 2010) (cost=0.303 rows=0.111)
      (actual time=0.00158..0.00159 rows=0.23 loops=203241)'
    actual_rows: 0.23
    estimated_rows: 0.111
    q_error: 2.0720720720720722
  - node: Single-row index lookup on t using PRIMARY (id=ci.movie_id) (cost=0.303
      rows=1) (actual time=0.00139..0.00141 rows=1 loops=203241)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: ((mc.note like '%(200%)%') and ((mc.note like '%(USA)%') or (mc.note
      like '%(worldwide)%'))) (cost=0.811 rows=0.0756) (actual time=0.00475..0.00582
      rows=0.161 loops=46674)"
    actual_rows: 0.161
    estimated_rows: 0.0756
    q_error: 2.1296296296296298
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=ci.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00301..0.00505 rows=1.69 loops=46674)
    actual_rows: 1.69
    estimated_rows: 3.24
    q_error: 1.9171597633136097
  - node: "Filter: (cn.country_code = '[us]') (cost=0.252 rows=0.1) (actual time=0.00196..0.00203
      rows=0.919 loops=7497)"
    actual_rows: 0.919
    estimated_rows: 0.1
    q_error: 9.19
  - node: Single-row index lookup on cn using PRIMARY (id=mc.company_id) (cost=0.252
      rows=1) (actual time=0.00168..0.0017 rows=1 loops=7497)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Single-row index lookup on chn using PRIMARY (id=ci.person_role_id) (cost=1.04
      rows=1) (actual time=0.00343..0.00346 rows=1 loops=6893)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: ((n.gender = 'f') and (n.`name` like '%Angel%')) (cost=0.26 rows=0.05)
      (actual time=0.00152..0.00152 rows=0.00464 loops=6893)"
    actual_rows: 0.00464
    estimated_rows: 0.05
    q_error: 10.775862068965518
  - node: Single-row index lookup on n using PRIMARY (id=ci.person_id) (cost=0.26
      rows=1) (actual time=958e-6..983e-6 rows=1 loops=6893)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on an using person_id_aka_name (person_id=ci.person_id) (cost=6.54
      rows=1.5) (actual time=0.00515..0.0062 rows=1.31 loops=32)
    actual_rows: 1.31
    estimated_rows: 1.5
    q_error: 1.1450381679389312

- query: "-- JOB Query 9c\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(an.name) AS alternative_name,\n       MIN(chn.name) AS voiced_character_name,\n\
    \       MIN(n.name) AS voicing_actress,\n       MIN(t.title) AS american_movie\n
    FROM aka_name AS an,\n     char_name AS chn,\n     cast_info AS ci,\n     company_name
    AS cn,\n     movie_companies AS mc,\n     name AS n,\n     role_type AS rt,\n\
    \     title AS t\nWHERE ci.note IN ('(voice)',\n                  '(voice: Japanese
    version)',\n                  '(voice) (uncredited)',\n                  '(voice:
    English version)')\n  AND cn.country_code ='[us]'\n  AND n.gender ='f'\n  AND
    n.name LIKE '%An%'\n  AND rt.role ='actress'\n  AND ci.movie_id = t.id\n  AND
    t.id = mc.movie_id\n  AND ci.movie_id = mc.movie_id\n  AND mc.company_id = cn.id\n\
    \  AND ci.role_id = rt.id\n  AND n.id = ci.person_id\n  AND chn.id = ci.person_role_id\n\
    \  AND an.person_id = n.id\n  AND an.person_id = ci.person_id"
  qep:
  - node: 'Aggregate: min(an.`name`), min(chn.`name`), min(n.`name`), min(t.title)
      (cost=6363 rows=1) (actual time=22230..22230 rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=6357 rows=56.6) (actual time=99.7..22187 rows=140449
      loops=1)
    actual_rows: 140449.0
    estimated_rows: 56.6
    q_error: 2481.4310954063603
  - node: Nested loop inner join (cost=6206 rows=566) (actual time=69..21903 rows=253250
      loops=1)
    actual_rows: 253250.0
    estimated_rows: 566.0
    q_error: 447.4381625441696
  - node: Nested loop inner join (cost=6008 rows=174) (actual time=69..21422 rows=119202
      loops=1)
    actual_rows: 119202.0
    estimated_rows: 174.0
    q_error: 685.0689655172414
  - node: Nested loop inner join (cost=5947 rows=116) (actual time=2.39..21140 rows=62693
      loops=1)
    actual_rows: 62693.0
    estimated_rows: 116.0
    q_error: 540.4568965517242
  - node: Nested loop inner join (cost=5135 rows=2321) (actual time=1.58..20883 rows=255750
      loops=1)
    actual_rows: 255750.0
    estimated_rows: 2321.0
    q_error: 110.18957345971565
  - node: Nested loop inner join (cost=2969 rows=2321) (actual time=1.34..17151 rows=255750
      loops=1)
    actual_rows: 255750.0
    estimated_rows: 2321.0
    q_error: 110.18957345971565
  - node: Nested loop inner join (cost=2033 rows=2321) (actual time=1.33..16770 rows=255750
      loops=1)
    actual_rows: 255750.0
    estimated_rows: 2321.0
    q_error: 110.18957345971565
  - node: "Filter: (rt.`role` = 'actress') (cost=1.45 rows=1.2) (actual time=0.0215..0.0265
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.2
    q_error: 1.2
  - node: Table scan on rt (cost=1.45 rows=12) (actual time=0.0193..0.0243 rows=12
      loops=1)
    actual_rows: 12.0
    estimated_rows: 12.0
    q_error: 1.0
  - node: "Filter: ((ci.note in ('(voice)','(voice: Japanese version)','(voice) (uncredited)','(voice:
      English version)')) and (ci.person_role_id is not null)) (cost=1370 rows=1935)
      (actual time=1.31..16756 rows=255750 loops=1)"
    actual_rows: 255750.0
    estimated_rows: 1935.0
    q_error: 132.1705426356589
  - node: Index lookup on ci using role_id_cast_info (role_id=rt.id) (cost=1370 rows=4836)
      (actual time=0.0233..16042 rows=7.45e+6 loops=1)
    actual_rows: 7450000.0
    estimated_rows: 4836.0
    q_error: 1540.5293631100083
  - node: Single-row index lookup on t using PRIMARY (id=ci.movie_id) (cost=0.303
      rows=1) (actual time=0.00132..0.00134 rows=1 loops=255750)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Single-row index lookup on chn using PRIMARY (id=ci.person_role_id) (cost=0.833
      rows=1) (actual time=0.0144..0.0144 rows=1 loops=255750)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: ((n.gender = 'f') and (n.`name` like '%An%')) (cost=0.25 rows=0.05)
      (actual time=851e-6..870e-6 rows=0.245 loops=255750)"
    actual_rows: 0.245
    estimated_rows: 0.05
    q_error: 4.8999999999999995
  - node: Single-row index lookup on n using PRIMARY (id=ci.person_id) (cost=0.25
      rows=1) (actual time=393e-6..417e-6 rows=1 loops=255750)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on an using person_id_aka_name (person_id=ci.person_id) (cost=0.377
      rows=1.5) (actual time=0.00256..0.00428 rows=1.9 loops=62693)
    actual_rows: 1.9
    estimated_rows: 1.5
    q_error: 1.2666666666666666
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=ci.movie_id)
      (cost=0.813 rows=3.24) (actual time=0.00298..0.00384 rows=2.12 loops=119202)
    actual_rows: 2.12
    estimated_rows: 3.24
    q_error: 1.528301886792453
  - node: "Filter: (cn.country_code = '[us]') (cost=0.166 rows=0.1) (actual time=968e-6..0.00101
      rows=0.555 loops=253250)"
    actual_rows: 0.555
    estimated_rows: 0.1
    q_error: 5.55
  - node: Single-row index lookup on cn using PRIMARY (id=mc.company_id) (cost=0.166
      rows=1) (actual time=779e-6..802e-6 rows=1 loops=253250)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 9d\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(an.name) AS alternative_name,\n       MIN(chn.name) AS voiced_char_name,\n\
    \       MIN(n.name) AS voicing_actress,\n       MIN(t.title) AS american_movie\n
    FROM aka_name AS an,\n     char_name AS chn,\n     cast_info AS ci,\n     company_name
    AS cn,\n     movie_companies AS mc,\n     name AS n,\n     role_type AS rt,\n\
    \     title AS t\nWHERE ci.note IN ('(voice)',\n                  '(voice: Japanese
    version)',\n                  '(voice) (uncredited)',\n                  '(voice:
    English version)')\n  AND cn.country_code ='[us]'\n  AND n.gender ='f'\n  AND
    rt.role ='actress'\n  AND ci.movie_id = t.id\n  AND t.id = mc.movie_id\n  AND
    ci.movie_id = mc.movie_id\n  AND mc.company_id = cn.id\n  AND ci.role_id = rt.id\n\
    \  AND n.id = ci.person_id\n  AND chn.id = ci.person_role_id\n  AND an.person_id
    = n.id\n  AND an.person_id = ci.person_id"
  qep:
  - node: 'Aggregate: min(an.`name`), min(chn.`name`), min(n.`name`), min(t.title)
      (cost=6182 rows=1) (actual time=21114..21114 rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=6171 rows=113) (actual time=2.54..20970 rows=483138
      loops=1)
    actual_rows: 483138.0
    estimated_rows: 113.0
    q_error: 4275.557522123894
  - node: Nested loop inner join (cost=5869 rows=1131) (actual time=2.52..20021 rows=910169
      loops=1)
    actual_rows: 910169.0
    estimated_rows: 1131.0
    q_error: 804.7471264367816
  - node: Nested loop inner join (cost=5473 rows=349) (actual time=2.51..18282 rows=482881
      loops=1)
    actual_rows: 482881.0
    estimated_rows: 349.0
    q_error: 1383.6131805157593
  - node: Nested loop inner join (cost=5351 rows=232) (actual time=1.28..17305 rows=255592
      loops=1)
    actual_rows: 255592.0
    estimated_rows: 232.0
    q_error: 1101.6896551724137
  - node: Nested loop inner join (cost=4539 rows=2321) (actual time=1.27..17121 rows=255750
      loops=1)
    actual_rows: 255750.0
    estimated_rows: 2321.0
    q_error: 110.18957345971565
  - node: Nested loop inner join (cost=2969 rows=2321) (actual time=1.26..16741 rows=255750
      loops=1)
    actual_rows: 255750.0
    estimated_rows: 2321.0
    q_error: 110.18957345971565
  - node: Nested loop inner join (cost=2033 rows=2321) (actual time=1.25..16368 rows=255750
      loops=1)
    actual_rows: 255750.0
    estimated_rows: 2321.0
    q_error: 110.18957345971565
  - node: "Filter: (rt.`role` = 'actress') (cost=1.45 rows=1.2) (actual time=0.02..0.0252
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.2
    q_error: 1.2
  - node: Table scan on rt (cost=1.45 rows=12) (actual time=0.0182..0.023 rows=12
      loops=1)
    actual_rows: 12.0
    estimated_rows: 12.0
    q_error: 1.0
  - node: "Filter: ((ci.note in ('(voice)','(voice: Japanese version)','(voice) (uncredited)','(voice:
      English version)')) and (ci.person_role_id is not null)) (cost=1370 rows=1935)
      (actual time=1.23..16355 rows=255750 loops=1)"
    actual_rows: 255750.0
    estimated_rows: 1935.0
    q_error: 132.1705426356589
  - node: Index lookup on ci using role_id_cast_info (role_id=rt.id) (cost=1370 rows=4836)
      (actual time=0.0209..15689 rows=7.45e+6 loops=1)
    actual_rows: 7450000.0
    estimated_rows: 4836.0
    q_error: 1540.5293631100083
  - node: Single-row index lookup on t using PRIMARY (id=ci.movie_id) (cost=0.303
      rows=1) (actual time=0.00129..0.00131 rows=1 loops=255750)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Single-row index lookup on chn using PRIMARY (id=ci.person_role_id) (cost=0.576
      rows=1) (actual time=0.00131..0.00134 rows=1 loops=255750)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (n.gender = 'f') (cost=0.25 rows=0.1) (actual time=490e-6..559e-6
      rows=0.999 loops=255750)"
    actual_rows: 0.999
    estimated_rows: 0.1
    q_error: 9.99
  - node: Single-row index lookup on n using PRIMARY (id=ci.person_id) (cost=0.25
      rows=1) (actual time=325e-6..347e-6 rows=1 loops=255750)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on an using person_id_aka_name (person_id=ci.person_id) (cost=0.376
      rows=1.5) (actual time=0.00199..0.00362 rows=1.89 loops=255592)
    actual_rows: 1.89
    estimated_rows: 1.5
    q_error: 1.26
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=ci.movie_id)
      (cost=0.812 rows=3.24) (actual time=0.00269..0.00343 rows=1.88 loops=482881)
    actual_rows: 1.88
    estimated_rows: 3.24
    q_error: 1.723404255319149
  - node: "Filter: (cn.country_code = '[us]') (cost=0.166 rows=0.1) (actual time=901e-6..936e-6
      rows=0.531 loops=910169)"
    actual_rows: 0.531
    estimated_rows: 0.1
    q_error: 5.31
  - node: Single-row index lookup on cn using PRIMARY (id=mc.company_id) (cost=0.166
      rows=1) (actual time=723e-6..744e-6 rows=1 loops=910169)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 10a\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(chn.name) AS uncredited_voiced_character,\n       MIN(t.title) AS russian_movie\n
    FROM char_name AS chn,\n     cast_info AS ci,\n     company_name AS cn,\n    \
    \ company_type AS ct,\n     movie_companies AS mc,\n     role_type AS rt,\n  \
    \   title AS t\nWHERE ci.note LIKE '%(voice)%'\n  AND ci.note LIKE '%(uncredited)%'\n\
    \  AND cn.country_code = '[ru]'\n  AND rt.role = 'actor'\n  AND t.production_year
    > 2005\n  AND t.id = mc.movie_id\n  AND t.id = ci.movie_id\n  AND ci.movie_id
    = mc.movie_id\n  AND chn.id = ci.person_role_id\n  AND rt.id = ci.role_id\n  AND
    cn.id = mc.company_id\n  AND ct.id = mc.company_type_id"
  qep:
  - node: 'Aggregate: min(chn.`name`), min(t.title) (cost=2146 rows=1) (actual time=31880..31880
      rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=2145 rows=7.74) (actual time=250..31880 rows=104
      loops=1)
    actual_rows: 104.0
    estimated_rows: 7.74
    q_error: 13.436692506459949
  - node: Nested loop inner join (cost=2143 rows=7.74) (actual time=250..31873 rows=104
      loops=1)
    actual_rows: 104.0
    estimated_rows: 7.74
    q_error: 13.436692506459949
  - node: Nested loop inner join (cost=2116 rows=77.4) (actual time=4.49..31846 rows=13694
      loops=1)
    actual_rows: 13694.0
    estimated_rows: 77.4
    q_error: 176.9250645994832
  - node: Nested loop inner join (cost=2089 rows=77.4) (actual time=4.45..31836 rows=13694
      loops=1)
    actual_rows: 13694.0
    estimated_rows: 77.4
    q_error: 176.9250645994832
  - node: Nested loop inner join (cost=2062 rows=23.9) (actual time=4.43..31789 rows=5189
      loops=1)
    actual_rows: 5189.0
    estimated_rows: 23.9
    q_error: 217.1129707112971
  - node: Nested loop inner join (cost=2033 rows=71.6) (actual time=4.4..31691 rows=25523
      loops=1)
    actual_rows: 25523.0
    estimated_rows: 71.6
    q_error: 356.4664804469274
  - node: "Filter: (rt.`role` = 'actor') (cost=1.45 rows=1.2) (actual time=0.0329..0.048
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.2
    q_error: 1.2
  - node: Table scan on rt (cost=1.45 rows=12) (actual time=0.029..0.0411 rows=12
      loops=1)
    actual_rows: 12.0
    estimated_rows: 12.0
    q_error: 1.0
  - node: "Filter: ((ci.note like '%(voice)%') and (ci.note like '%(uncredited)%')
      and (ci.person_role_id is not null)) (cost=1214 rows=59.7) (actual time=4.37..31689
      rows=25523 loops=1)"
    actual_rows: 25523.0
    estimated_rows: 59.7
    q_error: 427.5209380234506
  - node: Index lookup on ci using role_id_cast_info (role_id=rt.id) (cost=1214 rows=4836)
      (actual time=0.7..30494 rows=12.7e+6 loops=1)
    actual_rows: 12700000.0
    estimated_rows: 4836.0
    q_error: 2626.1373035566585
  - node: 'Filter: (t.production_year > 2005) (cost=0.304 rows=0.333) (actual time=0.00362..0.00364
      rows=0.203 loops=25523)'
    actual_rows: 0.203
    estimated_rows: 0.333
    q_error: 1.6403940886699506
  - node: Single-row index lookup on t using PRIMARY (id=ci.movie_id) (cost=0.304
      rows=1) (actual time=0.00331..0.00334 rows=1 loops=25523)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=ci.movie_id)
      (cost=0.824 rows=3.24) (actual time=0.0066..0.0087 rows=2.64 loops=5189)
    actual_rows: 2.64
    estimated_rows: 3.24
    q_error: 1.2272727272727273
  - node: Single-row covering index lookup on ct using PRIMARY (id=mc.company_type_id)
      (cost=0.251 rows=1) (actual time=530e-6..553e-6 rows=1 loops=13694)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (cn.country_code = '[ru]') (cost=0.25 rows=0.1) (actual time=0.00188..0.00188
      rows=0.00759 loops=13694)"
    actual_rows: 0.00759
    estimated_rows: 0.1
    q_error: 13.175230566534914
  - node: Single-row index lookup on cn using PRIMARY (id=mc.company_id) (cost=0.25
      rows=1) (actual time=0.00158..0.0016 rows=1 loops=13694)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Single-row index lookup on chn using PRIMARY (id=ci.person_role_id) (cost=0.191
      rows=1) (actual time=0.0641..0.0641 rows=1 loops=104)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 11a\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(cn.name) AS from_company,\n       MIN(lt.link) AS movie_link_type,\n\
    \       MIN(t.title) AS non_polish_sequel_movie\nFROM company_name AS cn,\n  \
    \   company_type AS ct,\n     keyword AS k,\n     link_type AS lt,\n     movie_companies
    AS mc,\n     movie_keyword AS mk,\n     movie_link AS ml,\n     title AS t\nWHERE
    cn.country_code !='[pl]'\n  AND (cn.name LIKE '%Film%'\n       OR cn.name LIKE
    '%Warner%')\n  AND ct.kind ='production companies'\n  AND k.keyword ='sequel'\n\
    \  AND lt.link LIKE '%follow%'\n  AND mc.note IS NULL\n  AND t.production_year
    BETWEEN 1950 AND 2000\n  AND lt.id = ml.link_type_id\n  AND ml.movie_id = t.id\n\
    \  AND t.id = mk.movie_id\n  AND mk.keyword_id = k.id\n  AND t.id = mc.movie_id\n\
    \  AND mc.company_type_id = ct.id\n  AND mc.company_id = cn.id\n  AND ml.movie_id
    = mk.movie_id\n  AND ml.movie_id = mc.movie_id\n  AND mk.movie_id = mc.movie_id"
  qep:
  - node: 'Aggregate: min(cn.`name`), min(lt.link), min(t.title) (cost=1931 rows=1)
      (actual time=32.6..32.6 rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=1930 rows=3.31) (actual time=2.1..32.4 rows=310
      loops=1)
    actual_rows: 310.0
    estimated_rows: 3.31
    q_error: 93.65558912386707
  - node: Nested loop inner join (cost=1852 rows=33.1) (actual time=1.4..25.1 rows=6864
      loops=1)
    actual_rows: 6864.0
    estimated_rows: 33.1
    q_error: 207.3716012084592
  - node: Nested loop inner join (cost=1775 rows=2.87) (actual time=1.38..18.3 rows=699
      loops=1)
    actual_rows: 699.0
    estimated_rows: 2.87
    q_error: 243.55400696864112
  - node: Nested loop inner join (cost=1739 rows=15.2) (actual time=1.03..14.6 rows=2794
      loops=1)
    actual_rows: 2794.0
    estimated_rows: 15.2
    q_error: 183.81578947368422
  - node: Nested loop inner join (cost=1382 rows=46.8) (actual time=1..6.95 rows=1332
      loops=1)
    actual_rows: 1332.0
    estimated_rows: 46.8
    q_error: 28.461538461538463
  - node: Nested loop inner join (cost=190 rows=422) (actual time=0.972..3.89 rows=2315
      loops=1)
    actual_rows: 2315.0
    estimated_rows: 422.0
    q_error: 5.485781990521327
  - node: Inner hash join (no condition) (cost=2.7 rows=0.222) (actual time=0.449..0.465
      rows=2 loops=1)
    actual_rows: 2.0
    estimated_rows: 0.222
    q_error: 9.00900900900901
  - node: "Filter: (lt.link like '%follow%') (cost=2.05 rows=2) (actual time=0.0098..0.0212
      rows=2 loops=1)"
    actual_rows: 2.0
    estimated_rows: 2.0
    q_error: 1.0
  - node: Table scan on lt (cost=2.05 rows=18) (actual time=0.0082..0.0159 rows=18
      loops=1)
    actual_rows: 18.0
    estimated_rows: 18.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: "Filter: (ct.kind = 'production companies') (cost=0.65 rows=1) (actual time=0.0244..0.0299
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on ct (cost=0.65 rows=4) (actual time=0.0208..0.0263 rows=4 loops=1)
    actual_rows: 4.0
    estimated_rows: 4.0
    q_error: 1.0
  - node: Index lookup on ml using link_type_id_movie_link (link_type_id=lt.id) (cost=168
      rows=1898) (actual time=0.504..1.67 rows=1158 loops=2)
    actual_rows: 1158.0
    estimated_rows: 1898.0
    q_error: 1.6390328151986182
  - node: 'Filter: (t.production_year between 1950 and 2000) (cost=0.303 rows=0.111)
      (actual time=0.00121..0.00124 rows=0.575 loops=2315)'
    actual_rows: 0.575
    estimated_rows: 0.111
    q_error: 5.18018018018018
  - node: Single-row index lookup on t using PRIMARY (id=ml.movie_id) (cost=0.303
      rows=1) (actual time=0.0011..0.00112 rows=1 loops=2315)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: 'Filter: ((mc.company_type_id = ct.id) and (mc.note is null)) (cost=0.811
      rows=0.324) (actual time=0.00407..0.00558 rows=2.1 loops=1332)'
    actual_rows: 2.1
    estimated_rows: 0.324
    q_error: 6.481481481481482
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=ml.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00216..0.00523 rows=4.13 loops=1332)
    actual_rows: 4.13
    estimated_rows: 3.24
    q_error: 1.2746913580246912
  - node: "Filter: ((cn.country_code <> '[pl]') and ((cn.`name` like '%Film%') or
      (cn.`name` like '%Warner%'))) (cost=0.25 rows=0.189) (actual time=0.00125..0.00126
      rows=0.25 loops=2794)"
    actual_rows: 0.25
    estimated_rows: 0.189
    q_error: 1.3227513227513228
  - node: Single-row index lookup on cn using PRIMARY (id=mc.company_id) (cost=0.25
      rows=1) (actual time=886e-6..902e-6 rows=1 loops=2794)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mk using movie_id_movie_keyword (movie_id=ml.movie_id) (cost=2.93
      rows=11.5) (actual time=0.0065..0.00931 rows=9.82 loops=699)
    actual_rows: 9.82
    estimated_rows: 11.5
    q_error: 1.1710794297352343
  - node: "Filter: (k.keyword = 'sequel') (cost=0.25 rows=0.1) (actual time=0.00101..0.00102
      rows=0.0452 loops=6864)"
    actual_rows: 0.0452
    estimated_rows: 0.1
    q_error: 2.212389380530974
  - node: Single-row index lookup on k using PRIMARY (id=mk.keyword_id) (cost=0.25
      rows=1) (actual time=876e-6..892e-6 rows=1 loops=6864)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 11b\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(cn.name) AS from_company,\n       MIN(lt.link) AS movie_link_type,\n\
    \       MIN(t.title) AS sequel_movie\nFROM company_name AS cn,\n     company_type
    AS ct,\n     keyword AS k,\n     link_type AS lt,\n     movie_companies AS mc,\n\
    \     movie_keyword AS mk,\n     movie_link AS ml,\n     title AS t\nWHERE cn.country_code
    !='[pl]'\n  AND (cn.name LIKE '%Film%'\n       OR cn.name LIKE '%Warner%')\n \
    \ AND ct.kind ='production companies'\n  AND k.keyword ='sequel'\n  AND lt.link
    LIKE '%follows%'\n  AND mc.note IS NULL\n  AND t.production_year = 1998\n  AND
    t.title LIKE '%Money%'\n  AND lt.id = ml.link_type_id\n  AND ml.movie_id = t.id\n\
    \  AND t.id = mk.movie_id\n  AND mk.keyword_id = k.id\n  AND t.id = mc.movie_id\n\
    \  AND mc.company_type_id = ct.id\n  AND mc.company_id = cn.id\n  AND ml.movie_id
    = mk.movie_id\n  AND ml.movie_id = mc.movie_id\n  AND mk.movie_id = mc.movie_id"
  qep:
  - node: 'Aggregate: min(cn.`name`), min(lt.link), min(t.title) (cost=1629 rows=1)
      (actual time=2.38..2.38 rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=1629 rows=1.49) (actual time=1.85..2.36 rows=14
      loops=1)
    actual_rows: 14.0
    estimated_rows: 1.49
    q_error: 9.395973154362416
  - node: Nested loop inner join (cost=1594 rows=14.9) (actual time=1.83..2.3 rows=56
      loops=1)
    actual_rows: 56.0
    estimated_rows: 14.9
    q_error: 3.7583892617449663
  - node: Nested loop inner join (cost=1559 rows=1.29) (actual time=1.82..2.23 rows=14
      loops=1)
    actual_rows: 14.0
    estimated_rows: 1.29
    q_error: 10.852713178294573
  - node: Nested loop inner join (cost=1543 rows=6.84) (actual time=1.81..2.2 rows=21
      loops=1)
    actual_rows: 21.0
    estimated_rows: 6.84
    q_error: 3.0701754385964914
  - node: Nested loop inner join (cost=1382 rows=21.1) (actual time=1.79..2.15 rows=7
      loops=1)
    actual_rows: 7.0
    estimated_rows: 21.1
    q_error: 3.0142857142857147
  - node: Nested loop inner join (cost=190 rows=422) (actual time=0.4..1.39 rows=1158
      loops=1)
    actual_rows: 1158.0
    estimated_rows: 422.0
    q_error: 2.744075829383886
  - node: Inner hash join (no condition) (cost=2.7 rows=0.222) (actual time=0.0872..0.0954
      rows=1 loops=1)
    actual_rows: 1.0
    estimated_rows: 0.222
    q_error: 4.504504504504505
  - node: "Filter: (lt.link like '%follows%') (cost=2.05 rows=2) (actual time=0.0176..0.0252
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 2.0
    q_error: 2.0
  - node: Table scan on lt (cost=2.05 rows=18) (actual time=0.0128..0.0177 rows=18
      loops=1)
    actual_rows: 18.0
    estimated_rows: 18.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: "Filter: (ct.kind = 'production companies') (cost=0.65 rows=1) (actual time=0.0477..0.0514
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on ct (cost=0.65 rows=4) (actual time=0.0402..0.0452 rows=4 loops=1)
    actual_rows: 4.0
    estimated_rows: 4.0
    q_error: 1.0
  - node: Index lookup on ml using link_type_id_movie_link (link_type_id=lt.id) (cost=168
      rows=1898) (actual time=0.31..1.25 rows=1158 loops=1)
    actual_rows: 1158.0
    estimated_rows: 1898.0
    q_error: 1.6390328151986182
  - node: "Filter: ((t.production_year = 1998) and (t.title like '%Money%')) (cost=0.303
      rows=0.05) (actual time=601e-6..601e-6 rows=0.00604 loops=1158)"
    actual_rows: 0.00604
    estimated_rows: 0.05
    q_error: 8.27814569536424
  - node: Single-row index lookup on t using PRIMARY (id=ml.movie_id) (cost=0.303
      rows=1) (actual time=473e-6..486e-6 rows=1 loops=1158)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: 'Filter: ((mc.company_type_id = ct.id) and (mc.note is null)) (cost=0.811
      rows=0.324) (actual time=0.00481..0.00687 rows=3 loops=7)'
    actual_rows: 3.0
    estimated_rows: 0.324
    q_error: 9.25925925925926
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=ml.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00341..0.00626 rows=4 loops=7)
    actual_rows: 4.0
    estimated_rows: 3.24
    q_error: 1.2345679012345678
  - node: "Filter: ((cn.country_code <> '[pl]') and ((cn.`name` like '%Film%') or
      (cn.`name` like '%Warner%'))) (cost=0.25 rows=0.189) (actual time=0.00113..0.00117
      rows=0.667 loops=21)"
    actual_rows: 0.667
    estimated_rows: 0.189
    q_error: 3.5291005291005293
  - node: Single-row index lookup on cn using PRIMARY (id=mc.company_id) (cost=0.25
      rows=1) (actual time=895e-6..914e-6 rows=1 loops=21)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mk using movie_id_movie_keyword (movie_id=ml.movie_id) (cost=2.98
      rows=11.5) (actual time=0.00391..0.00455 rows=4 loops=14)
    actual_rows: 4.0
    estimated_rows: 11.5
    q_error: 2.875
  - node: "Filter: (k.keyword = 'sequel') (cost=0.25 rows=0.1) (actual time=0.00102..0.00103
      rows=0.25 loops=56)"
    actual_rows: 0.25
    estimated_rows: 0.1
    q_error: 2.5
  - node: Single-row index lookup on k using PRIMARY (id=mk.keyword_id) (cost=0.25
      rows=1) (actual time=888e-6..904e-6 rows=1 loops=56)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 11c\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(cn.name) AS from_company,\n       MIN(mc.note) AS production_note,\n\
    \       MIN(t.title) AS movie_based_on_book\nFROM company_name AS cn,\n     company_type
    AS ct,\n     keyword AS k,\n     link_type AS lt,\n     movie_companies AS mc,\n\
    \     movie_keyword AS mk,\n     movie_link AS ml,\n     title AS t\nWHERE cn.country_code
    !='[pl]'\n  AND (cn.name LIKE '20th Century Fox%'\n       OR cn.name LIKE 'Twentieth
    Century Fox%')\n  AND ct.kind != 'production companies'\n  AND ct.kind IS NOT
    NULL\n  AND k.keyword IN ('sequel',\n                    'revenge',\n        \
    \            'based-on-novel')\n  AND mc.note IS NOT NULL\n  AND t.production_year
    > 1950\n  AND lt.id = ml.link_type_id\n  AND ml.movie_id = t.id\n  AND t.id =
    mk.movie_id\n  AND mk.keyword_id = k.id\n  AND t.id = mc.movie_id\n  AND mc.company_type_id
    = ct.id\n  AND mc.company_id = cn.id\n  AND ml.movie_id = mk.movie_id\n  AND ml.movie_id
    = mc.movie_id\n  AND mk.movie_id = mc.movie_id"
  qep:
  - node: 'Aggregate: min(cn.`name`), min(mc.note), min(t.title) (cost=82494 rows=1)
      (actual time=2052..2052 rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=80864 rows=16297) (actual time=12.7..2048 rows=6946
      loops=1)
    actual_rows: 6946.0
    estimated_rows: 16297.0
    q_error: 2.346242441693061
  - node: Nested loop inner join (cost=70780 rows=54323) (actual time=12.2..1120 rows=780776
      loops=1)
    actual_rows: 780776.0
    estimated_rows: 54323.0
    q_error: 14.372843915100418
  - node: Nested loop inner join (cost=51766 rows=4707) (actual time=2.05..502 rows=8393
      loops=1)
    actual_rows: 8393.0
    estimated_rows: 4707.0
    q_error: 1.7830890163586148
  - node: Nested loop inner join (cost=43043 rows=24924) (actual time=0.273..387 rows=96891
      loops=1)
    actual_rows: 96891.0
    estimated_rows: 24924.0
    q_error: 3.8874578719306694
  - node: Nested loop inner join (cost=31412 rows=33232) (actual time=0.268..331 rows=104935
      loops=1)
    actual_rows: 104935.0
    estimated_rows: 33232.0
    q_error: 3.157649253731343
  - node: Nested loop inner join (cost=18488 rows=11384) (actual time=0.258..103 rows=29726
      loops=1)
    actual_rows: 29726.0
    estimated_rows: 11384.0
    q_error: 2.61120871398454
  - node: Nested loop inner join (cost=4727 rows=34155) (actual time=0.249..45.5 rows=29997
      loops=1)
    actual_rows: 29997.0
    estimated_rows: 34155.0
    q_error: 1.1386138613861385
  - node: Covering index scan on lt using PRIMARY (cost=2.05 rows=18) (actual time=0.0171..0.0396
      rows=18 loops=1)
    actual_rows: 18.0
    estimated_rows: 18.0
    q_error: 1.0
  - node: Index lookup on ml using link_type_id_movie_link (link_type_id=lt.id) (cost=83.3
      rows=1898) (actual time=0.705..2.45 rows=1666 loops=18)
    actual_rows: 1666.0
    estimated_rows: 1898.0
    q_error: 1.1392557022809124
  - node: 'Filter: (t.production_year > 1950) (cost=0.303 rows=0.333) (actual time=0.00175..0.00181
      rows=0.991 loops=29997)'
    actual_rows: 0.991
    estimated_rows: 0.333
    q_error: 2.9759759759759756
  - node: Single-row index lookup on t using PRIMARY (id=ml.movie_id) (cost=0.303
      rows=1) (actual time=0.00161..0.00163 rows=1 loops=29997)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: 'Filter: (mc.note is not null) (cost=0.811 rows=2.92) (actual time=0.00236..0.0074
      rows=3.53 loops=29726)'
    actual_rows: 3.53
    estimated_rows: 2.92
    q_error: 1.2089041095890412
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=ml.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00203..0.00696 rows=4.97 loops=29726)
    actual_rows: 4.97
    estimated_rows: 3.24
    q_error: 1.5339506172839505
  - node: "Filter: (ct.kind <> 'production companies') (cost=0.25 rows=0.75) (actual
      time=341e-6..401e-6 rows=0.923 loops=104935)"
    actual_rows: 0.923
    estimated_rows: 0.75
    q_error: 1.2306666666666668
  - node: Single-row index lookup on ct using PRIMARY (id=mc.company_type_id) (cost=0.25
      rows=1) (actual time=166e-6..187e-6 rows=1 loops=104935)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: ((cn.country_code <> '[pl]') and ((cn.`name` like '20th Century
      Fox%') or (cn.`name` like 'Twentieth Century Fox%'))) (cost=0.25 rows=0.189)
      (actual time=0.00109..0.0011 rows=0.0866 loops=96891)"
    actual_rows: 0.0866
    estimated_rows: 0.189
    q_error: 2.1824480369515014
  - node: Single-row index lookup on cn using PRIMARY (id=mc.company_id) (cost=0.25
      rows=1) (actual time=755e-6..778e-6 rows=1 loops=96891)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mk using movie_id_movie_keyword (movie_id=ml.movie_id) (cost=2.89
      rows=11.5) (actual time=0.0092..0.0696 rows=93 loops=8393)
    actual_rows: 93.0
    estimated_rows: 11.5
    q_error: 8.08695652173913
  - node: "Filter: (k.keyword in ('sequel','revenge','based-on-novel')) (cost=0.0856
      rows=0.3) (actual time=0.00112..0.00112 rows=0.0089 loops=780776)"
    actual_rows: 0.0089
    estimated_rows: 0.3
    q_error: 33.70786516853933
  - node: Single-row index lookup on k using PRIMARY (id=mk.keyword_id) (cost=0.0856
      rows=1) (actual time=907e-6..926e-6 rows=1 loops=780776)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 11d\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(cn.name) AS from_company,\n       MIN(mc.note) AS production_note,\n\
    \       MIN(t.title) AS movie_based_on_book\nFROM company_name AS cn,\n     company_type
    AS ct,\n     keyword AS k,\n     link_type AS lt,\n     movie_companies AS mc,\n\
    \     movie_keyword AS mk,\n     movie_link AS ml,\n     title AS t\nWHERE cn.country_code
    !='[pl]'\n  AND ct.kind != 'production companies'\n  AND ct.kind IS NOT NULL\n\
    \  AND k.keyword IN ('sequel',\n                    'revenge',\n             \
    \       'based-on-novel')\n  AND mc.note IS NOT NULL\n  AND t.production_year
    > 1950\n  AND lt.id = ml.link_type_id\n  AND ml.movie_id = t.id\n  AND t.id =
    mk.movie_id\n  AND mk.keyword_id = k.id\n  AND t.id = mc.movie_id\n  AND mc.company_type_id
    = ct.id\n  AND mc.company_id = cn.id\n  AND ml.movie_id = mk.movie_id\n  AND ml.movie_id
    = mc.movie_id\n  AND mk.movie_id = mc.movie_id"
  qep:
  - node: 'Aggregate: min(cn.`name`), min(mc.note), min(t.title) (cost=176101 rows=1)
      (actual time=763..763 rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=169198 rows=69029) (actual time=4.57..758 rows=14899
      loops=1)
    actual_rows: 14899.0
    estimated_rows: 69029.0
    q_error: 4.633129740251023
  - node: Nested loop inner join (cost=159866 rows=76699) (actual time=4.56..744 rows=14916
      loops=1)
    actual_rows: 14916.0
    estimated_rows: 76699.0
    q_error: 5.142062215071064
  - node: Nested loop inner join (cost=147424 rows=102265) (actual time=4.56..736
      rows=15510 loops=1)
    actual_rows: 15510.0
    estimated_rows: 102265.0
    q_error: 6.593488072211477
  - node: Nested loop inner join (cost=107655 rows=35032) (actual time=4.54..710 rows=1460
      loops=1)
    actual_rows: 1460.0
    estimated_rows: 35032.0
    q_error: 23.994520547945207
  - node: Nested loop inner join (cost=66784 rows=116772) (actual time=0.249..345
      rows=286392 loops=1)
    actual_rows: 286392.0
    estimated_rows: 116772.0
    q_error: 2.452574247251053
  - node: Nested loop inner join (cost=25914 rows=10119) (actual time=0.236..43.6
      rows=29726 loops=1)
    actual_rows: 29726.0
    estimated_rows: 10119.0
    q_error: 2.9376420594920445
  - node: Nested loop inner join (cost=13686 rows=30360) (actual time=0.227..17.9
      rows=29997 loops=1)
    actual_rows: 29997.0
    estimated_rows: 30360.0
    q_error: 1.012101210121012
  - node: Table scan on ml (cost=3060 rows=30360) (actual time=0.217..7.01 rows=29997
      loops=1)
    actual_rows: 29997.0
    estimated_rows: 30360.0
    q_error: 1.012101210121012
  - node: Single-row covering index lookup on lt using PRIMARY (id=ml.link_type_id)
      (cost=0.25 rows=1) (actual time=225e-6..245e-6 rows=1 loops=29997)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: 'Filter: (t.production_year > 1950) (cost=0.303 rows=0.333) (actual time=680e-6..741e-6
      rows=0.991 loops=29997)'
    actual_rows: 0.991
    estimated_rows: 0.333
    q_error: 2.9759759759759756
  - node: Single-row index lookup on t using PRIMARY (id=ml.movie_id) (cost=0.303
      rows=1) (actual time=564e-6..584e-6 rows=1 loops=29997)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mk using movie_id_movie_keyword (movie_id=ml.movie_id) (cost=2.89
      rows=11.5) (actual time=0.00458..0.00966 rows=9.63 loops=29726)
    actual_rows: 9.63
    estimated_rows: 11.5
    q_error: 1.1941848390446521
  - node: "Filter: (k.keyword in ('sequel','revenge','based-on-novel')) (cost=0.25
      rows=0.3) (actual time=0.0012..0.0012 rows=0.0051 loops=286392)"
    actual_rows: 0.0051
    estimated_rows: 0.3
    q_error: 58.8235294117647
  - node: Single-row index lookup on k using PRIMARY (id=mk.keyword_id) (cost=0.25
      rows=1) (actual time=989e-6..0.00101 rows=1 loops=286392)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: 'Filter: (mc.note is not null) (cost=0.811 rows=2.92) (actual time=0.0032..0.0171
      rows=10.6 loops=1460)'
    actual_rows: 10.6
    estimated_rows: 2.92
    q_error: 3.6301369863013697
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=ml.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00264..0.016 rows=13.1 loops=1460)
    actual_rows: 13.1
    estimated_rows: 3.24
    q_error: 4.04320987654321
  - node: "Filter: (ct.kind <> 'production companies') (cost=0.0217 rows=0.75) (actual
      time=332e-6..390e-6 rows=0.962 loops=15510)"
    actual_rows: 0.962
    estimated_rows: 0.75
    q_error: 1.2826666666666666
  - node: Single-row index lookup on ct using PRIMARY (id=mc.company_type_id) (cost=0.0217
      rows=1) (actual time=162e-6..182e-6 rows=1 loops=15510)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (cn.country_code <> '[pl]') (cost=0.0217 rows=0.9) (actual time=733e-6..794e-6
      rows=0.999 loops=14916)"
    actual_rows: 0.999
    estimated_rows: 0.9
    q_error: 1.1099999999999999
  - node: Single-row index lookup on cn using PRIMARY (id=mc.company_id) (cost=0.0217
      rows=1) (actual time=588e-6..608e-6 rows=1 loops=14916)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 12a\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(cn.name) AS movie_company,\n       MIN(mi_idx.info) AS rating,\n  \
    \     MIN(t.title) AS drama_horror_movie\nFROM company_name AS cn,\n     company_type
    AS ct,\n     info_type AS it1,\n     info_type AS it2,\n     movie_companies AS
    mc,\n     movie_info AS mi,\n     movie_info_idx AS mi_idx,\n     title AS t\n
    WHERE cn.country_code = '[us]'\n  AND ct.kind = 'production companies'\n  AND
    it1.info = 'genres'\n  AND it2.info = 'rating'\n  AND mi.info IN ('Drama',\n \
    \                 'Horror')\n  AND mi_idx.info > '8.0'\n  AND t.production_year
    BETWEEN 2005 AND 2008\n  AND t.id = mi.movie_id\n  AND t.id = mi_idx.movie_id\n\
    \  AND mi.info_type_id = it1.id\n  AND mi_idx.info_type_id = it2.id\n  AND t.id
    = mc.movie_id\n  AND ct.id = mc.company_type_id\n  AND cn.id = mc.company_id\n\
    \  AND mc.movie_id = mi.movie_id\n  AND mc.movie_id = mi_idx.movie_id\n  AND mi.movie_id
    = mi_idx.movie_id"
  qep:
  - node: 'Aggregate: min(cn.`name`), min(mi_idx.info), min(t.title) (cost=10834 rows=1)
      (actual time=5562..5562 rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=10833 rows=2.4) (actual time=113..5561 rows=397
      loops=1)
    actual_rows: 397.0
    estimated_rows: 2.4
    q_error: 165.41666666666669
  - node: Nested loop inner join (cost=10775 rows=24) (actual time=96.1..5559 rows=708
      loops=1)
    actual_rows: 708.0
    estimated_rows: 24.0
    q_error: 29.5
  - node: Nested loop inner join (cost=10713 rows=7.39) (actual time=96.1..5551 rows=557
      loops=1)
    actual_rows: 557.0
    estimated_rows: 7.39
    q_error: 75.37212449255752
  - node: Nested loop inner join (cost=10521 rows=73.9) (actual time=13.6..5546 rows=2187
      loops=1)
    actual_rows: 2187.0
    estimated_rows: 73.9
    q_error: 29.59404600811908
  - node: Nested loop inner join (cost=9944 rows=68.4) (actual time=0.17..3795 rows=36964
      loops=1)
    actual_rows: 36964.0
    estimated_rows: 68.4
    q_error: 540.4093567251462
  - node: Nested loop inner join (cost=8018 rows=616) (actual time=0.12..3237 rows=272720
      loops=1)
    actual_rows: 272720.0
    estimated_rows: 616.0
    q_error: 442.72727272727275
  - node: Inner hash join (no condition) (cost=12.2 rows=1.13) (actual time=0.0438..0.0751
      rows=1 loops=1)
    actual_rows: 1.0
    estimated_rows: 1.13
    q_error: 1.13
  - node: "Filter: (it1.info = 'genres') (cost=11.6 rows=11.3) (actual time=0.0083..0.0384
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 11.3
    q_error: 11.3
  - node: Table scan on it1 (cost=11.6 rows=113) (actual time=0.0074..0.0327 rows=113
      loops=1)
    actual_rows: 113.0
    estimated_rows: 113.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: "Filter: (ct.kind = 'production companies') (cost=0.65 rows=1) (actual time=0.0223..0.0253
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on ct (cost=0.65 rows=4) (actual time=0.0187..0.0224 rows=4 loops=1)
    actual_rows: 4.0
    estimated_rows: 4.0
    q_error: 1.0
  - node: "Filter: (mi.info in ('Drama','Horror')) (cost=686 rows=545) (actual time=0.075..3224
      rows=272720 loops=1)"
    actual_rows: 272720.0
    estimated_rows: 545.0
    q_error: 500.4036697247706
  - node: Index lookup on mi using info_type_id_movie_info (info_type_id=it1.id) (cost=686
      rows=2725) (actual time=0.0697..3008 rows=1.53e+6 loops=1)
    actual_rows: 1530000.0
    estimated_rows: 2725.0
    q_error: 561.4678899082569
  - node: 'Filter: (t.production_year between 2005 and 2008) (cost=0.303 rows=0.111)
      (actual time=0.00194..0.00195 rows=0.136 loops=272720)'
    actual_rows: 0.136
    estimated_rows: 0.111
    q_error: 1.2252252252252254
  - node: Single-row index lookup on t using PRIMARY (id=mi.movie_id) (cost=0.303
      rows=1) (actual time=0.00175..0.00177 rows=1 loops=272720)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (mi_idx.info > '8.0') (cost=0.811 rows=1.08) (actual time=0.0469..0.0473
      rows=0.0592 loops=36964)"
    actual_rows: 0.0592
    estimated_rows: 1.08
    q_error: 18.243243243243242
  - node: Index lookup on mi_idx using movie_id_movie_info_idx (movie_id=mi.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.0428..0.0469 rows=1.6 loops=36964)
    actual_rows: 1.6
    estimated_rows: 3.24
    q_error: 2.025
  - node: "Filter: (it2.info = 'rating') (cost=0.25 rows=0.1) (actual time=0.00181..0.00184
      rows=0.255 loops=2187)"
    actual_rows: 0.255
    estimated_rows: 0.1
    q_error: 2.55
  - node: Single-row index lookup on it2 using PRIMARY (id=mi_idx.info_type_id) (cost=0.25
      rows=1) (actual time=0.00138..0.00141 rows=1 loops=2187)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: 'Filter: (mc.company_type_id = ct.id) (cost=0.815 rows=3.24) (actual time=0.0128..0.0137
      rows=1.27 loops=557)'
    actual_rows: 1.27
    estimated_rows: 3.24
    q_error: 2.551181102362205
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=mi.movie_id)
      (cost=0.815 rows=3.24) (actual time=0.00968..0.0124 rows=3.47 loops=557)
    actual_rows: 3.47
    estimated_rows: 3.24
    q_error: 1.0709876543209877
  - node: "Filter: (cn.country_code = '[us]') (cost=0.231 rows=0.1) (actual time=0.00365..0.0037
      rows=0.561 loops=708)"
    actual_rows: 0.561
    estimated_rows: 0.1
    q_error: 5.61
  - node: Single-row index lookup on cn using PRIMARY (id=mc.company_id) (cost=0.231
      rows=1) (actual time=0.00326..0.00329 rows=1 loops=708)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 12b\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(mi.info) AS budget,\n       MIN(t.title) AS unsuccsessful_movie\nFROM
    company_name AS cn,\n     company_type AS ct,\n     info_type AS it1,\n     info_type
    AS it2,\n     movie_companies AS mc,\n     movie_info AS mi,\n     movie_info_idx
    AS mi_idx,\n     title AS t\nWHERE cn.country_code ='[us]'\n  AND ct.kind IS NOT
    NULL\n  AND (ct.kind ='production companies'\n       OR ct.kind = 'distributors')\n\
    \  AND it1.info ='budget'\n  AND it2.info ='bottom 10 rank'\n  AND t.production_year
    >2000\n  AND (t.title LIKE 'Birdemic%'\n       OR t.title LIKE '%Movie%')\n  AND
    t.id = mi.movie_id\n  AND t.id = mi_idx.movie_id\n  AND mi.info_type_id = it1.id\n\
    \  AND mi_idx.info_type_id = it2.id\n  AND t.id = mc.movie_id\n  AND ct.id = mc.company_type_id\n\
    \  AND cn.id = mc.company_id\n  AND mc.movie_id = mi.movie_id\n  AND mc.movie_id
    = mi_idx.movie_id\n  AND mi.movie_id = mi_idx.movie_id"
  qep:
  - node: 'Aggregate: min(mi.info), min(t.title) (cost=30179 rows=1) (actual time=874..874
      rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=30175 rows=39.6) (actual time=232..874 rows=10
      loops=1)
    actual_rows: 10.0
    estimated_rows: 39.6
    q_error: 3.96
  - node: Nested loop inner join (cost=29961 rows=396) (actual time=232..874 rows=33
      loops=1)
    actual_rows: 33.0
    estimated_rows: 396.0
    q_error: 12.0
  - node: Nested loop inner join (cost=28930 rows=122) (actual time=232..873 rows=4
      loops=1)
    actual_rows: 4.0
    estimated_rows: 122.0
    q_error: 30.5
  - node: Nested loop inner join (cost=27062 rows=1222) (actual time=68.7..872 rows=1270
      loops=1)
    actual_rows: 1270.0
    estimated_rows: 1222.0
    q_error: 1.039279869067103
  - node: Nested loop inner join (cost=23884 rows=377) (actual time=68.7..865 rows=886
      loops=1)
    actual_rows: 886.0
    estimated_rows: 377.0
    q_error: 2.350132625994695
  - node: Nested loop inner join (cost=14023 rows=5388) (actual time=0.0802..388 rows=243726
      loops=1)
    actual_rows: 243726.0
    estimated_rows: 5388.0
    q_error: 45.23496659242762
  - node: Inner hash join (no condition) (cost=13.1 rows=1.98) (actual time=0.0566..0.0655
      rows=2 loops=1)
    actual_rows: 2.0
    estimated_rows: 1.98
    q_error: 1.0101010101010102
  - node: "Filter: (it1.info = 'budget') (cost=6.61 rows=11.3) (actual time=0.0268..0.0329
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 11.3
    q_error: 11.3
  - node: Table scan on it1 (cost=6.61 rows=113) (actual time=0.0061..0.0274 rows=113
      loops=1)
    actual_rows: 113.0
    estimated_rows: 113.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: "Filter: ((ct.kind = 'production companies') or (ct.kind = 'distributors'))
      (cost=0.65 rows=1.75) (actual time=0.0182..0.0221 rows=2 loops=1)"
    actual_rows: 2.0
    estimated_rows: 1.75
    q_error: 1.1428571428571428
  - node: Table scan on ct (cost=0.65 rows=4) (actual time=0.016..0.0192 rows=4 loops=1)
    actual_rows: 4.0
    estimated_rows: 4.0
    q_error: 1.0
  - node: Index lookup on mi using info_type_id_movie_info (info_type_id=it1.id) (cost=695
      rows=2725) (actual time=0.0161..189 rows=121863 loops=2)
    actual_rows: 121863.0
    estimated_rows: 2725.0
    q_error: 44.720366972477066
  - node: "Filter: ((t.production_year > 2000) and ((t.title like 'Birdemic%') or
      (t.title like '%Movie%'))) (cost=0.173 rows=0.0699) (actual time=0.00188..0.00188
      rows=0.00364 loops=243726)"
    actual_rows: 0.00364
    estimated_rows: 0.0699
    q_error: 19.203296703296704
  - node: Single-row index lookup on t using PRIMARY (id=mi.movie_id) (cost=0.173
      rows=1) (actual time=0.00153..0.00155 rows=1 loops=243726)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mi_idx using movie_id_movie_info_idx (movie_id=mi.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00706..0.00758 rows=1.43 loops=886)
    actual_rows: 1.43
    estimated_rows: 3.24
    q_error: 2.265734265734266
  - node: "Filter: (it2.info = 'bottom 10 rank') (cost=0.143 rows=0.1) (actual time=0.00138..0.00138
      rows=0.00315 loops=1270)"
    actual_rows: 0.00315
    estimated_rows: 0.1
    q_error: 31.746031746031747
  - node: Single-row index lookup on it2 using PRIMARY (id=mi_idx.info_type_id) (cost=0.143
      rows=1) (actual time=0.00107..0.0011 rows=1 loops=1270)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: 'Filter: (mc.company_type_id = ct.id) (cost=0.811 rows=3.24) (actual time=0.0332..0.0405
      rows=8.25 loops=4)'
    actual_rows: 8.25
    estimated_rows: 3.24
    q_error: 2.5462962962962963
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=mi.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.0145..0.0379 rows=16.5 loops=4)
    actual_rows: 16.5
    estimated_rows: 3.24
    q_error: 5.092592592592593
  - node: "Filter: (cn.country_code = '[us]') (cost=0.0441 rows=0.1) (actual time=0.00169..0.00172
      rows=0.303 loops=33)"
    actual_rows: 0.303
    estimated_rows: 0.1
    q_error: 3.03
  - node: Single-row index lookup on cn using PRIMARY (id=mc.company_id) (cost=0.0441
      rows=1) (actual time=0.00148..0.0015 rows=1 loops=33)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 12c\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(cn.name) AS movie_company,\n       MIN(mi_idx.info) AS rating,\n  \
    \     MIN(t.title) AS mainstream_movie\nFROM company_name AS cn,\n     company_type
    AS ct,\n     info_type AS it1,\n     info_type AS it2,\n     movie_companies AS
    mc,\n     movie_info AS mi,\n     movie_info_idx AS mi_idx,\n     title AS t\n
    WHERE cn.country_code = '[us]'\n  AND ct.kind = 'production companies'\n  AND
    it1.info = 'genres'\n  AND it2.info = 'rating'\n  AND mi.info IN ('Drama',\n \
    \                 'Horror',\n                  'Western',\n                  'Family')\n\
    \  AND mi_idx.info > '7.0'\n  AND t.production_year BETWEEN 2000 AND 2010\n  AND
    t.id = mi.movie_id\n  AND t.id = mi_idx.movie_id\n  AND mi.info_type_id = it1.id\n\
    \  AND mi_idx.info_type_id = it2.id\n  AND t.id = mc.movie_id\n  AND ct.id = mc.company_type_id\n\
    \  AND cn.id = mc.company_id\n  AND mc.movie_id = mi.movie_id\n  AND mc.movie_id
    = mi_idx.movie_id\n  AND mi.movie_id = mi_idx.movie_id"
  qep:
  - node: 'Aggregate: min(cn.`name`), min(mi_idx.info), min(t.title) (cost=13649 rows=1)
      (actual time=3835..3835 rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=13649 rows=4.8) (actual time=0.271..3832 rows=4711
      loops=1)
    actual_rows: 4711.0
    estimated_rows: 4.8
    q_error: 981.4583333333334
  - node: Nested loop inner join (cost=13533 rows=48) (actual time=0.267..3798 rows=15537
      loops=1)
    actual_rows: 15537.0
    estimated_rows: 48.0
    q_error: 323.6875
  - node: Nested loop inner join (cost=13408 rows=14.8) (actual time=0.251..3703 rows=7964
      loops=1)
    actual_rows: 7964.0
    estimated_rows: 14.8
    q_error: 538.1081081081081
  - node: Nested loop inner join (cost=13024 rows=148) (actual time=0.147..3687 rows=15961
      loops=1)
    actual_rows: 15961.0
    estimated_rows: 148.0
    q_error: 107.8445945945946
  - node: Nested loop inner join (cost=11870 rows=137) (actual time=0.0951..3079 rows=108173
      loops=1)
    actual_rows: 108173.0
    estimated_rows: 137.0
    q_error: 789.5839416058394
  - node: Nested loop inner join (cost=8018 rows=1232) (actual time=0.0663..2610 rows=325255
      loops=1)
    actual_rows: 325255.0
    estimated_rows: 1232.0
    q_error: 264.0056818181818
  - node: Inner hash join (no condition) (cost=12.2 rows=1.13) (actual time=0.0399..0.085
      rows=1 loops=1)
    actual_rows: 1.0
    estimated_rows: 1.13
    q_error: 1.13
  - node: "Filter: (it1.info = 'genres') (cost=11.6 rows=11.3) (actual time=0.0071..0.0507
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 11.3
    q_error: 11.3
  - node: Table scan on it1 (cost=11.6 rows=113) (actual time=0.0064..0.0419 rows=113
      loops=1)
    actual_rows: 113.0
    estimated_rows: 113.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: "Filter: (ct.kind = 'production companies') (cost=0.65 rows=1) (actual time=0.022..0.0249
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on ct (cost=0.65 rows=4) (actual time=0.0197..0.0231 rows=4 loops=1)
    actual_rows: 4.0
    estimated_rows: 4.0
    q_error: 1.0
  - node: "Filter: (mi.info in ('Drama','Horror','Western','Family')) (cost=691 rows=1090)
      (actual time=0.0254..2595 rows=325255 loops=1)"
    actual_rows: 325255.0
    estimated_rows: 1090.0
    q_error: 298.39908256880733
  - node: Index lookup on mi using info_type_id_movie_info (info_type_id=it1.id) (cost=691
      rows=2725) (actual time=0.0214..2335 rows=1.53e+6 loops=1)
    actual_rows: 1530000.0
    estimated_rows: 2725.0
    q_error: 561.4678899082569
  - node: 'Filter: (t.production_year between 2000 and 2010) (cost=0.303 rows=0.111)
      (actual time=0.00131..0.00134 rows=0.333 loops=325255)'
    actual_rows: 0.333
    estimated_rows: 0.111
    q_error: 3.0
  - node: Single-row index lookup on t using PRIMARY (id=mi.movie_id) (cost=0.303
      rows=1) (actual time=0.00115..0.00117 rows=1 loops=325255)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (mi_idx.info > '7.0') (cost=0.811 rows=1.08) (actual time=0.00533..0.0055
      rows=0.148 loops=108173)"
    actual_rows: 0.148
    estimated_rows: 1.08
    q_error: 7.297297297297298
  - node: Index lookup on mi_idx using movie_id_movie_info_idx (movie_id=mi.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00358..0.00526 rows=1.46 loops=108173)
    actual_rows: 1.46
    estimated_rows: 3.24
    q_error: 2.219178082191781
  - node: "Filter: (it2.info = 'rating') (cost=0.25 rows=0.1) (actual time=859e-6..894e-6
      rows=0.499 loops=15961)"
    actual_rows: 0.499
    estimated_rows: 0.1
    q_error: 4.989999999999999
  - node: Single-row index lookup on it2 using PRIMARY (id=mi_idx.info_type_id) (cost=0.25
      rows=1) (actual time=620e-6..642e-6 rows=1 loops=15961)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: 'Filter: (mc.company_type_id = ct.id) (cost=0.813 rows=3.24) (actual time=0.0103..0.0117
      rows=1.95 loops=7964)'
    actual_rows: 1.95
    estimated_rows: 3.24
    q_error: 1.6615384615384616
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=mi.movie_id)
      (cost=0.813 rows=3.24) (actual time=0.00667..0.0111 rows=5.65 loops=7964)
    actual_rows: 5.65
    estimated_rows: 3.24
    q_error: 1.7438271604938271
  - node: "Filter: (cn.country_code = '[us]') (cost=0.231 rows=0.1) (actual time=0.00202..0.00206
      rows=0.303 loops=15537)"
    actual_rows: 0.303
    estimated_rows: 0.1
    q_error: 3.03
  - node: Single-row index lookup on cn using PRIMARY (id=mc.company_id) (cost=0.231
      rows=1) (actual time=0.0018..0.00184 rows=1 loops=15537)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 13a\n-- This is \"The German Query\" (13d is \"The US Query\"\
    ) according to Leis et al. (2018).\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT
    YAML*/, ANALYZE)\nSELECT MIN(mi.info) AS release_date,\n       MIN(miidx.info)
    AS rating,\n       MIN(t.title) AS german_movie\nFROM company_name AS cn,\n  \
    \   company_type AS ct,\n     info_type AS it,\n     info_type AS it2,\n     kind_type
    AS kt,\n     movie_companies AS mc,\n     movie_info AS mi,\n     movie_info_idx
    AS miidx,\n     title AS t\nWHERE cn.country_code ='[de]'\n  AND ct.kind ='production
    companies'\n  AND it.info ='rating'\n  AND it2.info ='release dates'\n  AND kt.kind
    ='movie'\n  AND mi.movie_id = t.id\n  AND it2.id = mi.info_type_id\n  AND kt.id
    = t.kind_id\n  AND mc.movie_id = t.id\n  AND cn.id = mc.company_id\n  AND ct.id
    = mc.company_type_id\n  AND miidx.movie_id = t.id\n  AND it.id = miidx.info_type_id\n\
    \  AND mi.movie_id = miidx.movie_id\n  AND mi.movie_id = mc.movie_id\n  AND miidx.movie_id
    = mc.movie_id"
  qep:
  - node: 'Aggregate: min(mi.info), min(miidx.info), min(t.title) (cost=29301 rows=1)
      (actual time=27087..27087 rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=29300 rows=9.25) (actual time=6083..27056 rows=111101
      loops=1)
    actual_rows: 111101.0
    estimated_rows: 9.25
    q_error: 12010.918918918918
  - node: Nested loop inner join (cost=28791 rows=92.5) (actual time=6082..25132 rows=1.92e+6
      loops=1)
    actual_rows: 1920000.0
    estimated_rows: 92.5
    q_error: 20756.756756756757
  - node: Nested loop inner join (cost=27163 rows=28.5) (actual time=6082..16426 rows=724731
      loops=1)
    actual_rows: 724731.0
    estimated_rows: 28.5
    q_error: 25429.157894736843
  - node: Nested loop inner join (cost=22142 rows=285) (actual time=6082..14370 rows=2.18e+6
      loops=1)
    actual_rows: 2180000.0
    estimated_rows: 285.0
    q_error: 7649.122807017544
  - node: Nested loop inner join (cost=17121 rows=88) (actual time=6082..9989 rows=1.08e+6
      loops=1)
    actual_rows: 1080000.0
    estimated_rows: 88.0
    q_error: 12272.727272727272
  - node: Nested loop inner join (cost=7755 rows=440) (actual time=8.51..5382 rows=3.04e+6
      loops=1)
    actual_rows: 3040000.0
    estimated_rows: 440.0
    q_error: 6909.090909090909
  - node: Inner hash join (no condition) (cost=12.9 rows=0.161) (actual time=8.38..8.4
      rows=1 loops=1)
    actual_rows: 1.0
    estimated_rows: 0.161
    q_error: 6.211180124223603
  - node: "Filter: (it2.info = 'release dates') (cost=11.6 rows=11.3) (actual time=0.0207..0.0415
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 11.3
    q_error: 11.3
  - node: Table scan on it2 (cost=11.6 rows=113) (actual time=0.0179..0.036 rows=113
      loops=1)
    actual_rows: 113.0
    estimated_rows: 113.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: Inner hash join (no condition) (cost=2.35 rows=0.143) (actual time=8.34..8.35
      rows=1 loops=1)
    actual_rows: 1.0
    estimated_rows: 0.143
    q_error: 6.993006993006993
  - node: "Filter: (kt.kind = 'movie') (cost=1.7 rows=1) (actual time=8.31..8.31 rows=1
      loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on kt (cost=1.7 rows=7) (actual time=8.3..8.31 rows=7 loops=1)
    actual_rows: 7.0
    estimated_rows: 7.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: "Filter: (ct.kind = 'production companies') (cost=0.65 rows=1) (actual time=0.0164..0.0181
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on ct (cost=0.65 rows=4) (actual time=0.0126..0.0147 rows=4 loops=1)
    actual_rows: 4.0
    estimated_rows: 4.0
    q_error: 1.0
  - node: Index lookup on mi using info_type_id_movie_info (info_type_id=it2.id) (cost=705
      rows=2725) (actual time=0.127..5229 rows=3.04e+6 loops=1)
    actual_rows: 3040000.0
    estimated_rows: 2725.0
    q_error: 1115.5963302752293
  - node: 'Filter: (t.kind_id = kt.id) (cost=0.303 rows=0.2) (actual time=0.0014..0.00142
      rows=0.357 loops=3.04e+6)'
    actual_rows: 0.357
    estimated_rows: 0.2
    q_error: 1.785
  - node: Single-row index lookup on t using PRIMARY (id=mi.movie_id) (cost=0.303
      rows=1) (actual time=0.00124..0.00127 rows=1 loops=3.04e+6)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on miidx using movie_id_movie_info_idx (movie_id=mi.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00217..0.00386 rows=2.02 loops=1.08e+6)
    actual_rows: 2.02
    estimated_rows: 3.24
    q_error: 1.603960396039604
  - node: "Filter: (it.info = 'rating') (cost=0.25 rows=0.1) (actual time=818e-6..840e-6
      rows=0.332 loops=2.18e+6)"
    actual_rows: 0.332
    estimated_rows: 0.1
    q_error: 3.32
  - node: Single-row index lookup on it using PRIMARY (id=miidx.info_type_id) (cost=0.25
      rows=1) (actual time=635e-6..656e-6 rows=1 loops=2.18e+6)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: 'Filter: (mc.company_type_id = ct.id) (cost=0.811 rows=3.24) (actual time=0.0102..0.0118
      rows=2.65 loops=724731)'
    actual_rows: 2.65
    estimated_rows: 3.24
    q_error: 1.2226415094339624
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=mi.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00407..0.0111 rows=11.2 loops=724731)
    actual_rows: 11.2
    estimated_rows: 3.24
    q_error: 3.4567901234567895
  - node: "Filter: (cn.country_code = '[de]') (cost=0.0771 rows=0.1) (actual time=912e-6..916e-6
      rows=0.0579 loops=1.92e+6)"
    actual_rows: 0.0579
    estimated_rows: 0.1
    q_error: 1.7271157167530224
  - node: Single-row index lookup on cn using PRIMARY (id=mc.company_id) (cost=0.0771
      rows=1) (actual time=730e-6..751e-6 rows=1 loops=1.92e+6)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 13b\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(cn.name) AS producing_company,\n       MIN(miidx.info) AS rating,\n\
    \       MIN(t.title) AS movie_about_winning\nFROM company_name AS cn,\n     company_type
    AS ct,\n     info_type AS it,\n     info_type AS it2,\n     kind_type AS kt,\n\
    \     movie_companies AS mc,\n     movie_info AS mi,\n     movie_info_idx AS miidx,\n\
    \     title AS t\nWHERE cn.country_code ='[us]'\n  AND ct.kind ='production companies'\n\
    \  AND it.info ='rating'\n  AND it2.info ='release dates'\n  AND kt.kind ='movie'\n\
    \  AND t.title != ''\n  AND (t.title LIKE '%Champion%'\n       OR t.title LIKE
    '%Loser%')\n  AND mi.movie_id = t.id\n  AND it2.id = mi.info_type_id\n  AND kt.id
    = t.kind_id\n  AND mc.movie_id = t.id\n  AND cn.id = mc.company_id\n  AND ct.id
    = mc.company_type_id\n  AND miidx.movie_id = t.id\n  AND it.id = miidx.info_type_id\n\
    \  AND mi.movie_id = miidx.movie_id\n  AND mi.movie_id = mc.movie_id\n  AND miidx.movie_id
    = mc.movie_id"
  qep:
  - node: 'Aggregate: min(cn.`name`), min(miidx.info), min(t.title) (cost=18541 rows=1)
      (actual time=7854..7854 rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=18540 rows=2.31) (actual time=4609..7853 rows=493
      loops=1)
    actual_rows: 493.0
    estimated_rows: 2.31
    q_error: 213.41991341991343
  - node: Nested loop inner join (cost=18413 rows=23.1) (actual time=4593..7852 rows=924
      loops=1)
    actual_rows: 924.0
    estimated_rows: 23.1
    q_error: 40.0
  - node: Nested loop inner join (cost=18006 rows=7.13) (actual time=4593..7846 rows=441
      loops=1)
    actual_rows: 441.0
    estimated_rows: 7.13
    q_error: 61.85133239831697
  - node: Nested loop inner join (cost=16751 rows=71.3) (actual time=4593..7844 rows=1323
      loops=1)
    actual_rows: 1323.0
    estimated_rows: 71.3
    q_error: 18.555399719495092
  - node: Nested loop inner join (cost=15496 rows=22) (actual time=4582..7839 rows=732
      loops=1)
    actual_rows: 732.0
    estimated_rows: 22.0
    q_error: 33.27272727272727
  - node: Nested loop inner join (cost=7754 rows=440) (actual time=0.288..4366 rows=3.04e+6
      loops=1)
    actual_rows: 3040000.0
    estimated_rows: 440.0
    q_error: 6909.090909090909
  - node: Inner hash join (no condition) (cost=12.2 rows=0.161) (actual time=0.0513..0.0759
      rows=1 loops=1)
    actual_rows: 1.0
    estimated_rows: 0.161
    q_error: 6.211180124223603
  - node: "Filter: (it2.info = 'release dates') (cost=11.6 rows=11.3) (actual time=0.0081..0.0317
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 11.3
    q_error: 11.3
  - node: Table scan on it2 (cost=11.6 rows=113) (actual time=0.0059..0.0267 rows=113
      loops=1)
    actual_rows: 113.0
    estimated_rows: 113.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: Inner hash join (no condition) (cost=1.6 rows=0.143) (actual time=0.0378..0.0396
      rows=1 loops=1)
    actual_rows: 1.0
    estimated_rows: 0.143
    q_error: 6.993006993006993
  - node: "Filter: (kt.kind = 'movie') (cost=0.95 rows=1) (actual time=0.0085..0.01
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on kt (cost=0.95 rows=7) (actual time=0.0083..0.0096 rows=7 loops=1)
    actual_rows: 7.0
    estimated_rows: 7.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: "Filter: (ct.kind = 'production companies') (cost=0.65 rows=1) (actual time=0.0197..0.0221
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on ct (cost=0.65 rows=4) (actual time=0.0168..0.0197 rows=4 loops=1)
    actual_rows: 4.0
    estimated_rows: 4.0
    q_error: 1.0
  - node: Index lookup on mi using info_type_id_movie_info (info_type_id=it2.id) (cost=705
      rows=2725) (actual time=0.236..4226 rows=3.04e+6 loops=1)
    actual_rows: 3040000.0
    estimated_rows: 2725.0
    q_error: 1115.5963302752293
  - node: "Filter: ((t.kind_id = kt.id) and (t.title <> '') and ((t.title like '%Champion%')
      or (t.title like '%Loser%'))) (cost=0.25 rows=0.05) (actual time=0.00107..0.00107
      rows=241e-6 loops=3.04e+6)"
    actual_rows: 0.000241
    estimated_rows: 0.05
    q_error: 207.4688796680498
  - node: Single-row index lookup on t using PRIMARY (id=mi.movie_id) (cost=0.25 rows=1)
      (actual time=768e-6..790e-6 rows=1 loops=3.04e+6)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on miidx using movie_id_movie_info_idx (movie_id=mi.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00408..0.00615 rows=1.81 loops=732)
    actual_rows: 1.81
    estimated_rows: 3.24
    q_error: 1.7900552486187846
  - node: "Filter: (it.info = 'rating') (cost=0.25 rows=0.1) (actual time=0.00126..0.00128
      rows=0.333 loops=1323)"
    actual_rows: 0.333
    estimated_rows: 0.1
    q_error: 3.33
  - node: Single-row index lookup on it using PRIMARY (id=miidx.info_type_id) (cost=0.25
      rows=1) (actual time=0.001..0.00102 rows=1 loops=1323)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: 'Filter: (mc.company_type_id = ct.id) (cost=0.812 rows=3.24) (actual time=0.0126..0.0139
      rows=2.1 loops=441)'
    actual_rows: 2.1
    estimated_rows: 3.24
    q_error: 1.542857142857143
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=mi.movie_id)
      (cost=0.812 rows=3.24) (actual time=0.00597..0.0131 rows=10.1 loops=441)
    actual_rows: 10.1
    estimated_rows: 3.24
    q_error: 3.1172839506172836
  - node: "Filter: (cn.country_code = '[us]') (cost=0.0771 rows=0.1) (actual time=0.00143..0.00147
      rows=0.534 loops=924)"
    actual_rows: 0.534
    estimated_rows: 0.1
    q_error: 5.34
  - node: Single-row index lookup on cn using PRIMARY (id=mc.company_id) (cost=0.0771
      rows=1) (actual time=0.0012..0.00123 rows=1 loops=924)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 13c\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(cn.name) AS producing_company,\n       MIN(miidx.info) AS rating,\n\
    \       MIN(t.title) AS movie_about_winning\nFROM company_name AS cn,\n     company_type
    AS ct,\n     info_type AS it,\n     info_type AS it2,\n     kind_type AS kt,\n\
    \     movie_companies AS mc,\n     movie_info AS mi,\n     movie_info_idx AS miidx,\n\
    \     title AS t\nWHERE cn.country_code ='[us]'\n  AND ct.kind ='production companies'\n\
    \  AND it.info ='rating'\n  AND it2.info ='release dates'\n  AND kt.kind ='movie'\n\
    \  AND t.title != ''\n  AND (t.title LIKE 'Champion%'\n       OR t.title LIKE
    'Loser%')\n  AND mi.movie_id = t.id\n  AND it2.id = mi.info_type_id\n  AND kt.id
    = t.kind_id\n  AND mc.movie_id = t.id\n  AND cn.id = mc.company_id\n  AND ct.id
    = mc.company_type_id\n  AND miidx.movie_id = t.id\n  AND it.id = miidx.info_type_id\n\
    \  AND mi.movie_id = miidx.movie_id\n  AND mi.movie_id = mc.movie_id\n  AND miidx.movie_id
    = mc.movie_id"
  qep:
  - node: 'Aggregate: min(cn.`name`), min(miidx.info), min(t.title) (cost=18541 rows=1)
      (actual time=7377..7377 rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=18540 rows=2.31) (actual time=4738..7377 rows=53
      loops=1)
    actual_rows: 53.0
    estimated_rows: 2.31
    q_error: 22.943722943722943
  - node: Nested loop inner join (cost=18413 rows=23.1) (actual time=4737..7377 rows=162
      loops=1)
    actual_rows: 162.0
    estimated_rows: 23.1
    q_error: 7.012987012987012
  - node: Nested loop inner join (cost=18006 rows=7.13) (actual time=4737..7376 rows=90
      loops=1)
    actual_rows: 90.0
    estimated_rows: 7.13
    q_error: 12.622720897615709
  - node: Nested loop inner join (cost=16751 rows=71.3) (actual time=4737..7375 rows=270
      loops=1)
    actual_rows: 270.0
    estimated_rows: 71.3
    q_error: 3.7868162692847127
  - node: Nested loop inner join (cost=15496 rows=22) (actual time=4737..7375 rows=127
      loops=1)
    actual_rows: 127.0
    estimated_rows: 22.0
    q_error: 5.7727272727272725
  - node: Nested loop inner join (cost=7754 rows=440) (actual time=0.27..4268 rows=3.04e+6
      loops=1)
    actual_rows: 3040000.0
    estimated_rows: 440.0
    q_error: 6909.090909090909
  - node: Inner hash join (no condition) (cost=12.2 rows=0.161) (actual time=0.0469..0.0766
      rows=1 loops=1)
    actual_rows: 1.0
    estimated_rows: 0.161
    q_error: 6.211180124223603
  - node: "Filter: (it2.info = 'release dates') (cost=11.6 rows=11.3) (actual time=0.0077..0.0363
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 11.3
    q_error: 11.3
  - node: Table scan on it2 (cost=11.6 rows=113) (actual time=0.0054..0.029 rows=113
      loops=1)
    actual_rows: 113.0
    estimated_rows: 113.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: Inner hash join (no condition) (cost=1.6 rows=0.143) (actual time=0.034..0.0359
      rows=1 loops=1)
    actual_rows: 1.0
    estimated_rows: 0.143
    q_error: 6.993006993006993
  - node: "Filter: (kt.kind = 'movie') (cost=0.95 rows=1) (actual time=0.0046..0.0062
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on kt (cost=0.95 rows=7) (actual time=0.0045..0.0058 rows=7 loops=1)
    actual_rows: 7.0
    estimated_rows: 7.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: "Filter: (ct.kind = 'production companies') (cost=0.65 rows=1) (actual time=0.0202..0.023
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on ct (cost=0.65 rows=4) (actual time=0.0167..0.0201 rows=4 loops=1)
    actual_rows: 4.0
    estimated_rows: 4.0
    q_error: 1.0
  - node: Index lookup on mi using info_type_id_movie_info (info_type_id=it2.id) (cost=705
      rows=2725) (actual time=0.222..4131 rows=3.04e+6 loops=1)
    actual_rows: 3040000.0
    estimated_rows: 2725.0
    q_error: 1115.5963302752293
  - node: "Filter: ((t.kind_id = kt.id) and (t.title <> '') and ((t.title like 'Champion%')
      or (t.title like 'Loser%'))) (cost=0.25 rows=0.05) (actual time=949e-6..949e-6
      rows=41.8e-6 loops=3.04e+6)"
    actual_rows: 4.18e-05
    estimated_rows: 0.05
    q_error: 1196.1722488038279
  - node: Single-row index lookup on t using PRIMARY (id=mi.movie_id) (cost=0.25 rows=1)
      (actual time=739e-6..760e-6 rows=1 loops=3.04e+6)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on miidx using movie_id_movie_info_idx (movie_id=mi.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00336..0.00563 rows=2.13 loops=127)
    actual_rows: 2.13
    estimated_rows: 3.24
    q_error: 1.5211267605633805
  - node: "Filter: (it.info = 'rating') (cost=0.25 rows=0.1) (actual time=0.00116..0.00118
      rows=0.333 loops=270)"
    actual_rows: 0.333
    estimated_rows: 0.1
    q_error: 3.33
  - node: Single-row index lookup on it using PRIMARY (id=miidx.info_type_id) (cost=0.25
      rows=1) (actual time=902e-6..929e-6 rows=1 loops=270)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: 'Filter: (mc.company_type_id = ct.id) (cost=0.812 rows=3.24) (actual time=0.00998..0.011
      rows=1.8 loops=90)'
    actual_rows: 1.8
    estimated_rows: 3.24
    q_error: 1.8
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=mi.movie_id)
      (cost=0.812 rows=3.24) (actual time=0.00716..0.0104 rows=6.83 loops=90)
    actual_rows: 6.83
    estimated_rows: 3.24
    q_error: 2.1080246913580245
  - node: "Filter: (cn.country_code = '[us]') (cost=0.0771 rows=0.1) (actual time=0.00123..0.00125
      rows=0.327 loops=162)"
    actual_rows: 0.327
    estimated_rows: 0.1
    q_error: 3.27
  - node: Single-row index lookup on cn using PRIMARY (id=mc.company_id) (cost=0.0771
      rows=1) (actual time=0.00103..0.00105 rows=1 loops=162)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 13d\n-- This is \"The US Query\" (13d is \"The German Query\"\
    ) according to Leis et al. (2018)\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT
    YAML*/, ANALYZE)\nSELECT MIN(cn.name) AS producing_company,\n       MIN(miidx.info)
    AS rating,\n       MIN(t.title) AS movie\nFROM company_name AS cn,\n     company_type
    AS ct,\n     info_type AS it,\n     info_type AS it2,\n     kind_type AS kt,\n\
    \     movie_companies AS mc,\n     movie_info AS mi,\n     movie_info_idx AS miidx,\n\
    \     title AS t\nWHERE cn.country_code ='[us]'\n  AND ct.kind ='production companies'\n\
    \  AND it.info ='rating'\n  AND it2.info ='release dates'\n  AND kt.kind ='movie'\n\
    \  AND mi.movie_id = t.id\n  AND it2.id = mi.info_type_id\n  AND kt.id = t.kind_id\n\
    \  AND mc.movie_id = t.id\n  AND cn.id = mc.company_id\n  AND ct.id = mc.company_type_id\n\
    \  AND miidx.movie_id = t.id\n  AND it.id = miidx.info_type_id\n  AND mi.movie_id
    = miidx.movie_id\n  AND mi.movie_id = mc.movie_id\n  AND miidx.movie_id = mc.movie_id"
  qep:
  - node: 'Aggregate: min(cn.`name`), min(miidx.info), min(t.title) (cost=27675 rows=1)
      (actual time=25001..25001 rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=27674 rows=9.25) (actual time=4401..24840 rows=670390
      loops=1)
    actual_rows: 670390.0
    estimated_rows: 9.25
    q_error: 72474.5945945946
  - node: Nested loop inner join (cost=27166 rows=92.5) (actual time=4401..22647 rows=1.92e+6
      loops=1)
    actual_rows: 1920000.0
    estimated_rows: 92.5
    q_error: 20756.756756756757
  - node: Nested loop inner join (cost=25537 rows=28.5) (actual time=4401..14029 rows=724731
      loops=1)
    actual_rows: 724731.0
    estimated_rows: 28.5
    q_error: 25429.157894736843
  - node: Nested loop inner join (cost=20517 rows=285) (actual time=4401..11949 rows=2.18e+6
      loops=1)
    actual_rows: 2180000.0
    estimated_rows: 285.0
    q_error: 7649.122807017544
  - node: Nested loop inner join (cost=15496 rows=88) (actual time=4401..7731 rows=1.08e+6
      loops=1)
    actual_rows: 1080000.0
    estimated_rows: 88.0
    q_error: 12272.727272727272
  - node: Nested loop inner join (cost=7754 rows=440) (actual time=0.267..4531 rows=3.04e+6
      loops=1)
    actual_rows: 3040000.0
    estimated_rows: 440.0
    q_error: 6909.090909090909
  - node: Inner hash join (no condition) (cost=12.2 rows=0.161) (actual time=0.0463..0.0681
      rows=1 loops=1)
    actual_rows: 1.0
    estimated_rows: 0.161
    q_error: 6.211180124223603
  - node: "Filter: (it2.info = 'release dates') (cost=11.6 rows=11.3) (actual time=0.0074..0.0282
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 11.3
    q_error: 11.3
  - node: Table scan on it2 (cost=11.6 rows=113) (actual time=0.0052..0.0237 rows=113
      loops=1)
    actual_rows: 113.0
    estimated_rows: 113.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: Inner hash join (no condition) (cost=1.6 rows=0.143) (actual time=0.0335..0.0353
      rows=1 loops=1)
    actual_rows: 1.0
    estimated_rows: 0.143
    q_error: 6.993006993006993
  - node: "Filter: (kt.kind = 'movie') (cost=0.95 rows=1) (actual time=0.0042..0.0057
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on kt (cost=0.95 rows=7) (actual time=0.004..0.0051 rows=7 loops=1)
    actual_rows: 7.0
    estimated_rows: 7.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: "Filter: (ct.kind = 'production companies') (cost=0.65 rows=1) (actual time=0.0195..0.0224
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on ct (cost=0.65 rows=4) (actual time=0.0166..0.02 rows=4 loops=1)
    actual_rows: 4.0
    estimated_rows: 4.0
    q_error: 1.0
  - node: Index lookup on mi using info_type_id_movie_info (info_type_id=it2.id) (cost=705
      rows=2725) (actual time=0.22..4393 rows=3.04e+6 loops=1)
    actual_rows: 3040000.0
    estimated_rows: 2725.0
    q_error: 1115.5963302752293
  - node: 'Filter: (t.kind_id = kt.id) (cost=0.25 rows=0.2) (actual time=939e-6..961e-6
      rows=0.357 loops=3.04e+6)'
    actual_rows: 0.357
    estimated_rows: 0.2
    q_error: 1.785
  - node: Single-row index lookup on t using PRIMARY (id=mi.movie_id) (cost=0.25 rows=1)
      (actual time=794e-6..814e-6 rows=1 loops=3.04e+6)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on miidx using movie_id_movie_info_idx (movie_id=mi.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00208..0.00372 rows=2.02 loops=1.08e+6)
    actual_rows: 2.02
    estimated_rows: 3.24
    q_error: 1.603960396039604
  - node: "Filter: (it.info = 'rating') (cost=0.25 rows=0.1) (actual time=837e-6..857e-6
      rows=0.332 loops=2.18e+6)"
    actual_rows: 0.332
    estimated_rows: 0.1
    q_error: 3.32
  - node: Single-row index lookup on it using PRIMARY (id=miidx.info_type_id) (cost=0.25
      rows=1) (actual time=648e-6..668e-6 rows=1 loops=2.18e+6)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: 'Filter: (mc.company_type_id = ct.id) (cost=0.811 rows=3.24) (actual time=0.0101..0.0117
      rows=2.65 loops=724731)'
    actual_rows: 2.65
    estimated_rows: 3.24
    q_error: 1.2226415094339624
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=mi.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.004..0.011 rows=11.2 loops=724731)
    actual_rows: 11.2
    estimated_rows: 3.24
    q_error: 3.4567901234567895
  - node: "Filter: (cn.country_code = '[us]') (cost=0.0771 rows=0.1) (actual time=0.00102..0.00104
      rows=0.349 loops=1.92e+6)"
    actual_rows: 0.349
    estimated_rows: 0.1
    q_error: 3.4899999999999998
  - node: Single-row index lookup on cn using PRIMARY (id=mc.company_id) (cost=0.0771
      rows=1) (actual time=835e-6..856e-6 rows=1 loops=1.92e+6)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 14a\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(mi_idx.info) AS rating,\n       MIN(t.title) AS northern_dark_movie\n
    FROM info_type AS it1,\n     info_type AS it2,\n     keyword AS k,\n     kind_type
    AS kt,\n     movie_info AS mi,\n     movie_info_idx AS mi_idx,\n     movie_keyword
    AS mk,\n     title AS t\nWHERE it1.info = 'countries'\n  AND it2.info = 'rating'\n\
    \  AND k.keyword IN ('murder',\n                    'murder-in-title',\n     \
    \               'blood',\n                    'violence')\n  AND kt.kind = 'movie'\n\
    \  AND mi.info IN ('Sweden',\n                  'Norway',\n                  'Germany',\n\
    \                  'Denmark',\n                  'Swedish',\n                \
    \  'Denish',\n                  'Norwegian',\n                  'German',\n  \
    \                'USA',\n                  'American')\n  AND mi_idx.info < '8.5'\n\
    \  AND t.production_year > 2010\n  AND kt.id = t.kind_id\n  AND t.id = mi.movie_id\n\
    \  AND t.id = mk.movie_id\n  AND t.id = mi_idx.movie_id\n  AND mk.movie_id = mi.movie_id\n\
    \  AND mk.movie_id = mi_idx.movie_id\n  AND mi.movie_id = mi_idx.movie_id\n  AND
    k.id = mk.keyword_id\n  AND it1.id = mi.info_type_id\n  AND it2.id = mi_idx.info_type_id"
  qep:
  - node: 'Aggregate: min(mi_idx.info), min(t.title) (cost=13822 rows=1) (actual time=4059..4059
      rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=13816 rows=51.2) (actual time=894..4058 rows=761
      loops=1)
    actual_rows: 761.0
    estimated_rows: 51.2
    q_error: 14.86328125
  - node: Nested loop inner join (cost=13508 rows=128) (actual time=893..3759 rows=75669
      loops=1)
    actual_rows: 75669.0
    estimated_rows: 128.0
    q_error: 591.1640625
  - node: Nested loop inner join (cost=13175 rows=11.1) (actual time=893..3480 rows=8746
      loops=1)
    actual_rows: 8746.0
    estimated_rows: 11.1
    q_error: 787.927927927928
  - node: Nested loop inner join (cost=12886 rows=111) (actual time=893..3450 rows=25867
      loops=1)
    actual_rows: 25867.0
    estimated_rows: 111.0
    q_error: 233.03603603603602
  - node: Nested loop inner join (cost=12021 rows=103) (actual time=73.1..3280 rows=55882
      loops=1)
    actual_rows: 55882.0
    estimated_rows: 103.0
    q_error: 542.5436893203884
  - node: Nested loop inner join (cost=8018 rows=1540) (actual time=0.0622..2417 rows=614251
      loops=1)
    actual_rows: 614251.0
    estimated_rows: 1540.0
    q_error: 398.8642857142857
  - node: Inner hash join (no condition) (cost=12.5 rows=1.13) (actual time=0.0382..0.0664
      rows=1 loops=1)
    actual_rows: 1.0
    estimated_rows: 1.13
    q_error: 1.13
  - node: "Filter: (it1.info = 'countries') (cost=11.6 rows=11.3) (actual time=0.0079..0.0351
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 11.3
    q_error: 11.3
  - node: Table scan on it1 (cost=11.6 rows=113) (actual time=0.0065..0.0296 rows=113
      loops=1)
    actual_rows: 113.0
    estimated_rows: 113.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: "Filter: (kt.kind = 'movie') (cost=0.95 rows=1) (actual time=0.0185..0.0226
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on kt (cost=0.95 rows=7) (actual time=0.0171..0.0208 rows=7 loops=1)
    actual_rows: 7.0
    estimated_rows: 7.0
    q_error: 1.0
  - node: "Filter: (mi.info in ('Sweden','Norway','Germany','Denmark','Swedish','Denish','Norwegian','German','USA','American'))
      (cost=693 rows=1362) (actual time=0.0233..2388 rows=614251 loops=1)"
    actual_rows: 614251.0
    estimated_rows: 1362.0
    q_error: 450.99192364170335
  - node: Index lookup on mi using info_type_id_movie_info (info_type_id=it1.id) (cost=693
      rows=2725) (actual time=0.02..2124 rows=1.33e+6 loops=1)
    actual_rows: 1330000.0
    estimated_rows: 2725.0
    q_error: 488.07339449541286
  - node: 'Filter: ((t.kind_id = kt.id) and (t.production_year > 2010)) (cost=0.25
      rows=0.0667) (actual time=0.00131..0.00132 rows=0.091 loops=614251)'
    actual_rows: 0.091
    estimated_rows: 0.0667
    q_error: 1.3643178410794603
  - node: Single-row index lookup on t using PRIMARY (id=mi.movie_id) (cost=0.25 rows=1)
      (actual time=0.00111..0.00113 rows=1 loops=614251)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (mi_idx.info < '8.5') (cost=0.811 rows=1.08) (actual time=0.00233..0.00291
      rows=0.463 loops=55882)"
    actual_rows: 0.463
    estimated_rows: 1.08
    q_error: 2.3326133909287257
  - node: Index lookup on mi_idx using movie_id_movie_info_idx (movie_id=mi.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00222..0.00275 rows=0.478 loops=55882)
    actual_rows: 0.478
    estimated_rows: 3.24
    q_error: 6.778242677824268
  - node: "Filter: (it2.info = 'rating') (cost=0.25 rows=0.1) (actual time=0.00103..0.00105
      rows=0.338 loops=25867)"
    actual_rows: 0.338
    estimated_rows: 0.1
    q_error: 3.38
  - node: Single-row index lookup on it2 using PRIMARY (id=mi_idx.info_type_id) (cost=0.25
      rows=1) (actual time=802e-6..825e-6 rows=1 loops=25867)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mk using movie_id_movie_keyword (movie_id=mi.movie_id) (cost=2.9
      rows=11.5) (actual time=0.0231..0.0314 rows=8.65 loops=8746)
    actual_rows: 8.65
    estimated_rows: 11.5
    q_error: 1.329479768786127
  - node: "Filter: (k.keyword in ('murder','murder-in-title','blood','violence'))
      (cost=0.231 rows=0.4) (actual time=0.00387..0.00387 rows=0.0101 loops=75669)"
    actual_rows: 0.0101
    estimated_rows: 0.4
    q_error: 39.60396039603961
  - node: Single-row index lookup on k using PRIMARY (id=mk.keyword_id) (cost=0.231
      rows=1) (actual time=0.00359..0.00362 rows=1 loops=75669)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 14b\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(mi_idx.info) AS rating,\n       MIN(t.title) AS western_dark_production\n
    FROM info_type AS it1,\n     info_type AS it2,\n     keyword AS k,\n     kind_type
    AS kt,\n     movie_info AS mi,\n     movie_info_idx AS mi_idx,\n     movie_keyword
    AS mk,\n     title AS t\nWHERE it1.info = 'countries'\n  AND it2.info = 'rating'\n\
    \  AND k.keyword IN ('murder',\n                    'murder-in-title')\n  AND
    kt.kind = 'movie'\n  AND mi.info IN ('Sweden',\n                  'Norway',\n\
    \                  'Germany',\n                  'Denmark',\n                \
    \  'Swedish',\n                  'Denish',\n                  'Norwegian',\n \
    \                 'German',\n                  'USA',\n                  'American')\n\
    \  AND mi_idx.info > '6.0'\n  AND t.production_year > 2010\n  AND (t.title LIKE
    '%murder%'\n       OR t.title LIKE '%Murder%'\n       OR t.title LIKE '%Mord%')\n\
    \  AND kt.id = t.kind_id\n  AND t.id = mi.movie_id\n  AND t.id = mk.movie_id\n\
    \  AND t.id = mi_idx.movie_id\n  AND mk.movie_id = mi.movie_id\n  AND mk.movie_id
    = mi_idx.movie_id\n  AND mi.movie_id = mi_idx.movie_id\n  AND k.id = mk.keyword_id\n\
    \  AND it1.id = mi.info_type_id\n  AND it2.id = mi_idx.info_type_id"
  qep:
  - node: 'Aggregate: min(mi_idx.info), min(t.title) (cost=13370 rows=1) (actual time=3079..3079
      rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=13368 rows=19.2) (actual time=2076..3079 rows=1
      loops=1)
    actual_rows: 1.0
    estimated_rows: 19.2
    q_error: 19.2
  - node: Nested loop inner join (cost=13136 rows=96) (actual time=2076..3079 rows=4
      loops=1)
    actual_rows: 4.0
    estimated_rows: 96.0
    q_error: 24.0
  - node: Nested loop inner join (cost=12886 rows=8.32) (actual time=1998..3079 rows=2
      loops=1)
    actual_rows: 2.0
    estimated_rows: 8.32
    q_error: 4.16
  - node: Nested loop inner join (cost=12670 rows=83.2) (actual time=1992..3079 rows=5
      loops=1)
    actual_rows: 5.0
    estimated_rows: 83.2
    q_error: 16.64
  - node: Nested loop inner join (cost=12021 rows=77) (actual time=825..3079 rows=70
      loops=1)
    actual_rows: 70.0
    estimated_rows: 77.0
    q_error: 1.1
  - node: Nested loop inner join (cost=8018 rows=1540) (actual time=0.0626..2232 rows=614251
      loops=1)
    actual_rows: 614251.0
    estimated_rows: 1540.0
    q_error: 398.8642857142857
  - node: Inner hash join (no condition) (cost=12.5 rows=1.13) (actual time=0.0382..0.064
      rows=1 loops=1)
    actual_rows: 1.0
    estimated_rows: 1.13
    q_error: 1.13
  - node: "Filter: (it1.info = 'countries') (cost=11.6 rows=11.3) (actual time=0.0075..0.0322
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 11.3
    q_error: 11.3
  - node: Table scan on it1 (cost=11.6 rows=113) (actual time=0.0061..0.0266 rows=113
      loops=1)
    actual_rows: 113.0
    estimated_rows: 113.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: "Filter: (kt.kind = 'movie') (cost=0.95 rows=1) (actual time=0.0188..0.0228
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on kt (cost=0.95 rows=7) (actual time=0.0175..0.0211 rows=7 loops=1)
    actual_rows: 7.0
    estimated_rows: 7.0
    q_error: 1.0
  - node: "Filter: (mi.info in ('Sweden','Norway','Germany','Denmark','Swedish','Denish','Norwegian','German','USA','American'))
      (cost=693 rows=1362) (actual time=0.0237..2205 rows=614251 loops=1)"
    actual_rows: 614251.0
    estimated_rows: 1362.0
    q_error: 450.99192364170335
  - node: Index lookup on mi using info_type_id_movie_info (info_type_id=it1.id) (cost=693
      rows=2725) (actual time=0.0206..1949 rows=1.33e+6 loops=1)
    actual_rows: 1330000.0
    estimated_rows: 2725.0
    q_error: 488.07339449541286
  - node: "Filter: ((t.kind_id = kt.id) and (t.production_year > 2010) and ((t.title
      like '%murder%') or (t.title like '%Murder%') or (t.title like '%Mord%'))) (cost=0.25
      rows=0.05) (actual time=0.0013..0.0013 rows=114e-6 loops=614251)"
    actual_rows: 0.000114
    estimated_rows: 0.05
    q_error: 438.5964912280702
  - node: Single-row index lookup on t using PRIMARY (id=mi.movie_id) (cost=0.25 rows=1)
      (actual time=0.00105..0.00107 rows=1 loops=614251)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (mi_idx.info > '6.0') (cost=0.811 rows=1.08) (actual time=0.00826..0.00835
      rows=0.0714 loops=70)"
    actual_rows: 0.0714
    estimated_rows: 1.08
    q_error: 15.126050420168067
  - node: Index lookup on mi_idx using movie_id_movie_info_idx (movie_id=mi.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00704..0.00782 rows=0.686 loops=70)
    actual_rows: 0.686
    estimated_rows: 3.24
    q_error: 4.723032069970845
  - node: "Filter: (it2.info = 'rating') (cost=0.25 rows=0.1) (actual time=0.00494..0.00496
      rows=0.4 loops=5)"
    actual_rows: 0.4
    estimated_rows: 0.1
    q_error: 4.0
  - node: Single-row index lookup on it2 using PRIMARY (id=mi_idx.info_type_id) (cost=0.25
      rows=1) (actual time=0.0044..0.00442 rows=1 loops=5)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mk using movie_id_movie_keyword (movie_id=mi.movie_id) (cost=2.9
      rows=11.5) (actual time=0.0191..0.0204 rows=2 loops=2)
    actual_rows: 2.0
    estimated_rows: 11.5
    q_error: 5.75
  - node: "Filter: (k.keyword in ('murder','murder-in-title')) (cost=0.231 rows=0.2)
      (actual time=0.0181..0.0181 rows=0.25 loops=4)"
    actual_rows: 0.25
    estimated_rows: 0.2
    q_error: 1.25
  - node: Single-row index lookup on k using PRIMARY (id=mk.keyword_id) (cost=0.231
      rows=1) (actual time=0.0174..0.0174 rows=1 loops=4)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 14c\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(mi_idx.info) AS rating,\n       MIN(t.title) AS north_european_dark_production\n
    FROM info_type AS it1,\n     info_type AS it2,\n     keyword AS k,\n     kind_type
    AS kt,\n     movie_info AS mi,\n     movie_info_idx AS mi_idx,\n     movie_keyword
    AS mk,\n     title AS t\nWHERE it1.info = 'countries'\n  AND it2.info = 'rating'\n\
    \  AND k.keyword IS NOT NULL\n  AND k.keyword IN ('murder',\n                \
    \    'murder-in-title',\n                    'blood',\n                    'violence')\n\
    \  AND kt.kind IN ('movie',\n                  'episode')\n  AND mi.info IN ('Sweden',\n\
    \                  'Norway',\n                  'Germany',\n                 \
    \ 'Denmark',\n                  'Swedish',\n                  'Danish',\n    \
    \              'Norwegian',\n                  'German',\n                  'USA',\n\
    \                  'American')\n  AND mi_idx.info < '8.5'\n  AND t.production_year
    > 2005\n  AND kt.id = t.kind_id\n  AND t.id = mi.movie_id\n  AND t.id = mk.movie_id\n\
    \  AND t.id = mi_idx.movie_id\n  AND mk.movie_id = mi.movie_id\n  AND mk.movie_id
    = mi_idx.movie_id\n  AND mi.movie_id = mi_idx.movie_id\n  AND k.id = mk.keyword_id\n\
    \  AND it1.id = mi.info_type_id\n  AND it2.id = mi_idx.info_type_id"
  qep:
  - node: 'Aggregate: min(mi_idx.info), min(t.title) (cost=21914 rows=1) (actual time=8033..8033
      rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=21885 rows=293) (actual time=2833..8030 rows=4115
      loops=1)
    actual_rows: 4115.0
    estimated_rows: 293.0
    q_error: 14.044368600682594
  - node: Nested loop inner join (cost=21516 rows=731) (actual time=2828..6652 rows=460150
      loops=1)
    actual_rows: 460150.0
    estimated_rows: 731.0
    q_error: 629.4801641586868
  - node: Nested loop inner join (cost=20803 rows=63.4) (actual time=2828..5837 rows=44414
      loops=1)
    actual_rows: 44414.0
    estimated_rows: 63.4
    q_error: 700.5362776025237
  - node: Nested loop inner join (cost=20462 rows=634) (actual time=2828..5702 rows=133055
      loops=1)
    actual_rows: 133055.0
    estimated_rows: 634.0
    q_error: 209.86593059936908
  - node: Nested loop inner join (cost=18608 rows=586) (actual time=2828..5133 rows=165761
      loops=1)
    actual_rows: 165761.0
    estimated_rows: 586.0
    q_error: 282.86860068259386
  - node: Inner hash join (no condition) (cost=13879 rows=8798) (actual time=2818..3611
      rows=1.23e+6 loops=1)
    actual_rows: 1230000.0
    estimated_rows: 8798.0
    q_error: 139.80450102295976
  - node: "Filter: (kt.kind in ('movie','episode')) (cost=768e-6 rows=2) (actual time=0.0257..0.0343
      rows=2 loops=1)"
    actual_rows: 2.0
    estimated_rows: 2.0
    q_error: 1.0
  - node: Table scan on kt (cost=768e-6 rows=7) (actual time=0.0222..0.0281 rows=7
      loops=1)
    actual_rows: 7.0
    estimated_rows: 7.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: Nested loop inner join (cost=10789 rows=15396) (actual time=0.0557..2190
      rows=614251 loops=1)
    actual_rows: 614251.0
    estimated_rows: 15396.0
    q_error: 39.89679137438296
  - node: "Filter: (it1.info = 'countries') (cost=11.6 rows=11.3) (actual time=0.0249..0.0547
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 11.3
    q_error: 11.3
  - node: Table scan on it1 (cost=11.6 rows=113) (actual time=0.0214..0.0461 rows=113
      loops=1)
    actual_rows: 113.0
    estimated_rows: 113.0
    q_error: 1.0
  - node: "Filter: (mi.info in ('Sweden','Norway','Germany','Denmark','Swedish','Danish','Norwegian','German','USA','American'))
      (cost=693 rows=1362) (actual time=0.0301..2163 rows=614251 loops=1)"
    actual_rows: 614251.0
    estimated_rows: 1362.0
    q_error: 450.99192364170335
  - node: Index lookup on mi using info_type_id_movie_info (info_type_id=it1.id) (cost=693
      rows=2725) (actual time=0.0256..1918 rows=1.33e+6 loops=1)
    actual_rows: 1330000.0
    estimated_rows: 2725.0
    q_error: 488.07339449541286
  - node: 'Filter: ((t.kind_id = kt.id) and (t.production_year > 2005)) (cost=0.125
      rows=0.0667) (actual time=0.00115..0.00116 rows=0.135 loops=1.23e+6)'
    actual_rows: 0.135
    estimated_rows: 0.0667
    q_error: 2.0239880059970017
  - node: Single-row index lookup on t using PRIMARY (id=mi.movie_id) (cost=0.125
      rows=1) (actual time=980e-6..0.001 rows=1 loops=1.23e+6)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (mi_idx.info < '8.5') (cost=0.811 rows=1.08) (actual time=0.00242..0.00331
      rows=0.803 loops=165761)"
    actual_rows: 0.803
    estimated_rows: 1.08
    q_error: 1.3449564134495642
  - node: Index lookup on mi_idx using movie_id_movie_info_idx (movie_id=mi.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00231..0.00313 rows=0.838 loops=165761)
    actual_rows: 0.838
    estimated_rows: 3.24
    q_error: 3.866348448687351
  - node: "Filter: (it2.info = 'rating') (cost=0.125 rows=0.1) (actual time=879e-6..902e-6
      rows=0.334 loops=133055)"
    actual_rows: 0.334
    estimated_rows: 0.1
    q_error: 3.34
  - node: Single-row index lookup on it2 using PRIMARY (id=mi_idx.info_type_id) (cost=0.125
      rows=1) (actual time=687e-6..709e-6 rows=1 loops=133055)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mk using movie_id_movie_keyword (movie_id=mi.movie_id) (cost=2.89
      rows=11.5) (actual time=0.00932..0.0177 rows=10.4 loops=44414)
    actual_rows: 10.4
    estimated_rows: 11.5
    q_error: 1.1057692307692308
  - node: "Filter: (k.keyword in ('murder','murder-in-title','blood','violence'))
      (cost=0.116 rows=0.4) (actual time=0.00291..0.00291 rows=0.00894 loops=460150)"
    actual_rows: 0.00894
    estimated_rows: 0.4
    q_error: 44.742729306487696
  - node: Single-row index lookup on k using PRIMARY (id=mk.keyword_id) (cost=0.116
      rows=1) (actual time=0.00265..0.00268 rows=1 loops=460150)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 15a\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(mi.info) AS release_date,\n       MIN(t.title) AS internet_movie\n
    FROM aka_title AS at,\n     company_name AS cn,\n     company_type AS ct,\n  \
    \   info_type AS it1,\n     keyword AS k,\n     movie_companies AS mc,\n     movie_info
    AS mi,\n     movie_keyword AS mk,\n     title AS t\nWHERE cn.country_code = '[us]'\n\
    \  AND it1.info = 'release dates'\n  AND mc.note LIKE '%(200%)%'\n  AND mc.note
    LIKE '%(worldwide)%'\n  AND mi.note LIKE '%internet%'\n  AND mi.info LIKE 'USA:%
    200%'\n  AND t.production_year > 2000\n  AND t.id = at.movie_id\n  AND t.id =
    mi.movie_id\n  AND t.id = mk.movie_id\n  AND t.id = mc.movie_id\n  AND mk.movie_id
    = mi.movie_id\n  AND mk.movie_id = mc.movie_id\n  AND mk.movie_id = at.movie_id\n\
    \  AND mi.movie_id = mc.movie_id\n  AND mi.movie_id = at.movie_id\n  AND mc.movie_id
    = at.movie_id\n  AND k.id = mk.keyword_id\n  AND it1.id = mi.info_type_id\n  AND
    cn.id = mc.company_id\n  AND ct.id = mc.company_type_id"
  qep:
  - node: 'Aggregate: min(mi.info), min(t.title) (cost=11079 rows=1) (actual time=5116..5116
      rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=11078 rows=12.8) (actual time=274..5116 rows=328
      loops=1)
    actual_rows: 328.0
    estimated_rows: 12.8
    q_error: 25.625
  - node: Nested loop inner join (cost=11075 rows=12.8) (actual time=274..5115 rows=328
      loops=1)
    actual_rows: 328.0
    estimated_rows: 12.8
    q_error: 25.625
  - node: Nested loop inner join (cost=11071 rows=1.11) (actual time=174..5114 rows=57
      loops=1)
    actual_rows: 57.0
    estimated_rows: 1.11
    q_error: 51.35135135135135
  - node: Nested loop inner join (cost=11070 rows=0.633) (actual time=0.79..5008 rows=659
      loops=1)
    actual_rows: 659.0
    estimated_rows: 0.633
    q_error: 1041.0742496050552
  - node: Nested loop inner join (cost=11068 rows=6.33) (actual time=0.787..5004 rows=688
      loops=1)
    actual_rows: 688.0
    estimated_rows: 6.33
    q_error: 108.68878357030016
  - node: Nested loop inner join (cost=11065 rows=6.33) (actual time=0.784..5003 rows=688
      loops=1)
    actual_rows: 688.0
    estimated_rows: 6.33
    q_error: 108.68878357030016
  - node: Nested loop inner join (cost=10922 rows=127) (actual time=0.776..4986 rows=1749
      loops=1)
    actual_rows: 1749.0
    estimated_rows: 127.0
    q_error: 13.771653543307087
  - node: Nested loop inner join (cost=10789 rows=380) (actual time=0.769..4976 rows=1773
      loops=1)
    actual_rows: 1773.0
    estimated_rows: 380.0
    q_error: 4.66578947368421
  - node: "Filter: (it1.info = 'release dates') (cost=11.6 rows=11.3) (actual time=0.0162..0.0402
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 11.3
    q_error: 11.3
  - node: Table scan on it1 (cost=11.6 rows=113) (actual time=0.0113..0.0331 rows=113
      loops=1)
    actual_rows: 113.0
    estimated_rows: 113.0
    q_error: 1.0
  - node: "Filter: ((mi.note like '%internet%') and (mi.info like 'USA:% 200%')) (cost=682
      rows=33.6) (actual time=0.752..4976 rows=1773 loops=1)"
    actual_rows: 1773.0
    estimated_rows: 33.6
    q_error: 52.76785714285714
  - node: Index lookup on mi using info_type_id_movie_info (info_type_id=it1.id) (cost=682
      rows=2725) (actual time=0.0193..4630 rows=3.04e+6 loops=1)
    actual_rows: 3040000.0
    estimated_rows: 2725.0
    q_error: 1115.5963302752293
  - node: 'Filter: (t.production_year > 2000) (cost=0.25 rows=0.333) (actual time=0.00504..0.00513
      rows=0.986 loops=1773)'
    actual_rows: 0.986
    estimated_rows: 0.333
    q_error: 2.9609609609609606
  - node: Single-row index lookup on t using PRIMARY (id=mi.movie_id) (cost=0.25 rows=1)
      (actual time=0.00453..0.00456 rows=1 loops=1773)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: ((mc.note like '%(200%)%') and (mc.note like '%(worldwide)%'))
      (cost=0.811 rows=0.05) (actual time=0.00779..0.00965 rows=0.393 loops=1749)"
    actual_rows: 0.393
    estimated_rows: 0.05
    q_error: 7.86
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=mi.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00625..0.00879 rows=1.61 loops=1749)
    actual_rows: 1.61
    estimated_rows: 3.24
    q_error: 2.012422360248447
  - node: Single-row covering index lookup on ct using PRIMARY (id=mc.company_type_id)
      (cost=0.266 rows=1) (actual time=551e-6..580e-6 rows=1 loops=688)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (cn.country_code = '[us]') (cost=0.252 rows=0.1) (actual time=0.00502..0.00516
      rows=0.958 loops=688)"
    actual_rows: 0.958
    estimated_rows: 0.1
    q_error: 9.579999999999998
  - node: Single-row index lookup on cn using PRIMARY (id=mc.company_id) (cost=0.252
      rows=1) (actual time=0.00411..0.00415 rows=1 loops=688)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Covering index lookup on at using movie_id_aka_title (movie_id=mi.movie_id)
      (cost=1.28 rows=1.76) (actual time=0.161..0.161 rows=0.0865 loops=659)
    actual_rows: 0.0865
    estimated_rows: 1.76
    q_error: 20.346820809248555
  - node: Index lookup on mk using movie_id_movie_keyword (movie_id=mi.movie_id) (cost=3.92
      rows=11.5) (actual time=0.011..0.0155 rows=5.75 loops=57)
    actual_rows: 5.75
    estimated_rows: 11.5
    q_error: 2.0
  - node: Single-row covering index lookup on k using PRIMARY (id=mk.keyword_id) (cost=0.15
      rows=1) (actual time=0.00294..0.00296 rows=1 loops=328)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 15b\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(mi.info) AS release_date,\n       MIN(t.title) AS youtube_movie\nFROM
    aka_title AS at,\n     company_name AS cn,\n     company_type AS ct,\n     info_type
    AS it1,\n     keyword AS k,\n     movie_companies AS mc,\n     movie_info AS mi,\n\
    \     movie_keyword AS mk,\n     title AS t\nWHERE cn.country_code = '[us]'\n\
    \  AND cn.name = 'YouTube'\n  AND it1.info = 'release dates'\n  AND mc.note LIKE
    '%(200%)%'\n  AND mc.note LIKE '%(worldwide)%'\n  AND mi.note LIKE '%internet%'\n\
    \  AND mi.info LIKE 'USA:% 200%'\n  AND t.production_year BETWEEN 2005 AND 2010\n\
    \  AND t.id = at.movie_id\n  AND t.id = mi.movie_id\n  AND t.id = mk.movie_id\n\
    \  AND t.id = mc.movie_id\n  AND mk.movie_id = mi.movie_id\n  AND mk.movie_id
    = mc.movie_id\n  AND mk.movie_id = at.movie_id\n  AND mi.movie_id = mc.movie_id\n\
    \  AND mi.movie_id = at.movie_id\n  AND mc.movie_id = at.movie_id\n  AND k.id
    = mk.keyword_id\n  AND it1.id = mi.info_type_id\n  AND cn.id = mc.company_id\n\
    \  AND ct.id = mc.company_type_id"
  qep:
  - node: 'Aggregate: min(mi.info), min(t.title) (cost=10973 rows=1) (actual time=4862..4862
      rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=10972 rows=2.14) (actual time=4032..4861 rows=37
      loops=1)
    actual_rows: 37.0
    estimated_rows: 2.14
    q_error: 17.289719626168225
  - node: Nested loop inner join (cost=10972 rows=2.14) (actual time=4032..4861 rows=37
      loops=1)
    actual_rows: 37.0
    estimated_rows: 2.14
    q_error: 17.289719626168225
  - node: Nested loop inner join (cost=10971 rows=0.185) (actual time=2644..4861 rows=3
      loops=1)
    actual_rows: 3.0
    estimated_rows: 0.185
    q_error: 16.216216216216218
  - node: Nested loop inner join (cost=10971 rows=0.106) (actual time=17.6..4861 rows=74
      loops=1)
    actual_rows: 74.0
    estimated_rows: 0.106
    q_error: 698.1132075471698
  - node: Nested loop inner join (cost=10970 rows=2.11) (actual time=0.792..4858 rows=619
      loops=1)
    actual_rows: 619.0
    estimated_rows: 2.11
    q_error: 293.3649289099526
  - node: Nested loop inner join (cost=10969 rows=2.11) (actual time=0.788..4858 rows=619
      loops=1)
    actual_rows: 619.0
    estimated_rows: 2.11
    q_error: 293.3649289099526
  - node: Nested loop inner join (cost=10922 rows=42.2) (actual time=0.777..4844 rows=1590
      loops=1)
    actual_rows: 1590.0
    estimated_rows: 42.2
    q_error: 37.67772511848341
  - node: Nested loop inner join (cost=10789 rows=380) (actual time=0.769..4835 rows=1773
      loops=1)
    actual_rows: 1773.0
    estimated_rows: 380.0
    q_error: 4.66578947368421
  - node: "Filter: (it1.info = 'release dates') (cost=11.6 rows=11.3) (actual time=0.0223..0.0753
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 11.3
    q_error: 11.3
  - node: Table scan on it1 (cost=11.6 rows=113) (actual time=0.0177..0.06 rows=113
      loops=1)
    actual_rows: 113.0
    estimated_rows: 113.0
    q_error: 1.0
  - node: "Filter: ((mi.note like '%internet%') and (mi.info like 'USA:% 200%')) (cost=682
      rows=33.6) (actual time=0.746..4835 rows=1773 loops=1)"
    actual_rows: 1773.0
    estimated_rows: 33.6
    q_error: 52.76785714285714
  - node: Index lookup on mi using info_type_id_movie_info (info_type_id=it1.id) (cost=682
      rows=2725) (actual time=0.0218..4521 rows=3.04e+6 loops=1)
    actual_rows: 3040000.0
    estimated_rows: 2725.0
    q_error: 1115.5963302752293
  - node: 'Filter: (t.production_year between 2005 and 2010) (cost=0.25 rows=0.111)
      (actual time=0.0045..0.0046 rows=0.897 loops=1773)'
    actual_rows: 0.897
    estimated_rows: 0.111
    q_error: 8.08108108108108
  - node: Single-row index lookup on t using PRIMARY (id=mi.movie_id) (cost=0.25 rows=1)
      (actual time=0.00394..0.00397 rows=1 loops=1773)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: ((mc.note like '%(200%)%') and (mc.note like '%(worldwide)%'))
      (cost=0.811 rows=0.05) (actual time=0.00738..0.00851 rows=0.389 loops=1590)"
    actual_rows: 0.389
    estimated_rows: 0.05
    q_error: 7.78
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=mi.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00592..0.00781 rows=1.59 loops=1590)
    actual_rows: 1.59
    estimated_rows: 3.24
    q_error: 2.0377358490566038
  - node: Single-row covering index lookup on ct using PRIMARY (id=mc.company_type_id)
      (cost=0.297 rows=1) (actual time=441e-6..464e-6 rows=1 loops=619)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: ((cn.`name` = 'YouTube') and (cn.country_code = '[us]')) (cost=0.252
      rows=0.05) (actual time=0.00383..0.00384 rows=0.12 loops=619)"
    actual_rows: 0.12
    estimated_rows: 0.05
    q_error: 2.4
  - node: Single-row index lookup on cn using PRIMARY (id=mc.company_id) (cost=0.252
      rows=1) (actual time=0.00296..0.00299 rows=1 loops=619)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Covering index lookup on at using movie_id_aka_title (movie_id=mi.movie_id)
      (cost=2.27 rows=1.76) (actual time=0.00581..0.00586 rows=0.0405 loops=74)
    actual_rows: 0.0405
    estimated_rows: 1.76
    q_error: 43.45679012345679
  - node: Index lookup on mk using movie_id_movie_keyword (movie_id=mi.movie_id) (cost=9.11
      rows=11.5) (actual time=0.015..0.0374 rows=12.3 loops=3)
    actual_rows: 12.3
    estimated_rows: 11.5
    q_error: 1.0695652173913044
  - node: Single-row covering index lookup on k using PRIMARY (id=mk.keyword_id) (cost=0.189
      rows=1) (actual time=0.00672..0.00678 rows=1 loops=37)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 15c\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(mi.info) AS release_date,\n       MIN(t.title) AS modern_american_internet_movie\n
    FROM aka_title AS at,\n     company_name AS cn,\n     company_type AS ct,\n  \
    \   info_type AS it1,\n     keyword AS k,\n     movie_companies AS mc,\n     movie_info
    AS mi,\n     movie_keyword AS mk,\n     title AS t\nWHERE cn.country_code = '[us]'\n\
    \  AND it1.info = 'release dates'\n  AND mi.note LIKE '%internet%'\n  AND mi.info
    IS NOT NULL\n  AND (mi.info LIKE 'USA:% 199%'\n       OR mi.info LIKE 'USA:% 200%')\n\
    \  AND t.production_year > 1990\n  AND t.id = at.movie_id\n  AND t.id = mi.movie_id\n\
    \  AND t.id = mk.movie_id\n  AND t.id = mc.movie_id\n  AND mk.movie_id = mi.movie_id\n\
    \  AND mk.movie_id = mc.movie_id\n  AND mk.movie_id = at.movie_id\n  AND mi.movie_id
    = mc.movie_id\n  AND mi.movie_id = at.movie_id\n  AND mc.movie_id = at.movie_id\n\
    \  AND k.id = mk.keyword_id\n  AND it1.id = mi.info_type_id\n  AND cn.id = mc.company_id\n\
    \  AND ct.id = mc.company_type_id"
  qep:
  - node: 'Aggregate: min(mi.info), min(t.title) (cost=13298 rows=1) (actual time=4888..4888
      rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=13141 rows=1572) (actual time=11.3..4887 rows=2504
      loops=1)
    actual_rows: 2504.0
    estimated_rows: 1572.0
    q_error: 1.5928753180661577
  - node: Nested loop inner join (cost=12915 rows=1572) (actual time=11.3..4882 rows=2504
      loops=1)
    actual_rows: 2504.0
    estimated_rows: 1572.0
    q_error: 1.5928753180661577
  - node: Nested loop inner join (cost=12364 rows=136) (actual time=11.2..4877 rows=295
      loops=1)
    actual_rows: 295.0
    estimated_rows: 136.0
    q_error: 2.1691176470588234
  - node: Nested loop inner join (cost=12034 rows=1362) (actual time=11.2..4876 rows=417
      loops=1)
    actual_rows: 417.0
    estimated_rows: 1362.0
    q_error: 3.2661870503597124
  - node: Nested loop inner join (cost=11704 rows=1362) (actual time=11.2..4875 rows=417
      loops=1)
    actual_rows: 417.0
    estimated_rows: 1362.0
    q_error: 3.2661870503597124
  - node: Nested loop inner join (cost=11227 rows=420) (actual time=11.2..4874 rows=123
      loops=1)
    actual_rows: 123.0
    estimated_rows: 420.0
    q_error: 3.4146341463414633
  - node: Nested loop inner join (cost=11040 rows=239) (actual time=0.928..4802 rows=1784
      loops=1)
    actual_rows: 1784.0
    estimated_rows: 239.0
    q_error: 7.464435146443515
  - node: Nested loop inner join (cost=10789 rows=718) (actual time=0.914..4793 rows=1785
      loops=1)
    actual_rows: 1785.0
    estimated_rows: 718.0
    q_error: 2.486072423398329
  - node: "Filter: (it1.info = 'release dates') (cost=11.6 rows=11.3) (actual time=0.0438..0.0806
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 11.3
    q_error: 11.3
  - node: Table scan on it1 (cost=11.6 rows=113) (actual time=0.0347..0.067 rows=113
      loops=1)
    actual_rows: 113.0
    estimated_rows: 113.0
    q_error: 1.0
  - node: "Filter: ((mi.note like '%internet%') and ((mi.info like 'USA:% 199%') or
      (mi.info like 'USA:% 200%'))) (cost=682 rows=63.5) (actual time=0.869..4793
      rows=1785 loops=1)"
    actual_rows: 1785.0
    estimated_rows: 63.5
    q_error: 28.11023622047244
  - node: Index lookup on mi using info_type_id_movie_info (info_type_id=it1.id) (cost=682
      rows=2725) (actual time=0.0616..4475 rows=3.04e+6 loops=1)
    actual_rows: 3040000.0
    estimated_rows: 2725.0
    q_error: 1115.5963302752293
  - node: 'Filter: (t.production_year > 1990) (cost=0.25 rows=0.333) (actual time=0.00433..0.00443
      rows=0.999 loops=1785)'
    actual_rows: 0.999
    estimated_rows: 0.333
    q_error: 3.0
  - node: Single-row index lookup on t using PRIMARY (id=mi.movie_id) (cost=0.25 rows=1)
      (actual time=0.0039..0.00394 rows=1 loops=1785)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Covering index lookup on at using movie_id_aka_title (movie_id=mi.movie_id)
      (cost=0.607 rows=1.76) (actual time=0.0401..0.0402 rows=0.0689 loops=1784)
    actual_rows: 0.0689
    estimated_rows: 1.76
    q_error: 25.544267053701017
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=mi.movie_id)
      (cost=0.812 rows=3.24) (actual time=0.00902..0.0107 rows=3.39 loops=123)
    actual_rows: 3.39
    estimated_rows: 3.24
    q_error: 1.0462962962962963
  - node: Single-row covering index lookup on ct using PRIMARY (id=mc.company_type_id)
      (cost=0.142 rows=1) (actual time=974e-6..997e-6 rows=1 loops=417)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (cn.country_code = '[us]') (cost=0.142 rows=0.1) (actual time=0.0022..0.00225
      rows=0.707 loops=417)"
    actual_rows: 0.707
    estimated_rows: 0.1
    q_error: 7.069999999999999
  - node: Single-row index lookup on cn using PRIMARY (id=mc.company_id) (cost=0.142
      rows=1) (actual time=0.00175..0.00178 rows=1 loops=417)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mk using movie_id_movie_keyword (movie_id=mi.movie_id) (cost=2.89
      rows=11.5) (actual time=0.0133..0.0188 rows=8.49 loops=295)
    actual_rows: 8.49
    estimated_rows: 11.5
    q_error: 1.3545347467608952
  - node: Single-row covering index lookup on k using PRIMARY (id=mk.keyword_id) (cost=0.044
      rows=1) (actual time=0.00183..0.00185 rows=1 loops=2504)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 15d\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(at.title) AS aka_title,\n       MIN(t.title) AS internet_movie_title\n
    FROM aka_title AS at,\n     company_name AS cn,\n     company_type AS ct,\n  \
    \   info_type AS it1,\n     keyword AS k,\n     movie_companies AS mc,\n     movie_info
    AS mi,\n     movie_keyword AS mk,\n     title AS t\nWHERE cn.country_code = '[us]'\n\
    \  AND it1.info = 'release dates'\n  AND mi.note LIKE '%internet%'\n  AND t.production_year
    > 1990\n  AND t.id = at.movie_id\n  AND t.id = mi.movie_id\n  AND t.id = mk.movie_id\n\
    \  AND t.id = mc.movie_id\n  AND mk.movie_id = mi.movie_id\n  AND mk.movie_id
    = mc.movie_id\n  AND mk.movie_id = at.movie_id\n  AND mi.movie_id = mc.movie_id\n\
    \  AND mi.movie_id = at.movie_id\n  AND mc.movie_id = at.movie_id\n  AND k.id
    = mk.keyword_id\n  AND it1.id = mi.info_type_id\n  AND cn.id = mc.company_id\n\
    \  AND ct.id = mc.company_type_id"
  qep:
  - node: 'Aggregate: min(`at`.title), min(t.title) (cost=21033 rows=1) (actual time=5047..5047
      rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=20283 rows=7492) (actual time=11.7..5045 rows=11580
      loops=1)
    actual_rows: 11580.0
    estimated_rows: 7492.0
    q_error: 1.5456486919380672
  - node: Nested loop inner join (cost=19205 rows=7492) (actual time=11.7..5028 rows=11580
      loops=1)
    actual_rows: 11580.0
    estimated_rows: 7492.0
    q_error: 1.5456486919380672
  - node: Nested loop inner join (cost=16583 rows=649) (actual time=11.6..5012 rows=886
      loops=1)
    actual_rows: 886.0
    estimated_rows: 649.0
    q_error: 1.3651771956856702
  - node: Nested loop inner join (cost=15869 rows=370) (actual time=0.082..4875 rows=9869
      loops=1)
    actual_rows: 9869.0
    estimated_rows: 370.0
    q_error: 26.67297297297297
  - node: Nested loop inner join (cost=14575 rows=3698) (actual time=0.0791..4847
      rows=14395 loops=1)
    actual_rows: 14395.0
    estimated_rows: 3698.0
    q_error: 3.892644672796106
  - node: Nested loop inner join (cost=13280 rows=3698) (actual time=0.0757..4835
      rows=14395 loops=1)
    actual_rows: 14395.0
    estimated_rows: 3698.0
    q_error: 3.892644672796106
  - node: Nested loop inner join (cost=11986 rows=1140) (actual time=0.0661..4774
      rows=10671 loops=1)
    actual_rows: 10671.0
    estimated_rows: 1140.0
    q_error: 9.360526315789473
  - node: Nested loop inner join (cost=10789 rows=3421) (actual time=0.0595..4745
      rows=10688 loops=1)
    actual_rows: 10688.0
    estimated_rows: 3421.0
    q_error: 3.124232680502777
  - node: "Filter: (it1.info = 'release dates') (cost=11.6 rows=11.3) (actual time=0.0238..0.0475
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 11.3
    q_error: 11.3
  - node: Table scan on it1 (cost=11.6 rows=113) (actual time=0.0186..0.0398 rows=113
      loops=1)
    actual_rows: 113.0
    estimated_rows: 113.0
    q_error: 1.0
  - node: "Filter: (mi.note like '%internet%') (cost=684 rows=303) (actual time=0.0348..4744
      rows=10688 loops=1)"
    actual_rows: 10688.0
    estimated_rows: 303.0
    q_error: 35.273927392739274
  - node: Index lookup on mi using info_type_id_movie_info (info_type_id=it1.id) (cost=684
      rows=2725) (actual time=0.0219..4462 rows=3.04e+6 loops=1)
    actual_rows: 3040000.0
    estimated_rows: 2725.0
    q_error: 1115.5963302752293
  - node: 'Filter: (t.production_year > 1990) (cost=0.25 rows=0.333) (actual time=0.00246..0.00253
      rows=0.998 loops=10688)'
    actual_rows: 0.998
    estimated_rows: 0.333
    q_error: 2.9969969969969967
  - node: Single-row index lookup on t using PRIMARY (id=mi.movie_id) (cost=0.25 rows=1)
      (actual time=0.00225..0.00227 rows=1 loops=10688)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=mi.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00491..0.00551 rows=1.35 loops=10671)
    actual_rows: 1.35
    estimated_rows: 3.24
    q_error: 2.4
  - node: Single-row covering index lookup on ct using PRIMARY (id=mc.company_type_id)
      (cost=0.25 rows=1) (actual time=608e-6..630e-6 rows=1 loops=14395)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (cn.country_code = '[us]') (cost=0.25 rows=0.1) (actual time=0.00173..0.00178
      rows=0.686 loops=14395)"
    actual_rows: 0.686
    estimated_rows: 0.1
    q_error: 6.86
  - node: Single-row index lookup on cn using PRIMARY (id=mc.company_id) (cost=0.25
      rows=1) (actual time=0.00145..0.00148 rows=1 loops=14395)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on at using movie_id_aka_title (movie_id=mi.movie_id) (cost=1.76
      rows=1.76) (actual time=0.0134..0.0138 rows=0.0898 loops=9869)
    actual_rows: 0.0898
    estimated_rows: 1.76
    q_error: 19.599109131403118
  - node: Index lookup on mk using movie_id_movie_keyword (movie_id=mi.movie_id) (cost=2.89
      rows=11.5) (actual time=0.0109..0.0175 rows=13.1 loops=886)
    actual_rows: 13.1
    estimated_rows: 11.5
    q_error: 1.1391304347826086
  - node: Single-row covering index lookup on k using PRIMARY (id=mk.keyword_id) (cost=0.0439
      rows=1) (actual time=0.00136..0.00138 rows=1 loops=11580)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 16a\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(an.name) AS cool_actor_pseudonym,\n       MIN(t.title) AS series_named_after_char\n
    FROM aka_name AS an,\n     cast_info AS ci,\n     company_name AS cn,\n     keyword
    AS k,\n     movie_companies AS mc,\n     movie_keyword AS mk,\n     name AS n,\n\
    \     title AS t\nWHERE cn.country_code ='[us]'\n  AND k.keyword ='character-name-in-title'\n\
    \  AND t.episode_nr >= 50\n  AND t.episode_nr < 100\n  AND an.person_id = n.id\n\
    \  AND n.id = ci.person_id\n  AND ci.movie_id = t.id\n  AND t.id = mk.movie_id\n\
    \  AND mk.keyword_id = k.id\n  AND t.id = mc.movie_id\n  AND mc.company_id = cn.id\n\
    \  AND an.person_id = ci.person_id\n  AND ci.movie_id = mc.movie_id\n  AND ci.movie_id
    = mk.movie_id\n  AND mc.movie_id = mk.movie_id"
  qep:
  - node: 'Aggregate: min(an.`name`), min(t.title) (cost=940885 rows=1) (actual time=4023..4023
      rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=870255 rows=706299) (actual time=1.48..4023
      rows=385 loops=1)
    actual_rows: 385.0
    estimated_rows: 706299.0
    q_error: 1834.5428571428572
  - node: Nested loop inner join (cost=623050 rows=470137) (actual time=1.46..4018
      rows=323 loops=1)
    actual_rows: 323.0
    estimated_rows: 470137.0
    q_error: 1455.5325077399382
  - node: Nested loop inner join (cost=565852 rows=470137) (actual time=1.37..4016
      rows=323 loops=1)
    actual_rows: 323.0
    estimated_rows: 470137.0
    q_error: 1455.5325077399382
  - node: Nested loop inner join (cost=401304 rows=30395) (actual time=1.3..4004 rows=25
      loops=1)
    actual_rows: 25.0
    estimated_rows: 30395.0
    q_error: 1215.8
  - node: Nested loop inner join (cost=294923 rows=303945) (actual time=1.28..4001
      rows=1000 loops=1)
    actual_rows: 1000.0
    estimated_rows: 303945.0
    q_error: 303.945
  - node: Nested loop inner join (cost=188542 rows=26339) (actual time=0.832..3984
      rows=7622 loops=1)
    actual_rows: 7622.0
    estimated_rows: 26339.0
    q_error: 3.4556546838100237
  - node: Nested loop inner join (cost=105559 rows=237095) (actual time=0.49..2490
      rows=1.15e+6 loops=1)
    actual_rows: 1150000.0
    estimated_rows: 237095.0
    q_error: 4.850376431388262
  - node: "Filter: (cn.country_code = '[us]') (cost=22575 rows=22006) (actual time=0.0669..77.1
      rows=84843 loops=1)"
    actual_rows: 84843.0
    estimated_rows: 22006.0
    q_error: 3.855448514041625
  - node: Table scan on cn (cost=22575 rows=220062) (actual time=0.0652..56.9 rows=234997
      loops=1)
    actual_rows: 234997.0
    estimated_rows: 220062.0
    q_error: 1.0678672374149103
  - node: Index lookup on mc using company_id_movie_companies (company_id=cn.id) (cost=2.69
      rows=10.8) (actual time=0.0123..0.0278 rows=13.6 loops=84843)
    actual_rows: 13.6
    estimated_rows: 10.8
    q_error: 1.259259259259259
  - node: 'Filter: ((t.episode_nr >= 50) and (t.episode_nr < 100)) (cost=0.25 rows=0.111)
      (actual time=0.00122..0.00122 rows=0.00661 loops=1.15e+6)'
    actual_rows: 0.00661
    estimated_rows: 0.111
    q_error: 16.792738275340394
  - node: Single-row index lookup on t using PRIMARY (id=mc.movie_id) (cost=0.25 rows=1)
      (actual time=0.00106..0.00108 rows=1 loops=1.15e+6)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mk using movie_id_movie_keyword (movie_id=mc.movie_id) (cost=2.89
      rows=11.5) (actual time=0.00207..0.00211 rows=0.131 loops=7622)
    actual_rows: 0.131
    estimated_rows: 11.5
    q_error: 87.78625954198473
  - node: "Filter: (k.keyword = 'character-name-in-title') (cost=0.25 rows=0.1) (actual
      time=0.00298..0.00298 rows=0.025 loops=1000)"
    actual_rows: 0.025
    estimated_rows: 0.1
    q_error: 4.0
  - node: Single-row index lookup on k using PRIMARY (id=mk.keyword_id) (cost=0.25
      rows=1) (actual time=0.00264..0.00266 rows=1 loops=1000)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on ci using movie_id_cast_info (movie_id=mc.movie_id) (cost=3.87
      rows=15.5) (actual time=0.438..0.465 rows=12.9 loops=25)
    actual_rows: 12.9
    estimated_rows: 15.5
    q_error: 1.2015503875968991
  - node: Single-row covering index lookup on n using PRIMARY (id=ci.person_id) (cost=0.0217
      rows=1) (actual time=0.0055..0.00552 rows=1 loops=323)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on an using person_id_aka_name (person_id=ci.person_id) (cost=0.376
      rows=1.5) (actual time=0.0145..0.0155 rows=1.19 loops=323)
    actual_rows: 1.19
    estimated_rows: 1.5
    q_error: 1.2605042016806722

- query: "-- JOB Query 16b\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(an.name) AS cool_actor_pseudonym,\n       MIN(t.title) AS series_named_after_char\n
    FROM aka_name AS an,\n     cast_info AS ci,\n     company_name AS cn,\n     keyword
    AS k,\n     movie_companies AS mc,\n     movie_keyword AS mk,\n     name AS n,\n\
    \     title AS t\nWHERE cn.country_code ='[us]'\n  AND k.keyword ='character-name-in-title'\n\
    \  AND an.person_id = n.id\n  AND n.id = ci.person_id\n  AND ci.movie_id = t.id\n\
    \  AND t.id = mk.movie_id\n  AND mk.keyword_id = k.id\n  AND t.id = mc.movie_id\n\
    \  AND mc.company_id = cn.id\n  AND an.person_id = ci.person_id\n  AND ci.movie_id
    = mc.movie_id\n  AND ci.movie_id = mk.movie_id\n  AND mc.movie_id = mk.movie_id"
  qep:
  - node: 'Aggregate: min(an.`name`), min(t.title) (cost=5.28e+6 rows=1) (actual time=28445..28445
      rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=4.82e+6 rows=4.55e+6) (actual time=0.788..27704
      rows=3.71e+6 loops=1)
    actual_rows: 3710000.0
    estimated_rows: 4550000.0
    q_error: 1.2264150943396226
  - node: Nested loop inner join (cost=3.23e+6 rows=3.03e+6) (actual time=0.774..15861
      rows=2.83e+6 loops=1)
    actual_rows: 2830000.0
    estimated_rows: 3030000.0
    q_error: 1.0706713780918728
  - node: Nested loop inner join (cost=2.69e+6 rows=3.03e+6) (actual time=0.766..12080
      rows=2.83e+6 loops=1)
    actual_rows: 2830000.0
    estimated_rows: 3030000.0
    q_error: 1.0706713780918728
  - node: Nested loop inner join (cost=1.63e+6 rows=195857) (actual time=0.157..888
      rows=68316 loops=1)
    actual_rows: 68316.0
    estimated_rows: 195857.0
    q_error: 2.866927220563265
  - node: Nested loop inner join (cost=1.6e+6 rows=195857) (actual time=0.153..818
      rows=68316 loops=1)
    actual_rows: 68316.0
    estimated_rows: 195857.0
    q_error: 2.866927220563265
  - node: Nested loop inner join (cost=910811 rows=1.96e+6) (actual time=0.136..529
      rows=148552 loops=1)
    actual_rows: 148552.0
    estimated_rows: 1960000.0
    q_error: 13.19403306586246
  - node: Nested loop inner join (cost=225312 rows=603829) (actual time=0.124..190
      rows=41840 loops=1)
    actual_rows: 41840.0
    estimated_rows: 603829.0
    q_error: 14.43185946462715
  - node: "Filter: (k.keyword = 'character-name-in-title') (cost=13972 rows=13804)
      (actual time=0.063..67.3 rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 13804.0
    q_error: 13804.0
  - node: Table scan on k (cost=13972 rows=138037) (actual time=0.0139..58.8 rows=134170
      loops=1)
    actual_rows: 134170.0
    estimated_rows: 138037.0
    q_error: 1.0288216441827531
  - node: Index lookup on mk using keyword_id_movie_keyword (keyword_id=k.id) (cost=10.9
      rows=43.7) (actual time=0.0604..120 rows=41840 loops=1)
    actual_rows: 41840.0
    estimated_rows: 43.7
    q_error: 957.437070938215
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=mk.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00522..0.0078 rows=3.55 loops=41840)
    actual_rows: 3.55
    estimated_rows: 3.24
    q_error: 1.095679012345679
  - node: "Filter: (cn.country_code = '[us]') (cost=0.25 rows=0.1) (actual time=0.00175..0.00179
      rows=0.46 loops=148552)"
    actual_rows: 0.46
    estimated_rows: 0.1
    q_error: 4.6
  - node: Single-row index lookup on cn using PRIMARY (id=mc.company_id) (cost=0.25
      rows=1) (actual time=0.00147..0.00149 rows=1 loops=148552)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Single-row index lookup on t using PRIMARY (id=mk.movie_id) (cost=0.0771
      rows=1) (actual time=832e-6..854e-6 rows=1 loops=68316)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on ci using movie_id_cast_info (movie_id=mk.movie_id) (cost=3.87
      rows=15.5) (actual time=0.0737..0.162 rows=41.5 loops=68316)
    actual_rows: 41.5
    estimated_rows: 15.5
    q_error: 2.6774193548387095
  - node: Single-row covering index lookup on n using PRIMARY (id=ci.person_id) (cost=0.0771
      rows=1) (actual time=0.00118..0.0012 rows=1 loops=2.83e+6)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on an using person_id_aka_name (person_id=ci.person_id) (cost=0.376
      rows=1.5) (actual time=0.0028..0.00399 rows=1.31 loops=2.83e+6)
    actual_rows: 1.31
    estimated_rows: 1.5
    q_error: 1.1450381679389312

- query: "-- JOB Query 16c\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(an.name) AS cool_actor_pseudonym,\n       MIN(t.title) AS series_named_after_char\n
    FROM aka_name AS an,\n     cast_info AS ci,\n     company_name AS cn,\n     keyword
    AS k,\n     movie_companies AS mc,\n     movie_keyword AS mk,\n     name AS n,\n\
    \     title AS t\nWHERE cn.country_code ='[us]'\n  AND k.keyword ='character-name-in-title'\n\
    \  AND t.episode_nr < 100\n  AND an.person_id = n.id\n  AND n.id = ci.person_id\n\
    \  AND ci.movie_id = t.id\n  AND t.id = mk.movie_id\n  AND mk.keyword_id = k.id\n\
    \  AND t.id = mc.movie_id\n  AND mc.company_id = cn.id\n  AND an.person_id = ci.person_id\n\
    \  AND ci.movie_id = mc.movie_id\n  AND ci.movie_id = mk.movie_id\n  AND mc.movie_id
    = mk.movie_id"
  qep:
  - node: 'Aggregate: min(an.`name`), min(t.title) (cost=2.11e+6 rows=1) (actual time=1741..1741
      rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=1.96e+6 rows=1.52e+6) (actual time=0.435..1688
      rows=319932 loops=1)
    actual_rows: 319932.0
    estimated_rows: 1520000.0
    q_error: 4.751009589537777
  - node: Nested loop inner join (cost=1.43e+6 rows=1.01e+6) (actual time=0.421..883
      rows=221609 loops=1)
    actual_rows: 221609.0
    estimated_rows: 1010000.0
    q_error: 4.557576632717986
  - node: Nested loop inner join (cost=1.25e+6 rows=1.01e+6) (actual time=0.417..660
      rows=221609 loops=1)
    actual_rows: 221609.0
    estimated_rows: 1010000.0
    q_error: 4.557576632717986
  - node: Nested loop inner join (cost=893606 rows=65279) (actual time=0.375..234
      rows=8538 loops=1)
    actual_rows: 8538.0
    estimated_rows: 65279.0
    q_error: 7.6457015694542045
  - node: Nested loop inner join (cost=665129 rows=652791) (actual time=0.224..218
      rows=11406 loops=1)
    actual_rows: 11406.0
    estimated_rows: 652791.0
    q_error: 57.23224618621778
  - node: Nested loop inner join (cost=436652 rows=201256) (actual time=0.175..187
      rows=6926 loops=1)
    actual_rows: 6926.0
    estimated_rows: 201256.0
    q_error: 29.0580421599769
  - node: Nested loop inner join (cost=225312 rows=603829) (actual time=0.159..122
      rows=41840 loops=1)
    actual_rows: 41840.0
    estimated_rows: 603829.0
    q_error: 14.43185946462715
  - node: "Filter: (k.keyword = 'character-name-in-title') (cost=13972 rows=13804)
      (actual time=0.0665..63.8 rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 13804.0
    q_error: 13804.0
  - node: Table scan on k (cost=13972 rows=138037) (actual time=0.0162..56.2 rows=134170
      loops=1)
    actual_rows: 134170.0
    estimated_rows: 138037.0
    q_error: 1.0288216441827531
  - node: Index lookup on mk using keyword_id_movie_keyword (keyword_id=k.id) (cost=10.9
      rows=43.7) (actual time=0.0912..56.1 rows=41840 loops=1)
    actual_rows: 41840.0
    estimated_rows: 43.7
    q_error: 957.437070938215
  - node: 'Filter: (t.episode_nr < 100) (cost=0.25 rows=0.333) (actual time=0.00145..0.00146
      rows=0.166 loops=41840)'
    actual_rows: 0.166
    estimated_rows: 0.333
    q_error: 2.0060240963855422
  - node: Single-row index lookup on t using PRIMARY (id=mk.movie_id) (cost=0.25 rows=1)
      (actual time=0.00126..0.00129 rows=1 loops=41840)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=mk.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00356..0.00422 rows=1.65 loops=6926)
    actual_rows: 1.65
    estimated_rows: 3.24
    q_error: 1.9636363636363638
  - node: "Filter: (cn.country_code = '[us]') (cost=0.25 rows=0.1) (actual time=0.0012..0.00125
      rows=0.749 loops=11406)"
    actual_rows: 0.749
    estimated_rows: 0.1
    q_error: 7.489999999999999
  - node: Single-row index lookup on cn using PRIMARY (id=mc.company_id) (cost=0.25
      rows=1) (actual time=959e-6..979e-6 rows=1 loops=11406)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on ci using movie_id_cast_info (movie_id=mk.movie_id) (cost=3.87
      rows=15.5) (actual time=0.0269..0.0487 rows=26 loops=8538)
    actual_rows: 26.0
    estimated_rows: 15.5
    q_error: 1.6774193548387097
  - node: Single-row covering index lookup on n using PRIMARY (id=ci.person_id) (cost=0.0771
      rows=1) (actual time=870e-6..889e-6 rows=1 loops=221609)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on an using person_id_aka_name (person_id=ci.person_id) (cost=0.376
      rows=1.5) (actual time=0.00241..0.00347 rows=1.44 loops=221609)
    actual_rows: 1.44
    estimated_rows: 1.5
    q_error: 1.0416666666666667

- query: "-- JOB Query 16d\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(an.name) AS cool_actor_pseudonym,\n       MIN(t.title) AS series_named_after_char\n
    FROM aka_name AS an,\n     cast_info AS ci,\n     company_name AS cn,\n     keyword
    AS k,\n     movie_companies AS mc,\n     movie_keyword AS mk,\n     name AS n,\n\
    \     title AS t\nWHERE cn.country_code ='[us]'\n  AND k.keyword ='character-name-in-title'\n\
    \  AND t.episode_nr >= 5\n  AND t.episode_nr < 100\n  AND an.person_id = n.id\n\
    \  AND n.id = ci.person_id\n  AND ci.movie_id = t.id\n  AND t.id = mk.movie_id\n\
    \  AND mk.keyword_id = k.id\n  AND t.id = mc.movie_id\n  AND mc.company_id = cn.id\n\
    \  AND an.person_id = ci.person_id\n  AND ci.movie_id = mc.movie_id\n  AND ci.movie_id
    = mk.movie_id\n  AND mc.movie_id = mk.movie_id"
  qep:
  - node: 'Aggregate: min(an.`name`), min(t.title) (cost=940885 rows=1) (actual time=7750..7750
      rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=870255 rows=706299) (actual time=1.01..7704
      rows=249455 loops=1)
    actual_rows: 249455.0
    estimated_rows: 706299.0
    q_error: 2.8313683830751035
  - node: Nested loop inner join (cost=623050 rows=470137) (actual time=1..6908 rows=169273
      loops=1)
    actual_rows: 169273.0
    estimated_rows: 470137.0
    q_error: 2.7773891878799337
  - node: Nested loop inner join (cost=565852 rows=470137) (actual time=0.996..6680
      rows=169273 loops=1)
    actual_rows: 169273.0
    estimated_rows: 470137.0
    q_error: 2.7773891878799337
  - node: Nested loop inner join (cost=401304 rows=30395) (actual time=0.939..6197
      rows=6766 loops=1)
    actual_rows: 6766.0
    estimated_rows: 30395.0
    q_error: 4.492314513745197
  - node: Nested loop inner join (cost=294923 rows=303945) (actual time=0.93..4707
      rows=563795 loops=1)
    actual_rows: 563795.0
    estimated_rows: 303945.0
    q_error: 1.8549244106664036
  - node: Nested loop inner join (cost=188542 rows=26339) (actual time=0.107..3428
      rows=288518 loops=1)
    actual_rows: 288518.0
    estimated_rows: 26339.0
    q_error: 10.95402255210904
  - node: Nested loop inner join (cost=105559 rows=237095) (actual time=0.0807..1748
      rows=1.15e+6 loops=1)
    actual_rows: 1150000.0
    estimated_rows: 237095.0
    q_error: 4.850376431388262
  - node: "Filter: (cn.country_code = '[us]') (cost=22575 rows=22006) (actual time=0.0403..81.4
      rows=84843 loops=1)"
    actual_rows: 84843.0
    estimated_rows: 22006.0
    q_error: 3.855448514041625
  - node: Table scan on cn (cost=22575 rows=220062) (actual time=0.038..59.9 rows=234997
      loops=1)
    actual_rows: 234997.0
    estimated_rows: 220062.0
    q_error: 1.0678672374149103
  - node: Index lookup on mc using company_id_movie_companies (company_id=cn.id) (cost=2.69
      rows=10.8) (actual time=0.00499..0.0189 rows=13.6 loops=84843)
    actual_rows: 13.6
    estimated_rows: 10.8
    q_error: 1.259259259259259
  - node: 'Filter: ((t.episode_nr >= 5) and (t.episode_nr < 100)) (cost=0.25 rows=0.111)
      (actual time=0.00135..0.00137 rows=0.25 loops=1.15e+6)'
    actual_rows: 0.25
    estimated_rows: 0.111
    q_error: 2.2522522522522523
  - node: Single-row index lookup on t using PRIMARY (id=mc.movie_id) (cost=0.25 rows=1)
      (actual time=0.00118..0.0012 rows=1 loops=1.15e+6)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mk using movie_id_movie_keyword (movie_id=mc.movie_id) (cost=2.89
      rows=11.5) (actual time=0.00335..0.00426 rows=1.95 loops=288518)
    actual_rows: 1.95
    estimated_rows: 11.5
    q_error: 5.897435897435898
  - node: "Filter: (k.keyword = 'character-name-in-title') (cost=0.25 rows=0.1) (actual
      time=0.00256..0.00256 rows=0.012 loops=563795)"
    actual_rows: 0.012
    estimated_rows: 0.1
    q_error: 8.333333333333334
  - node: Single-row index lookup on k using PRIMARY (id=mk.keyword_id) (cost=0.25
      rows=1) (actual time=0.00238..0.0024 rows=1 loops=563795)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on ci using movie_id_cast_info (movie_id=mc.movie_id) (cost=3.87
      rows=15.5) (actual time=0.0395..0.0701 rows=25 loops=6766)
    actual_rows: 25.0
    estimated_rows: 15.5
    q_error: 1.6129032258064515
  - node: Single-row covering index lookup on n using PRIMARY (id=ci.person_id) (cost=0.0217
      rows=1) (actual time=0.00119..0.00122 rows=1 loops=169273)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on an using person_id_aka_name (person_id=ci.person_id) (cost=0.376
      rows=1.5) (actual time=0.00316..0.00452 rows=1.47 loops=169273)
    actual_rows: 1.47
    estimated_rows: 1.5
    q_error: 1.0204081632653061

- query: "-- JOB Query 17a\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(n.name) AS member_in_charnamed_american_movie,\n       MIN(n.name)
    AS a1\nFROM cast_info AS ci,\n     company_name AS cn,\n     keyword AS k,\n \
    \    movie_companies AS mc,\n     movie_keyword AS mk,\n     name AS n,\n    \
    \ title AS t\nWHERE cn.country_code ='[us]'\n  AND k.keyword ='character-name-in-title'\n\
    \  AND n.name LIKE 'B%'\n  AND n.id = ci.person_id\n  AND ci.movie_id = t.id\n\
    \  AND t.id = mk.movie_id\n  AND mk.keyword_id = k.id\n  AND t.id = mc.movie_id\n\
    \  AND mc.company_id = cn.id\n  AND ci.movie_id = mc.movie_id\n  AND ci.movie_id
    = mk.movie_id\n  AND mc.movie_id = mk.movie_id"
  qep:
  - node: 'Aggregate: min(n.`name`), min(n.`name`) (cost=3.26e+6 rows=1) (actual time=9028..9028
      rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=3.23e+6 rows=336575) (actual time=0.422..8973
      rows=258303 loops=1)
    actual_rows: 258303.0
    estimated_rows: 336575.0
    q_error: 1.3030239679755946
  - node: Nested loop inner join (cost=2.69e+6 rows=3.03e+6) (actual time=0.413..5169
      rows=2.83e+6 loops=1)
    actual_rows: 2830000.0
    estimated_rows: 3030000.0
    q_error: 1.0706713780918728
  - node: Nested loop inner join (cost=1.63e+6 rows=195857) (actual time=0.246..706
      rows=68316 loops=1)
    actual_rows: 68316.0
    estimated_rows: 195857.0
    q_error: 2.866927220563265
  - node: Nested loop inner join (cost=1.6e+6 rows=195857) (actual time=0.239..653
      rows=68316 loops=1)
    actual_rows: 68316.0
    estimated_rows: 195857.0
    q_error: 2.866927220563265
  - node: Nested loop inner join (cost=910811 rows=1.96e+6) (actual time=0.212..423
      rows=148552 loops=1)
    actual_rows: 148552.0
    estimated_rows: 1960000.0
    q_error: 13.19403306586246
  - node: Nested loop inner join (cost=225312 rows=603829) (actual time=0.192..121
      rows=41840 loops=1)
    actual_rows: 41840.0
    estimated_rows: 603829.0
    q_error: 14.43185946462715
  - node: "Filter: (k.keyword = 'character-name-in-title') (cost=13972 rows=13804)
      (actual time=0.0824..60.7 rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 13804.0
    q_error: 13804.0
  - node: Table scan on k (cost=13972 rows=138037) (actual time=0.0276..53.2 rows=134170
      loops=1)
    actual_rows: 134170.0
    estimated_rows: 138037.0
    q_error: 1.0288216441827531
  - node: Index lookup on mk using keyword_id_movie_keyword (keyword_id=k.id) (cost=10.9
      rows=43.7) (actual time=0.108..58.1 rows=41840 loops=1)
    actual_rows: 41840.0
    estimated_rows: 43.7
    q_error: 957.437070938215
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=mk.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00471..0.00696 rows=3.55 loops=41840)
    actual_rows: 3.55
    estimated_rows: 3.24
    q_error: 1.095679012345679
  - node: "Filter: (cn.country_code = '[us]') (cost=0.25 rows=0.1) (actual time=0.00141..0.00144
      rows=0.46 loops=148552)"
    actual_rows: 0.46
    estimated_rows: 0.1
    q_error: 4.6
  - node: Single-row index lookup on cn using PRIMARY (id=mc.company_id) (cost=0.25
      rows=1) (actual time=0.0012..0.00122 rows=1 loops=148552)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Single-row covering index lookup on t using PRIMARY (id=mk.movie_id) (cost=0.0771
      rows=1) (actual time=594e-6..615e-6 rows=1 loops=68316)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on ci using movie_id_cast_info (movie_id=mk.movie_id) (cost=3.87
      rows=15.5) (actual time=0.0208..0.0633 rows=41.5 loops=68316)
    actual_rows: 41.5
    estimated_rows: 15.5
    q_error: 2.6774193548387095
  - node: "Filter: (n.`name` like 'B%') (cost=0.0771 rows=0.111) (actual time=0.00125..0.00126
      rows=0.0912 loops=2.83e+6)"
    actual_rows: 0.0912
    estimated_rows: 0.111
    q_error: 1.2171052631578947
  - node: Single-row index lookup on n using PRIMARY (id=ci.person_id) (cost=0.0771
      rows=1) (actual time=0.00107..0.00109 rows=1 loops=2.83e+6)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 17b\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(n.name) AS member_in_charnamed_movie,\n       MIN(n.name) AS a1\nFROM
    cast_info AS ci,\n     company_name AS cn,\n     keyword AS k,\n     movie_companies
    AS mc,\n     movie_keyword AS mk,\n     name AS n,\n     title AS t\nWHERE k.keyword
    ='character-name-in-title'\n  AND n.name LIKE 'Z%'\n  AND n.id = ci.person_id\n\
    \  AND ci.movie_id = t.id\n  AND t.id = mk.movie_id\n  AND mk.keyword_id = k.id\n\
    \  AND t.id = mc.movie_id\n  AND mc.company_id = cn.id\n  AND ci.movie_id = mc.movie_id\n\
    \  AND ci.movie_id = mk.movie_id\n  AND mc.movie_id = mk.movie_id"
  qep:
  - node: 'Aggregate: min(n.`name`), min(n.`name`) (cost=7.88e+6 rows=1) (actual time=19086..19086
      rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=7.64e+6 rows=2.33e+6) (actual time=29.8..19071
      rows=52334 loops=1)
    actual_rows: 52334.0
    estimated_rows: 2330000.0
    q_error: 44.521725837887416
  - node: Nested loop inner join (cost=7.37e+6 rows=2.33e+6) (actual time=29.8..19003
      rows=52334 loops=1)
    actual_rows: 52334.0
    estimated_rows: 2330000.0
    q_error: 44.521725837887416
  - node: Nested loop inner join (cost=6.56e+6 rows=718503) (actual time=29.7..18909
      rows=6646 loops=1)
    actual_rows: 6646.0
    estimated_rows: 718503.0
    q_error: 108.11059283779717
  - node: Nested loop inner join (cost=4.29e+6 rows=6.47e+6) (actual time=4.18..16872
      rows=1.04e+6 loops=1)
    actual_rows: 1040000.0
    estimated_rows: 6470000.0
    q_error: 6.221153846153846
  - node: Nested loop inner join (cost=2.03e+6 rows=418105) (actual time=1.57..12388
      rows=41840 loops=1)
    actual_rows: 41840.0
    estimated_rows: 418105.0
    q_error: 9.992949330783938
  - node: Nested loop inner join (cost=1.88e+6 rows=418105) (actual time=1.57..12308
      rows=41840 loops=1)
    actual_rows: 41840.0
    estimated_rows: 418105.0
    q_error: 9.992949330783938
  - node: Table scan on mk (cost=420275 rows=4.18e+6) (actual time=0.998..986 rows=4.52e+6
      loops=1)
    actual_rows: 4520000.0
    estimated_rows: 4180000.0
    q_error: 1.0813397129186604
  - node: "Filter: (k.keyword = 'character-name-in-title') (cost=0.25 rows=0.1) (actual
      time=0.00242..0.00242 rows=0.00925 loops=4.52e+6)"
    actual_rows: 0.00925
    estimated_rows: 0.1
    q_error: 10.810810810810812
  - node: Single-row index lookup on k using PRIMARY (id=mk.keyword_id) (cost=0.25
      rows=1) (actual time=0.00222..0.00225 rows=1 loops=4.52e+6)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Single-row covering index lookup on t using PRIMARY (id=mk.movie_id) (cost=0.25
      rows=1) (actual time=0.00169..0.00171 rows=1 loops=41840)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on ci using movie_id_cast_info (movie_id=mk.movie_id) (cost=3.87
      rows=15.5) (actual time=0.0651..0.106 rows=24.8 loops=41840)
    actual_rows: 24.8
    estimated_rows: 15.5
    q_error: 1.6
  - node: "Filter: (n.`name` like 'Z%') (cost=0.25 rows=0.111) (actual time=0.00188..0.00188
      rows=0.0064 loops=1.04e+6)"
    actual_rows: 0.0064
    estimated_rows: 0.111
    q_error: 17.34375
  - node: Single-row index lookup on n using PRIMARY (id=ci.person_id) (cost=0.25
      rows=1) (actual time=0.00167..0.00169 rows=1 loops=1.04e+6)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=mk.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00763..0.0136 rows=7.87 loops=6646)
    actual_rows: 7.87
    estimated_rows: 3.24
    q_error: 2.4290123456790123
  - node: Single-row covering index lookup on cn using PRIMARY (id=mc.company_id)
      (cost=0.0162 rows=1) (actual time=0.00113..0.00116 rows=1 loops=52334)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 17c\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(n.name) AS member_in_charnamed_movie,\n       MIN(n.name) AS a1\nFROM
    cast_info AS ci,\n     company_name AS cn,\n     keyword AS k,\n     movie_companies
    AS mc,\n     movie_keyword AS mk,\n     name AS n,\n     title AS t\nWHERE k.keyword
    ='character-name-in-title'\n  AND n.name LIKE 'X%'\n  AND n.id = ci.person_id\n\
    \  AND ci.movie_id = t.id\n  AND t.id = mk.movie_id\n  AND mk.keyword_id = k.id\n\
    \  AND t.id = mc.movie_id\n  AND mc.company_id = cn.id\n  AND ci.movie_id = mc.movie_id\n\
    \  AND ci.movie_id = mk.movie_id\n  AND mc.movie_id = mk.movie_id"
  qep:
  - node: 'Aggregate: min(n.`name`), min(n.`name`) (cost=7.88e+6 rows=1) (actual time=16573..16573
      rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=7.64e+6 rows=2.33e+6) (actual time=96.5..16573
      rows=1918 loops=1)
    actual_rows: 1918.0
    estimated_rows: 2330000.0
    q_error: 1214.8070907194995
  - node: Nested loop inner join (cost=7.37e+6 rows=2.33e+6) (actual time=96.5..16570
      rows=1918 loops=1)
    actual_rows: 1918.0
    estimated_rows: 2330000.0
    q_error: 1214.8070907194995
  - node: Nested loop inner join (cost=6.56e+6 rows=718503) (actual time=96.5..16565
      rows=250 loops=1)
    actual_rows: 250.0
    estimated_rows: 718503.0
    q_error: 2874.012
  - node: Nested loop inner join (cost=4.29e+6 rows=6.47e+6) (actual time=1.04..14611
      rows=1.04e+6 loops=1)
    actual_rows: 1040000.0
    estimated_rows: 6470000.0
    q_error: 6.221153846153846
  - node: Nested loop inner join (cost=2.03e+6 rows=418105) (actual time=0.991..11947
      rows=41840 loops=1)
    actual_rows: 41840.0
    estimated_rows: 418105.0
    q_error: 9.992949330783938
  - node: Nested loop inner join (cost=1.88e+6 rows=418105) (actual time=0.986..11872
      rows=41840 loops=1)
    actual_rows: 41840.0
    estimated_rows: 418105.0
    q_error: 9.992949330783938
  - node: Table scan on mk (cost=420275 rows=4.18e+6) (actual time=0.576..922 rows=4.52e+6
      loops=1)
    actual_rows: 4520000.0
    estimated_rows: 4180000.0
    q_error: 1.0813397129186604
  - node: "Filter: (k.keyword = 'character-name-in-title') (cost=0.25 rows=0.1) (actual
      time=0.00234..0.00234 rows=0.00925 loops=4.52e+6)"
    actual_rows: 0.00925
    estimated_rows: 0.1
    q_error: 10.810810810810812
  - node: Single-row index lookup on k using PRIMARY (id=mk.keyword_id) (cost=0.25
      rows=1) (actual time=0.00214..0.00217 rows=1 loops=4.52e+6)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Single-row covering index lookup on t using PRIMARY (id=mk.movie_id) (cost=0.25
      rows=1) (actual time=0.00158..0.0016 rows=1 loops=41840)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on ci using movie_id_cast_info (movie_id=mk.movie_id) (cost=3.87
      rows=15.5) (actual time=0.0291..0.0623 rows=24.8 loops=41840)
    actual_rows: 24.8
    estimated_rows: 15.5
    q_error: 1.6
  - node: "Filter: (n.`name` like 'X%') (cost=0.25 rows=0.111) (actual time=0.0018..0.0018
      rows=241e-6 loops=1.04e+6)"
    actual_rows: 0.000241
    estimated_rows: 0.111
    q_error: 460.5809128630705
  - node: Single-row index lookup on n using PRIMARY (id=ci.person_id) (cost=0.25
      rows=1) (actual time=0.0016..0.00162 rows=1 loops=1.04e+6)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=mk.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.0102..0.0164 rows=7.67 loops=250)
    actual_rows: 7.67
    estimated_rows: 3.24
    q_error: 2.3672839506172836
  - node: Single-row covering index lookup on cn using PRIMARY (id=mc.company_id)
      (cost=0.0162 rows=1) (actual time=0.00134..0.00136 rows=1 loops=1918)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 17d\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(n.name) AS member_in_charnamed_movie\nFROM cast_info AS ci,\n     company_name
    AS cn,\n     keyword AS k,\n     movie_companies AS mc,\n     movie_keyword AS
    mk,\n     name AS n,\n     title AS t\nWHERE k.keyword ='character-name-in-title'\n\
    \  AND n.name LIKE '%Bert%'\n  AND n.id = ci.person_id\n  AND ci.movie_id = t.id\n\
    \  AND t.id = mk.movie_id\n  AND mk.keyword_id = k.id\n  AND t.id = mc.movie_id\n\
    \  AND mc.company_id = cn.id\n  AND ci.movie_id = mc.movie_id\n  AND ci.movie_id
    = mk.movie_id\n  AND mc.movie_id = mk.movie_id"
  qep:
  - node: 'Aggregate: min(n.`name`) (cost=7.88e+6 rows=1) (actual time=18278..18278
      rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=7.64e+6 rows=2.33e+6) (actual time=2.34..18251
      rows=178670 loops=1)
    actual_rows: 178670.0
    estimated_rows: 2330000.0
    q_error: 13.040801477584374
  - node: Nested loop inner join (cost=7.37e+6 rows=2.33e+6) (actual time=2.34..18055
      rows=178670 loops=1)
    actual_rows: 178670.0
    estimated_rows: 2330000.0
    q_error: 13.040801477584374
  - node: Nested loop inner join (cost=6.56e+6 rows=718503) (actual time=2.33..17772
      rows=26014 loops=1)
    actual_rows: 26014.0
    estimated_rows: 718503.0
    q_error: 27.619858537710464
  - node: Nested loop inner join (cost=4.29e+6 rows=6.47e+6) (actual time=1.07..15609
      rows=1.04e+6 loops=1)
    actual_rows: 1040000.0
    estimated_rows: 6470000.0
    q_error: 6.221153846153846
  - node: Nested loop inner join (cost=2.03e+6 rows=418105) (actual time=1.01..12824
      rows=41840 loops=1)
    actual_rows: 41840.0
    estimated_rows: 418105.0
    q_error: 9.992949330783938
  - node: Nested loop inner join (cost=1.88e+6 rows=418105) (actual time=1.01..12747
      rows=41840 loops=1)
    actual_rows: 41840.0
    estimated_rows: 418105.0
    q_error: 9.992949330783938
  - node: Table scan on mk (cost=420275 rows=4.18e+6) (actual time=0.601..927 rows=4.52e+6
      loops=1)
    actual_rows: 4520000.0
    estimated_rows: 4180000.0
    q_error: 1.0813397129186604
  - node: "Filter: (k.keyword = 'character-name-in-title') (cost=0.25 rows=0.1) (actual
      time=0.00253..0.00253 rows=0.00925 loops=4.52e+6)"
    actual_rows: 0.00925
    estimated_rows: 0.1
    q_error: 10.810810810810812
  - node: Single-row index lookup on k using PRIMARY (id=mk.keyword_id) (cost=0.25
      rows=1) (actual time=0.00233..0.00235 rows=1 loops=4.52e+6)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Single-row covering index lookup on t using PRIMARY (id=mk.movie_id) (cost=0.25
      rows=1) (actual time=0.00164..0.00167 rows=1 loops=41840)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on ci using movie_id_cast_info (movie_id=mk.movie_id) (cost=3.87
      rows=15.5) (actual time=0.0304..0.0652 rows=24.8 loops=41840)
    actual_rows: 24.8
    estimated_rows: 15.5
    q_error: 1.6
  - node: "Filter: (n.`name` like '%Bert%') (cost=0.25 rows=0.111) (actual time=0.002..0.002
      rows=0.0251 loops=1.04e+6)"
    actual_rows: 0.0251
    estimated_rows: 0.111
    q_error: 4.422310756972111
  - node: Single-row index lookup on n using PRIMARY (id=ci.person_id) (cost=0.25
      rows=1) (actual time=0.00167..0.00169 rows=1 loops=1.04e+6)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=mk.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00579..0.0104 rows=6.87 loops=26014)
    actual_rows: 6.87
    estimated_rows: 3.24
    q_error: 2.1203703703703702
  - node: Single-row covering index lookup on cn using PRIMARY (id=mc.company_id)
      (cost=0.0162 rows=1) (actual time=938e-6..960e-6 rows=1 loops=178670)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 17e\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(n.name) AS member_in_charnamed_movie\nFROM cast_info AS ci,\n     company_name
    AS cn,\n     keyword AS k,\n     movie_companies AS mc,\n     movie_keyword AS
    mk,\n     name AS n,\n     title AS t\nWHERE cn.country_code ='[us]'\n  AND k.keyword
    ='character-name-in-title'\n  AND n.id = ci.person_id\n  AND ci.movie_id = t.id\n\
    \  AND t.id = mk.movie_id\n  AND mk.keyword_id = k.id\n  AND t.id = mc.movie_id\n\
    \  AND mc.company_id = cn.id\n  AND ci.movie_id = mc.movie_id\n  AND ci.movie_id
    = mk.movie_id\n  AND mc.movie_id = mk.movie_id"
  qep:
  - node: 'Aggregate: min(n.`name`) (cost=3.53e+6 rows=1) (actual time=8900..8900
      rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=3.23e+6 rows=3.03e+6) (actual time=0.313..8622
      rows=2.83e+6 loops=1)
    actual_rows: 2830000.0
    estimated_rows: 3030000.0
    q_error: 1.0706713780918728
  - node: Nested loop inner join (cost=2.69e+6 rows=3.03e+6) (actual time=0.308..5204
      rows=2.83e+6 loops=1)
    actual_rows: 2830000.0
    estimated_rows: 3030000.0
    q_error: 1.0706713780918728
  - node: Nested loop inner join (cost=1.63e+6 rows=195857) (actual time=0.16..722
      rows=68316 loops=1)
    actual_rows: 68316.0
    estimated_rows: 195857.0
    q_error: 2.866927220563265
  - node: Nested loop inner join (cost=1.6e+6 rows=195857) (actual time=0.157..669
      rows=68316 loops=1)
    actual_rows: 68316.0
    estimated_rows: 195857.0
    q_error: 2.866927220563265
  - node: Nested loop inner join (cost=910811 rows=1.96e+6) (actual time=0.14..436
      rows=148552 loops=1)
    actual_rows: 148552.0
    estimated_rows: 1960000.0
    q_error: 13.19403306586246
  - node: Nested loop inner join (cost=225312 rows=603829) (actual time=0.125..128
      rows=41840 loops=1)
    actual_rows: 41840.0
    estimated_rows: 603829.0
    q_error: 14.43185946462715
  - node: "Filter: (k.keyword = 'character-name-in-title') (cost=13972 rows=13804)
      (actual time=0.0638..66.5 rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 13804.0
    q_error: 13804.0
  - node: Table scan on k (cost=13972 rows=138037) (actual time=0.0154..58.4 rows=134170
      loops=1)
    actual_rows: 134170.0
    estimated_rows: 138037.0
    q_error: 1.0288216441827531
  - node: Index lookup on mk using keyword_id_movie_keyword (keyword_id=k.id) (cost=10.9
      rows=43.7) (actual time=0.0601..58.9 rows=41840 loops=1)
    actual_rows: 41840.0
    estimated_rows: 43.7
    q_error: 957.437070938215
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=mk.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00482..0.00708 rows=3.55 loops=41840)
    actual_rows: 3.55
    estimated_rows: 3.24
    q_error: 1.095679012345679
  - node: "Filter: (cn.country_code = '[us]') (cost=0.25 rows=0.1) (actual time=0.00141..0.00145
      rows=0.46 loops=148552)"
    actual_rows: 0.46
    estimated_rows: 0.1
    q_error: 4.6
  - node: Single-row index lookup on cn using PRIMARY (id=mc.company_id) (cost=0.25
      rows=1) (actual time=0.0012..0.00122 rows=1 loops=148552)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Single-row covering index lookup on t using PRIMARY (id=mk.movie_id) (cost=0.0771
      rows=1) (actual time=592e-6..619e-6 rows=1 loops=68316)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on ci using movie_id_cast_info (movie_id=mk.movie_id) (cost=3.87
      rows=15.5) (actual time=0.0207..0.0635 rows=41.5 loops=68316)
    actual_rows: 41.5
    estimated_rows: 15.5
    q_error: 2.6774193548387095
  - node: Single-row index lookup on n using PRIMARY (id=ci.person_id) (cost=0.0771
      rows=1) (actual time=0.00106..0.00108 rows=1 loops=2.83e+6)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 17f\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(n.name) AS member_in_charnamed_movie\nFROM cast_info AS ci,\n     company_name
    AS cn,\n     keyword AS k,\n     movie_companies AS mc,\n     movie_keyword AS
    mk,\n     name AS n,\n     title AS t\nWHERE k.keyword ='character-name-in-title'\n\
    \  AND n.name LIKE '%B%'\n  AND n.id = ci.person_id\n  AND ci.movie_id = t.id\n\
    \  AND t.id = mk.movie_id\n  AND mk.keyword_id = k.id\n  AND t.id = mc.movie_id\n\
    \  AND mc.company_id = cn.id\n  AND ci.movie_id = mc.movie_id\n  AND ci.movie_id
    = mk.movie_id\n  AND mc.movie_id = mk.movie_id"
  qep:
  - node: 'Aggregate: min(n.`name`) (cost=7.88e+6 rows=1) (actual time=20673..20673
      rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=7.64e+6 rows=2.33e+6) (actual time=2.27..20469
      rows=1.83e+6 loops=1)
    actual_rows: 1830000.0
    estimated_rows: 2330000.0
    q_error: 1.273224043715847
  - node: Nested loop inner join (cost=7.37e+6 rows=2.33e+6) (actual time=2.27..19001
      rows=1.83e+6 loops=1)
    actual_rows: 1830000.0
    estimated_rows: 2330000.0
    q_error: 1.273224043715847
  - node: Nested loop inner join (cost=6.56e+6 rows=718503) (actual time=1.06..16831
      rows=243364 loops=1)
    actual_rows: 243364.0
    estimated_rows: 718503.0
    q_error: 2.95237997403067
  - node: Nested loop inner join (cost=4.29e+6 rows=6.47e+6) (actual time=1.05..14696
      rows=1.04e+6 loops=1)
    actual_rows: 1040000.0
    estimated_rows: 6470000.0
    q_error: 6.221153846153846
  - node: Nested loop inner join (cost=2.03e+6 rows=418105) (actual time=0.998..12020
      rows=41840 loops=1)
    actual_rows: 41840.0
    estimated_rows: 418105.0
    q_error: 9.992949330783938
  - node: Nested loop inner join (cost=1.88e+6 rows=418105) (actual time=0.993..11946
      rows=41840 loops=1)
    actual_rows: 41840.0
    estimated_rows: 418105.0
    q_error: 9.992949330783938
  - node: Table scan on mk (cost=420275 rows=4.18e+6) (actual time=0.582..920 rows=4.52e+6
      loops=1)
    actual_rows: 4520000.0
    estimated_rows: 4180000.0
    q_error: 1.0813397129186604
  - node: "Filter: (k.keyword = 'character-name-in-title') (cost=0.25 rows=0.1) (actual
      time=0.00236..0.00236 rows=0.00925 loops=4.52e+6)"
    actual_rows: 0.00925
    estimated_rows: 0.1
    q_error: 10.810810810810812
  - node: Single-row index lookup on k using PRIMARY (id=mk.keyword_id) (cost=0.25
      rows=1) (actual time=0.00216..0.00219 rows=1 loops=4.52e+6)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Single-row covering index lookup on t using PRIMARY (id=mk.movie_id) (cost=0.25
      rows=1) (actual time=0.00155..0.00157 rows=1 loops=41840)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on ci using movie_id_cast_info (movie_id=mk.movie_id) (cost=3.87
      rows=15.5) (actual time=0.0291..0.0626 rows=24.8 loops=41840)
    actual_rows: 24.8
    estimated_rows: 15.5
    q_error: 1.6
  - node: "Filter: (n.`name` like '%B%') (cost=0.25 rows=0.111) (actual time=0.00194..0.00196
      rows=0.234 loops=1.04e+6)"
    actual_rows: 0.234
    estimated_rows: 0.111
    q_error: 2.1081081081081083
  - node: Single-row index lookup on n using PRIMARY (id=ci.person_id) (cost=0.25
      rows=1) (actual time=0.00165..0.00167 rows=1 loops=1.04e+6)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=mk.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00387..0.00846 rows=7.5 loops=243364)
    actual_rows: 7.5
    estimated_rows: 3.24
    q_error: 2.314814814814815
  - node: Single-row covering index lookup on cn using PRIMARY (id=mc.company_id)
      (cost=0.0162 rows=1) (actual time=654e-6..675e-6 rows=1 loops=1.83e+6)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 18a\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(mi.info) AS movie_budget,\n       MIN(mi_idx.info) AS movie_votes,\n\
    \       MIN(t.title) AS movie_title\nFROM cast_info AS ci,\n     info_type AS
    it1,\n     info_type AS it2,\n     movie_info AS mi,\n     movie_info_idx AS mi_idx,\n\
    \     name AS n,\n     title AS t\nWHERE ci.note IN ('(producer)',\n         \
    \         '(executive producer)')\n  AND it1.info = 'budget'\n  AND it2.info =
    'votes'\n  AND n.gender = 'm'\n  AND n.name LIKE '%Tim%'\n  AND t.id = mi.movie_id\n\
    \  AND t.id = mi_idx.movie_id\n  AND t.id = ci.movie_id\n  AND ci.movie_id = mi.movie_id\n\
    \  AND ci.movie_id = mi_idx.movie_id\n  AND mi.movie_id = mi_idx.movie_id\n  AND
    n.id = ci.person_id\n  AND it1.id = mi.info_type_id\n  AND it2.id = mi_idx.info_type_id"
  qep:
  - node: 'Aggregate: min(mi.info), min(mi_idx.info), min(t.title) (cost=142125 rows=1)
      (actual time=8215..8215 rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=141971 rows=1544) (actual time=294..8214 rows=416
      loops=1)
    actual_rows: 416.0
    estimated_rows: 1544.0
    q_error: 3.7115384615384617
  - node: Nested loop inner join (cost=136501 rows=30887) (actual time=0.358..7918
      rows=107340 loops=1)
    actual_rows: 107340.0
    estimated_rows: 30887.0
    q_error: 3.4752484864182343
  - node: Nested loop inner join (cost=82448 rows=9984) (actual time=0.0918..1103
      rows=45431 loops=1)
    actual_rows: 45431.0
    estimated_rows: 9984.0
    q_error: 4.550380608974359
  - node: Nested loop inner join (cost=80679 rows=9984) (actual time=0.0862..1000
      rows=45431 loops=1)
    actual_rows: 45431.0
    estimated_rows: 9984.0
    q_error: 4.550380608974359
  - node: Nested loop inner join (cost=45734 rows=99844) (actual time=0.0792..830
      rows=136507 loops=1)
    actual_rows: 136507.0
    estimated_rows: 99844.0
    q_error: 1.3672028364248228
  - node: Nested loop inner join (cost=10789 rows=30791) (actual time=0.0666..202
      rows=121863 loops=1)
    actual_rows: 121863.0
    estimated_rows: 30791.0
    q_error: 3.957747393718944
  - node: "Filter: (it1.info = 'budget') (cost=11.6 rows=11.3) (actual time=0.0432..0.0488
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 11.3
    q_error: 11.3
  - node: Table scan on it1 (cost=11.6 rows=113) (actual time=0.0182..0.0425 rows=113
      loops=1)
    actual_rows: 113.0
    estimated_rows: 113.0
    q_error: 1.0
  - node: Index lookup on mi using info_type_id_movie_info (info_type_id=it1.id) (cost=705
      rows=2725) (actual time=0.0223..197 rows=121863 loops=1)
    actual_rows: 121863.0
    estimated_rows: 2725.0
    q_error: 44.720366972477066
  - node: Index lookup on mi_idx using movie_id_movie_info_idx (movie_id=mi.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00369..0.005 rows=1.12 loops=121863)
    actual_rows: 1.12
    estimated_rows: 3.24
    q_error: 2.892857142857143
  - node: "Filter: (it2.info = 'votes') (cost=0.25 rows=0.1) (actual time=0.0011..0.00113
      rows=0.333 loops=136507)"
    actual_rows: 0.333
    estimated_rows: 0.1
    q_error: 3.33
  - node: Single-row index lookup on it2 using PRIMARY (id=mi_idx.info_type_id) (cost=0.25
      rows=1) (actual time=856e-6..877e-6 rows=1 loops=136507)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Single-row index lookup on t using PRIMARY (id=mi.movie_id) (cost=0.0771
      rows=1) (actual time=0.00206..0.00208 rows=1 loops=45431)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (ci.note in ('(producer)','(executive producer)')) (cost=3.87 rows=3.09)
      (actual time=0.092..0.15 rows=2.36 loops=45431)"
    actual_rows: 2.36
    estimated_rows: 3.09
    q_error: 1.3093220338983051
  - node: Index lookup on ci using movie_id_cast_info (movie_id=mi.movie_id) (cost=3.87
      rows=15.5) (actual time=0.0321..0.145 rows=40.3 loops=45431)
    actual_rows: 40.3
    estimated_rows: 15.5
    q_error: 2.5999999999999996
  - node: "Filter: ((n.gender = 'm') and (n.`name` like '%Tim%')) (cost=0.0771 rows=0.05)
      (actual time=0.00265..0.00265 rows=0.00388 loops=107340)"
    actual_rows: 0.00388
    estimated_rows: 0.05
    q_error: 12.88659793814433
  - node: Single-row index lookup on n using PRIMARY (id=ci.person_id) (cost=0.0771
      rows=1) (actual time=0.00225..0.00228 rows=1 loops=107340)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 18b\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(mi.info) AS movie_budget,\n       MIN(mi_idx.info) AS movie_votes,\n\
    \       MIN(t.title) AS movie_title\nFROM cast_info AS ci,\n     info_type AS
    it1,\n     info_type AS it2,\n     movie_info AS mi,\n     movie_info_idx AS mi_idx,\n\
    \     name AS n,\n     title AS t\nWHERE ci.note IN ('(writer)',\n           \
    \       '(head writer)',\n                  '(written by)',\n                \
    \  '(story)',\n                  '(story editor)')\n  AND it1.info = 'genres'\n\
    \  AND it2.info = 'rating'\n  AND mi.info IN ('Horror',\n                  'Thriller')\n\
    \  AND mi.note IS NULL\n  AND mi_idx.info > '8.0'\n  AND n.gender IS NOT NULL\n\
    \  AND n.gender = 'f'\n  AND t.production_year BETWEEN 2008 AND 2014\n  AND t.id
    = mi.movie_id\n  AND t.id = mi_idx.movie_id\n  AND t.id = ci.movie_id\n  AND ci.movie_id
    = mi.movie_id\n  AND ci.movie_id = mi_idx.movie_id\n  AND mi.movie_id = mi_idx.movie_id\n\
    \  AND n.id = ci.person_id\n  AND it1.id = mi.info_type_id\n  AND it2.id = mi_idx.info_type_id"
  qep:
  - node: 'Aggregate: min(mi.info), min(mi_idx.info), min(t.title) (cost=11167 rows=1)
      (actual time=2786..2786 rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=11167 rows=5.15) (actual time=278..2786 rows=11
      loops=1)
    actual_rows: 11.0
    estimated_rows: 5.15
    q_error: 2.1359223300970873
  - node: Nested loop inner join (cost=11148 rows=57.2) (actual time=43.7..2785 rows=268
      loops=1)
    actual_rows: 268.0
    estimated_rows: 57.2
    q_error: 4.685314685314685
  - node: Nested loop inner join (cost=11108 rows=7.39) (actual time=5.97..2740 rows=358
      loops=1)
    actual_rows: 358.0
    estimated_rows: 7.39
    q_error: 48.443843031123144
  - node: Nested loop inner join (cost=11082 rows=73.9) (actual time=0.695..2737 rows=1358
      loops=1)
    actual_rows: 1358.0
    estimated_rows: 73.9
    q_error: 18.376184032476317
  - node: Nested loop inner join (cost=11004 rows=68.4) (actual time=0.413..2610 rows=34901
      loops=1)
    actual_rows: 34901.0
    estimated_rows: 68.4
    q_error: 510.24853801169587
  - node: Nested loop inner join (cost=10789 rows=616) (actual time=0.18..2498 rows=72258
      loops=1)
    actual_rows: 72258.0
    estimated_rows: 616.0
    q_error: 117.30194805194805
  - node: "Filter: (it1.info = 'genres') (cost=11.6 rows=11.3) (actual time=0.0809..0.186
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 11.3
    q_error: 11.3
  - node: Table scan on it1 (cost=11.6 rows=113) (actual time=0.0754..0.162 rows=113
      loops=1)
    actual_rows: 113.0
    estimated_rows: 113.0
    q_error: 1.0
  - node: "Filter: ((mi.info in ('Horror','Thriller')) and (mi.note is null)) (cost=682
      rows=54.5) (actual time=0.097..2494 rows=72258 loops=1)"
    actual_rows: 72258.0
    estimated_rows: 54.5
    q_error: 1325.834862385321
  - node: Index lookup on mi using info_type_id_movie_info (info_type_id=it1.id) (cost=682
      rows=2725) (actual time=0.0404..2282 rows=1.53e+6 loops=1)
    actual_rows: 1530000.0
    estimated_rows: 2725.0
    q_error: 561.4678899082569
  - node: 'Filter: (t.production_year between 2008 and 2014) (cost=0.25 rows=0.111)
      (actual time=0.0014..0.00143 rows=0.483 loops=72258)'
    actual_rows: 0.483
    estimated_rows: 0.111
    q_error: 4.351351351351351
  - node: Single-row index lookup on t using PRIMARY (id=mi.movie_id) (cost=0.25 rows=1)
      (actual time=0.00123..0.00125 rows=1 loops=72258)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (mi_idx.info > '8.0') (cost=0.812 rows=1.08) (actual time=0.00349..0.00355
      rows=0.0389 loops=34901)"
    actual_rows: 0.0389
    estimated_rows: 1.08
    q_error: 27.76349614395887
  - node: Index lookup on mi_idx using movie_id_movie_info_idx (movie_id=mi.movie_id)
      (cost=0.812 rows=3.24) (actual time=0.00241..0.00335 rows=0.999 loops=34901)
    actual_rows: 0.999
    estimated_rows: 3.24
    q_error: 3.2432432432432434
  - node: "Filter: (it2.info = 'rating') (cost=0.25 rows=0.1) (actual time=0.00162..0.00164
      rows=0.264 loops=1358)"
    actual_rows: 0.264
    estimated_rows: 0.1
    q_error: 2.64
  - node: Single-row index lookup on it2 using PRIMARY (id=mi_idx.info_type_id) (cost=0.25
      rows=1) (actual time=0.00113..0.00115 rows=1 loops=1358)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (ci.note in ('(writer)','(head writer)','(written by)','(story)','(story
      editor)')) (cost=3.97 rows=7.73) (actual time=0.093..0.126 rows=0.749 loops=358)"
    actual_rows: 0.749
    estimated_rows: 7.73
    q_error: 10.320427236315087
  - node: Index lookup on ci using movie_id_cast_info (movie_id=mi.movie_id) (cost=3.97
      rows=15.5) (actual time=0.0142..0.12 rows=35.1 loops=358)
    actual_rows: 35.1
    estimated_rows: 15.5
    q_error: 2.264516129032258
  - node: "Filter: ((n.gender = 'f') and (n.gender is not null)) (cost=0.231 rows=0.09)
      (actual time=0.00352..0.00353 rows=0.041 loops=268)"
    actual_rows: 0.041
    estimated_rows: 0.09
    q_error: 2.195121951219512
  - node: Single-row index lookup on n using PRIMARY (id=ci.person_id) (cost=0.231
      rows=1) (actual time=0.0031..0.00312 rows=1 loops=268)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 18c\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(mi.info) AS movie_budget,\n       MIN(mi_idx.info) AS movie_votes,\n\
    \       MIN(t.title) AS movie_title\nFROM cast_info AS ci,\n     info_type AS
    it1,\n     info_type AS it2,\n     movie_info AS mi,\n     movie_info_idx AS mi_idx,\n\
    \     name AS n,\n     title AS t\nWHERE ci.note IN ('(writer)',\n           \
    \       '(head writer)',\n                  '(written by)',\n                \
    \  '(story)',\n                  '(story editor)')\n  AND it1.info = 'genres'\n\
    \  AND it2.info = 'votes'\n  AND mi.info IN ('Horror',\n                  'Action',\n\
    \                  'Sci-Fi',\n                  'Thriller',\n                \
    \  'Crime',\n                  'War')\n  AND n.gender = 'm'\n  AND t.id = mi.movie_id\n\
    \  AND t.id = mi_idx.movie_id\n  AND t.id = ci.movie_id\n  AND ci.movie_id = mi.movie_id\n\
    \  AND ci.movie_id = mi_idx.movie_id\n  AND mi.movie_id = mi_idx.movie_id\n  AND
    n.id = ci.person_id\n  AND it1.id = mi.info_type_id\n  AND it2.id = mi_idx.info_type_id"
  qep:
  - node: 'Aggregate: min(mi.info), min(mi_idx.info), min(t.title) (cost=80868 rows=1)
      (actual time=14020..14020 rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=80482 rows=3861) (actual time=11.4..14004 rows=28073
      loops=1)
    actual_rows: 28073.0
    estimated_rows: 3861.0
    q_error: 7.270914270914271
  - node: Nested loop inner join (cost=73645 rows=38609) (actual time=7.1..13889 rows=54155
      loops=1)
    actual_rows: 54155.0
    estimated_rows: 38609.0
    q_error: 1.4026522313450231
  - node: Nested loop inner join (cost=46618 rows=4992) (actual time=0.0984..4135
      rows=102516 loops=1)
    actual_rows: 102516.0
    estimated_rows: 4992.0
    q_error: 20.536057692307693
  - node: Nested loop inner join (cost=45734 rows=4992) (actual time=0.0944..3999
      rows=102516 loops=1)
    actual_rows: 102516.0
    estimated_rows: 4992.0
    q_error: 20.536057692307693
  - node: Nested loop inner join (cost=28261 rows=49922) (actual time=0.0867..3653
      rows=307785 loops=1)
    actual_rows: 307785.0
    estimated_rows: 49922.0
    q_error: 6.165317895917632
  - node: Nested loop inner join (cost=10789 rows=15396) (actual time=0.0758..2834
      rows=186594 loops=1)
    actual_rows: 186594.0
    estimated_rows: 15396.0
    q_error: 12.119641465315667
  - node: "Filter: (it1.info = 'genres') (cost=11.6 rows=11.3) (actual time=0.0226..0.0531
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 11.3
    q_error: 11.3
  - node: Table scan on it1 (cost=11.6 rows=113) (actual time=0.0201..0.0464 rows=113
      loops=1)
    actual_rows: 113.0
    estimated_rows: 113.0
    q_error: 1.0
  - node: "Filter: (mi.info in ('Horror','Action','Sci-Fi','Thriller','Crime','War'))
      (cost=693 rows=1362) (actual time=0.0525..2823 rows=186594 loops=1)"
    actual_rows: 186594.0
    estimated_rows: 1362.0
    q_error: 137.0
  - node: Index lookup on mi using info_type_id_movie_info (info_type_id=it1.id) (cost=693
      rows=2725) (actual time=0.0234..2558 rows=1.53e+6 loops=1)
    actual_rows: 1530000.0
    estimated_rows: 2725.0
    q_error: 561.4678899082569
  - node: Index lookup on mi_idx using movie_id_movie_info_idx (movie_id=mi.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00252..0.00421 rows=1.65 loops=186594)
    actual_rows: 1.65
    estimated_rows: 3.24
    q_error: 1.9636363636363638
  - node: "Filter: (it2.info = 'votes') (cost=0.25 rows=0.1) (actual time=983e-6..0.00101
      rows=0.333 loops=307785)"
    actual_rows: 0.333
    estimated_rows: 0.1
    q_error: 3.33
  - node: Single-row index lookup on it2 using PRIMARY (id=mi_idx.info_type_id) (cost=0.25
      rows=1) (actual time=756e-6..779e-6 rows=1 loops=307785)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Single-row index lookup on t using PRIMARY (id=mi.movie_id) (cost=0.0771
      rows=1) (actual time=0.00114..0.00116 rows=1 loops=102516)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (ci.note in ('(writer)','(head writer)','(written by)','(story)','(story
      editor)')) (cost=3.87 rows=7.73) (actual time=0.0811..0.095 rows=0.528 loops=102516)"
    actual_rows: 0.528
    estimated_rows: 7.73
    q_error: 14.640151515151516
  - node: Index lookup on ci using movie_id_cast_info (movie_id=mi.movie_id) (cost=3.87
      rows=15.5) (actual time=0.00863..0.0903 rows=39.4 loops=102516)
    actual_rows: 39.4
    estimated_rows: 15.5
    q_error: 2.541935483870968
  - node: "Filter: (n.gender = 'm') (cost=0.0771 rows=0.1) (actual time=0.00191..0.00195
      rows=0.518 loops=54155)"
    actual_rows: 0.518
    estimated_rows: 0.1
    q_error: 5.18
  - node: Single-row index lookup on n using PRIMARY (id=ci.person_id) (cost=0.0771
      rows=1) (actual time=0.00172..0.00174 rows=1 loops=54155)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 19a\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(n.name) AS voicing_actress,\n       MIN(t.title) AS voiced_movie\n
    FROM aka_name AS an,\n     char_name AS chn,\n     cast_info AS ci,\n     company_name
    AS cn,\n     info_type AS it,\n     movie_companies AS mc,\n     movie_info AS
    mi,\n     name AS n,\n     role_type AS rt,\n     title AS t\nWHERE ci.note IN
    ('(voice)',\n                  '(voice: Japanese version)',\n                \
    \  '(voice) (uncredited)',\n                  '(voice: English version)')\n  AND
    cn.country_code ='[us]'\n  AND it.info = 'release dates'\n  AND mc.note IS NOT
    NULL\n  AND (mc.note LIKE '%(USA)%'\n       OR mc.note LIKE '%(worldwide)%')\n\
    \  AND mi.info IS NOT NULL\n  AND (mi.info LIKE 'Japan:%200%'\n       OR mi.info
    LIKE 'USA:%200%')\n  AND n.gender ='f'\n  AND n.name LIKE '%Ang%'\n  AND rt.role
    ='actress'\n  AND t.production_year BETWEEN 2005 AND 2009\n  AND t.id = mi.movie_id\n\
    \  AND t.id = mc.movie_id\n  AND t.id = ci.movie_id\n  AND mc.movie_id = ci.movie_id\n\
    \  AND mc.movie_id = mi.movie_id\n  AND mi.movie_id = ci.movie_id\n  AND cn.id
    = mc.company_id\n  AND it.id = mi.info_type_id\n  AND n.id = ci.person_id\n  AND
    rt.id = ci.role_id\n  AND n.id = an.person_id\n  AND ci.person_id = an.person_id\n\
    \  AND chn.id = ci.person_role_id"
  qep:
  - node: 'Aggregate: min(n.`name`), min(t.title) (cost=3129 rows=1) (actual time=17276..17276
      rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=3129 rows=0.134) (actual time=340..17275 rows=204
      loops=1)
    actual_rows: 204.0
    estimated_rows: 0.134
    q_error: 1522.3880597014925
  - node: Nested loop inner join (cost=3129 rows=0.0891) (actual time=340..17275 rows=198
      loops=1)
    actual_rows: 198.0
    estimated_rows: 0.0891
    q_error: 2222.222222222222
  - node: Nested loop inner join (cost=3129 rows=0.891) (actual time=340..17274 rows=198
      loops=1)
    actual_rows: 198.0
    estimated_rows: 0.891
    q_error: 222.22222222222223
  - node: Nested loop inner join (cost=3127 rows=0.79) (actual time=338..17086 rows=93
      loops=1)
    actual_rows: 93.0
    estimated_rows: 0.79
    q_error: 117.72151898734177
  - node: Nested loop inner join (cost=3124 rows=7.9) (actual time=338..17085 rows=101
      loops=1)
    actual_rows: 101.0
    estimated_rows: 7.9
    q_error: 12.784810126582277
  - node: Nested loop inner join (cost=3110 rows=12.9) (actual time=338..17082 rows=297
      loops=1)
    actual_rows: 297.0
    estimated_rows: 12.9
    q_error: 23.023255813953487
  - node: Nested loop inner join (cost=3019 rows=258) (actual time=2.33..17006 rows=75713
      loops=1)
    actual_rows: 75713.0
    estimated_rows: 258.0
    q_error: 293.4612403100775
  - node: Nested loop inner join (cost=2845 rows=258) (actual time=2.32..16881 rows=75713
      loops=1)
    actual_rows: 75713.0
    estimated_rows: 258.0
    q_error: 293.4612403100775
  - node: Nested loop inner join (cost=2033 rows=2321) (actual time=1.21..16462 rows=255750
      loops=1)
    actual_rows: 255750.0
    estimated_rows: 2321.0
    q_error: 110.18957345971565
  - node: "Filter: (rt.`role` = 'actress') (cost=1.45 rows=1.2) (actual time=0.0197..0.0268
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.2
    q_error: 1.2
  - node: Table scan on rt (cost=1.45 rows=12) (actual time=0.0176..0.0242 rows=12
      loops=1)
    actual_rows: 12.0
    estimated_rows: 12.0
    q_error: 1.0
  - node: "Filter: ((ci.note in ('(voice)','(voice: Japanese version)','(voice) (uncredited)','(voice:
      English version)')) and (ci.person_role_id is not null)) (cost=1370 rows=1935)
      (actual time=1.19..16449 rows=255750 loops=1)"
    actual_rows: 255750.0
    estimated_rows: 1935.0
    q_error: 132.1705426356589
  - node: Index lookup on ci using role_id_cast_info (role_id=rt.id) (cost=1370 rows=4836)
      (actual time=0.0219..15793 rows=7.45e+6 loops=1)
    actual_rows: 7450000.0
    estimated_rows: 4836.0
    q_error: 1540.5293631100083
  - node: 'Filter: (t.production_year between 2005 and 2009) (cost=0.25 rows=0.111)
      (actual time=0.00151..0.00153 rows=0.296 loops=255750)'
    actual_rows: 0.296
    estimated_rows: 0.111
    q_error: 2.6666666666666665
  - node: Single-row index lookup on t using PRIMARY (id=ci.movie_id) (cost=0.25 rows=1)
      (actual time=0.00131..0.00133 rows=1 loops=255750)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Single-row covering index lookup on chn using PRIMARY (id=ci.person_role_id)
      (cost=0.576 rows=1) (actual time=0.00146..0.00148 rows=1 loops=75713)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: ((n.gender = 'f') and (n.`name` like '%Ang%')) (cost=0.25 rows=0.05)
      (actual time=899e-6..899e-6 rows=0.00392 loops=75713)"
    actual_rows: 0.00392
    estimated_rows: 0.05
    q_error: 12.755102040816327
  - node: Single-row index lookup on n using PRIMARY (id=ci.person_id) (cost=0.25
      rows=1) (actual time=397e-6..420e-6 rows=1 loops=75713)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: ((mc.note is not null) and ((mc.note like '%(USA)%') or (mc.note
      like '%(worldwide)%'))) (cost=0.816 rows=0.613) (actual time=0.00857..0.011
      rows=0.34 loops=297)"
    actual_rows: 0.34
    estimated_rows: 0.613
    q_error: 1.802941176470588
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=ci.movie_id)
      (cost=0.816 rows=3.24) (actual time=0.0059..0.0096 rows=2.79 loops=297)
    actual_rows: 2.79
    estimated_rows: 3.24
    q_error: 1.1612903225806452
  - node: "Filter: (cn.country_code = '[us]') (cost=0.251 rows=0.1) (actual time=0.00358..0.00365
      rows=0.921 loops=101)"
    actual_rows: 0.921
    estimated_rows: 0.1
    q_error: 9.209999999999999
  - node: Single-row index lookup on cn using PRIMARY (id=mc.company_id) (cost=0.251
      rows=1) (actual time=0.00317..0.00318 rows=1 loops=101)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: ((mi.info like 'Japan:%200%') or (mi.info like 'USA:%200%')) (cost=1.49
      rows=1.13) (actual time=1.99..2.03 rows=2.13 loops=93)"
    actual_rows: 2.13
    estimated_rows: 1.13
    q_error: 1.8849557522123894
  - node: Index lookup on mi using movie_id_movie_info (movie_id=ci.movie_id) (cost=1.49
      rows=5.37) (actual time=0.932..2.01 rows=111 loops=93)
    actual_rows: 111.0
    estimated_rows: 5.37
    q_error: 20.670391061452513
  - node: "Filter: (it.info = 'release dates') (cost=0.261 rows=0.1) (actual time=877e-6..939e-6
      rows=1 loops=198)"
    actual_rows: 1.0
    estimated_rows: 0.1
    q_error: 10.0
  - node: Single-row index lookup on it using PRIMARY (id=mi.info_type_id) (cost=0.261
      rows=1) (actual time=471e-6..491e-6 rows=1 loops=198)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Covering index lookup on an using person_id_aka_name (person_id=ci.person_id)
      (cost=2.02 rows=1.5) (actual time=0.0034..0.00369 rows=1.03 loops=198)
    actual_rows: 1.03
    estimated_rows: 1.5
    q_error: 1.4563106796116505

- query: "-- JOB Query 19b\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(n.name) AS voicing_actress,\n       MIN(t.title) AS kung_fu_panda\n
    FROM aka_name AS an,\n     char_name AS chn,\n     cast_info AS ci,\n     company_name
    AS cn,\n     info_type AS it,\n     movie_companies AS mc,\n     movie_info AS
    mi,\n     name AS n,\n     role_type AS rt,\n     title AS t\nWHERE ci.note =
    '(voice)'\n  AND cn.country_code ='[us]'\n  AND it.info = 'release dates'\n  AND
    mc.note LIKE '%(200%)%'\n  AND (mc.note LIKE '%(USA)%'\n       OR mc.note LIKE
    '%(worldwide)%')\n  AND mi.info IS NOT NULL\n  AND (mi.info LIKE 'Japan:%2007%'\n\
    \       OR mi.info LIKE 'USA:%2008%')\n  AND n.gender ='f'\n  AND n.name LIKE
    '%Angel%'\n  AND rt.role ='actress'\n  AND t.production_year BETWEEN 2007 AND
    2008\n  AND t.title LIKE '%Kung%Fu%Panda%'\n  AND t.id = mi.movie_id\n  AND t.id
    = mc.movie_id\n  AND t.id = ci.movie_id\n  AND mc.movie_id = ci.movie_id\n  AND
    mc.movie_id = mi.movie_id\n  AND mi.movie_id = ci.movie_id\n  AND cn.id = mc.company_id\n\
    \  AND it.id = mi.info_type_id\n  AND n.id = ci.person_id\n  AND rt.id = ci.role_id\n\
    \  AND n.id = an.person_id\n  AND ci.person_id = an.person_id\n  AND chn.id =
    ci.person_role_id"
  qep:
  - node: 'Aggregate: min(n.`name`), min(t.title) (cost=2267 rows=1) (actual time=16647..16647
      rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=2267 rows=0.00186) (actual time=7338..16647
      rows=15 loops=1)
    actual_rows: 15.0
    estimated_rows: 0.00186
    q_error: 8064.516129032258
  - node: Nested loop inner join (cost=2267 rows=0.00124) (actual time=7338..16647
      rows=3 loops=1)
    actual_rows: 3.0
    estimated_rows: 0.00124
    q_error: 2419.3548387096776
  - node: Nested loop inner join (cost=2267 rows=0.0124) (actual time=7338..16647
      rows=3 loops=1)
    actual_rows: 3.0
    estimated_rows: 0.0124
    q_error: 241.93548387096774
  - node: Nested loop inner join (cost=2267 rows=0.011) (actual time=7337..16646 rows=3
      loops=1)
    actual_rows: 3.0
    estimated_rows: 0.011
    q_error: 272.72727272727275
  - node: Nested loop inner join (cost=2267 rows=0.11) (actual time=7337..16646 rows=3
      loops=1)
    actual_rows: 3.0
    estimated_rows: 0.11
    q_error: 27.272727272727273
  - node: Nested loop inner join (cost=2266 rows=1.45) (actual time=7337..16646 rows=1
      loops=1)
    actual_rows: 1.0
    estimated_rows: 1.45
    q_error: 1.45
  - node: Nested loop inner join (cost=2255 rows=29) (actual time=1470..16646 rows=15
      loops=1)
    actual_rows: 15.0
    estimated_rows: 29.0
    q_error: 1.9333333333333333
  - node: Nested loop inner join (cost=2236 rows=29) (actual time=1470..16646 rows=15
      loops=1)
    actual_rows: 15.0
    estimated_rows: 29.0
    q_error: 1.9333333333333333
  - node: Nested loop inner join (cost=2033 rows=580) (actual time=1.2..16308 rows=203241
      loops=1)
    actual_rows: 203241.0
    estimated_rows: 580.0
    q_error: 350.4155172413793
  - node: "Filter: (rt.`role` = 'actress') (cost=1.45 rows=1.2) (actual time=0.0231..0.0311
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.2
    q_error: 1.2
  - node: Table scan on rt (cost=1.45 rows=12) (actual time=0.02..0.0271 rows=12 loops=1)
    actual_rows: 12.0
    estimated_rows: 12.0
    q_error: 1.0
  - node: "Filter: ((ci.note = '(voice)') and (ci.person_role_id is not null)) (cost=1249
      rows=484) (actual time=1.18..16297 rows=203241 loops=1)"
    actual_rows: 203241.0
    estimated_rows: 484.0
    q_error: 419.9194214876033
  - node: Index lookup on ci using role_id_cast_info (role_id=rt.id) (cost=1249 rows=4836)
      (actual time=0.0229..15746 rows=7.45e+6 loops=1)
    actual_rows: 7450000.0
    estimated_rows: 4836.0
    q_error: 1540.5293631100083
  - node: "Filter: ((t.production_year between 2007 and 2008) and (t.title like '%Kung%Fu%Panda%'))
      (cost=0.25 rows=0.05) (actual time=0.00156..0.00156 rows=73.8e-6 loops=203241)"
    actual_rows: 7.38e-05
    estimated_rows: 0.05
    q_error: 677.5067750677507
  - node: Single-row index lookup on t using PRIMARY (id=ci.movie_id) (cost=0.25 rows=1)
      (actual time=0.00131..0.00133 rows=1 loops=203241)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Single-row covering index lookup on chn using PRIMARY (id=ci.person_role_id)
      (cost=0.579 rows=1) (actual time=0.00697..0.00699 rows=1 loops=15)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: ((n.gender = 'f') and (n.`name` like '%Angel%')) (cost=0.25 rows=0.05)
      (actual time=0.00618..0.00618 rows=0.0667 loops=15)"
    actual_rows: 0.0667
    estimated_rows: 0.05
    q_error: 1.3339999999999999
  - node: Single-row index lookup on n using PRIMARY (id=ci.person_id) (cost=0.25
      rows=1) (actual time=0.0046..0.00461 rows=1 loops=15)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: ((mc.note like '%(200%)%') and ((mc.note like '%(USA)%') or (mc.note
      like '%(worldwide)%'))) (cost=0.816 rows=0.0756) (actual time=0.05..0.0801 rows=3
      loops=1)"
    actual_rows: 3.0
    estimated_rows: 0.0756
    q_error: 39.682539682539684
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=ci.movie_id)
      (cost=0.816 rows=3.24) (actual time=0.0202..0.0619 rows=35 loops=1)
    actual_rows: 35.0
    estimated_rows: 3.24
    q_error: 10.802469135802468
  - node: "Filter: (cn.country_code = '[us]') (cost=0.341 rows=0.1) (actual time=0.00307..0.0031
      rows=1 loops=3)"
    actual_rows: 1.0
    estimated_rows: 0.1
    q_error: 10.0
  - node: Single-row index lookup on cn using PRIMARY (id=mc.company_id) (cost=0.341
      rows=1) (actual time=0.00273..0.00273 rows=1 loops=3)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: ((mi.info like 'Japan:%2007%') or (mi.info like 'USA:%2008%'))
      (cost=11.6 rows=1.13) (actual time=0.384..0.457 rows=1 loops=3)"
    actual_rows: 1.0
    estimated_rows: 1.13
    q_error: 1.13
  - node: Index lookup on mi using movie_id_movie_info (movie_id=ci.movie_id) (cost=11.6
      rows=5.37) (actual time=0.00437..0.424 rows=373 loops=3)
    actual_rows: 373.0
    estimated_rows: 5.37
    q_error: 69.45996275605214
  - node: "Filter: (it.info = 'release dates') (cost=1.06 rows=0.1) (actual time=0.00333..0.0034
      rows=1 loops=3)"
    actual_rows: 1.0
    estimated_rows: 0.1
    q_error: 10.0
  - node: Single-row index lookup on it using PRIMARY (id=mi.info_type_id) (cost=1.06
      rows=1) (actual time=0.00263..0.00267 rows=1 loops=3)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Covering index lookup on an using person_id_aka_name (person_id=ci.person_id)
      (cost=122 rows=1.5) (actual time=0.0045..0.0061 rows=5 loops=3)
    actual_rows: 5.0
    estimated_rows: 1.5
    q_error: 3.3333333333333335

- query: "-- JOB Query 19c\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(n.name) AS voicing_actress,\n       MIN(t.title) AS jap_engl_voiced_movie\n
    FROM aka_name AS an,\n     char_name AS chn,\n     cast_info AS ci,\n     company_name
    AS cn,\n     info_type AS it,\n     movie_companies AS mc,\n     movie_info AS
    mi,\n     name AS n,\n     role_type AS rt,\n     title AS t\nWHERE ci.note IN
    ('(voice)',\n                  '(voice: Japanese version)',\n                \
    \  '(voice) (uncredited)',\n                  '(voice: English version)')\n  AND
    cn.country_code ='[us]'\n  AND it.info = 'release dates'\n  AND mi.info IS NOT
    NULL\n  AND (mi.info LIKE 'Japan:%200%'\n       OR mi.info LIKE 'USA:%200%')\n\
    \  AND n.gender ='f'\n  AND n.name LIKE '%An%'\n  AND rt.role ='actress'\n  AND
    t.production_year > 2000\n  AND t.id = mi.movie_id\n  AND t.id = mc.movie_id\n\
    \  AND t.id = ci.movie_id\n  AND mc.movie_id = ci.movie_id\n  AND mc.movie_id
    = mi.movie_id\n  AND mi.movie_id = ci.movie_id\n  AND cn.id = mc.company_id\n\
    \  AND it.id = mi.info_type_id\n  AND n.id = ci.person_id\n  AND rt.id = ci.role_id\n\
    \  AND n.id = an.person_id\n  AND ci.person_id = an.person_id\n  AND chn.id =
    ci.person_role_id"
  qep:
  - node: 'Aggregate: min(n.`name`), min(t.title) (cost=3742 rows=1) (actual time=21549..21549
      rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=3742 rows=2.13) (actual time=108..21537 rows=70059
      loops=1)
    actual_rows: 70059.0
    estimated_rows: 2.13
    q_error: 32891.54929577465
  - node: Nested loop inner join (cost=3736 rows=21.3) (actual time=108..21377 rows=165206
      loops=1)
    actual_rows: 165206.0
    estimated_rows: 21.3
    q_error: 7756.150234741784
  - node: Nested loop inner join (cost=3729 rows=6.55) (actual time=108..21132 rows=58490
      loops=1)
    actual_rows: 58490.0
    estimated_rows: 6.55
    q_error: 8929.770992366413
  - node: Nested loop inner join (cost=3727 rows=4.36) (actual time=16..21050 rows=30131
      loops=1)
    actual_rows: 30131.0
    estimated_rows: 4.36
    q_error: 6910.779816513761
  - node: Nested loop inner join (cost=3711 rows=43.6) (actual time=16..21028 rows=30131
      loops=1)
    actual_rows: 30131.0
    estimated_rows: 43.6
    q_error: 691.0779816513761
  - node: Nested loop inner join (cost=3639 rows=38.7) (actual time=15.2..17103 rows=38182
      loops=1)
    actual_rows: 38182.0
    estimated_rows: 38.7
    q_error: 986.6149870801033
  - node: Nested loop inner join (cost=3368 rows=774) (actual time=2.61..16957 rows=159539
      loops=1)
    actual_rows: 159539.0
    estimated_rows: 774.0
    q_error: 206.12273901808786
  - node: Nested loop inner join (cost=2845 rows=774) (actual time=2.6..16734 rows=159539
      loops=1)
    actual_rows: 159539.0
    estimated_rows: 774.0
    q_error: 206.12273901808786
  - node: Nested loop inner join (cost=2033 rows=2321) (actual time=1.47..16313 rows=255750
      loops=1)
    actual_rows: 255750.0
    estimated_rows: 2321.0
    q_error: 110.18957345971565
  - node: "Filter: (rt.`role` = 'actress') (cost=1.45 rows=1.2) (actual time=0.0194..0.0314
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.2
    q_error: 1.2
  - node: Table scan on rt (cost=1.45 rows=12) (actual time=0.0169..0.0275 rows=12
      loops=1)
    actual_rows: 12.0
    estimated_rows: 12.0
    q_error: 1.0
  - node: "Filter: ((ci.note in ('(voice)','(voice: Japanese version)','(voice) (uncredited)','(voice:
      English version)')) and (ci.person_role_id is not null)) (cost=1370 rows=1935)
      (actual time=1.45..16298 rows=255750 loops=1)"
    actual_rows: 255750.0
    estimated_rows: 1935.0
    q_error: 132.1705426356589
  - node: Index lookup on ci using role_id_cast_info (role_id=rt.id) (cost=1370 rows=4836)
      (actual time=0.022..15624 rows=7.45e+6 loops=1)
    actual_rows: 7450000.0
    estimated_rows: 4836.0
    q_error: 1540.5293631100083
  - node: 'Filter: (t.production_year > 2000) (cost=0.25 rows=0.333) (actual time=0.00147..0.00151
      rows=0.624 loops=255750)'
    actual_rows: 0.624
    estimated_rows: 0.333
    q_error: 1.8738738738738738
  - node: Single-row index lookup on t using PRIMARY (id=ci.movie_id) (cost=0.25 rows=1)
      (actual time=0.0013..0.00132 rows=1 loops=255750)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Single-row covering index lookup on chn using PRIMARY (id=ci.person_role_id)
      (cost=0.576 rows=1) (actual time=0.00121..0.00124 rows=1 loops=159539)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: ((n.gender = 'f') and (n.`name` like '%An%')) (cost=0.25 rows=0.05)
      (actual time=787e-6..804e-6 rows=0.239 loops=159539)"
    actual_rows: 0.239
    estimated_rows: 0.05
    q_error: 4.779999999999999
  - node: Single-row index lookup on n using PRIMARY (id=ci.person_id) (cost=0.25
      rows=1) (actual time=361e-6..384e-6 rows=1 loops=159539)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: ((mi.info like 'Japan:%200%') or (mi.info like 'USA:%200%')) (cost=1.35
      rows=1.13) (actual time=0.1..0.103 rows=0.789 loops=38182)"
    actual_rows: 0.789
    estimated_rows: 1.13
    q_error: 1.4321926489226868
  - node: Index lookup on mi using movie_id_movie_info (movie_id=ci.movie_id) (cost=1.35
      rows=5.37) (actual time=0.0505..0.101 rows=11 loops=38182)
    actual_rows: 11.0
    estimated_rows: 5.37
    q_error: 2.0484171322160147
  - node: "Filter: (it.info = 'release dates') (cost=0.25 rows=0.1) (actual time=484e-6..548e-6
      rows=1 loops=30131)"
    actual_rows: 1.0
    estimated_rows: 0.1
    q_error: 10.0
  - node: Single-row index lookup on it using PRIMARY (id=mi.info_type_id) (cost=0.25
      rows=1) (actual time=189e-6..210e-6 rows=1 loops=30131)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Covering index lookup on an using person_id_aka_name (person_id=ci.person_id)
      (cost=0.371 rows=1.5) (actual time=0.00195..0.00255 rows=1.94 loops=30131)
    actual_rows: 1.94
    estimated_rows: 1.5
    q_error: 1.2933333333333332
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=ci.movie_id)
      (cost=0.86 rows=3.24) (actual time=0.0027..0.00397 rows=2.82 loops=58490)
    actual_rows: 2.82
    estimated_rows: 3.24
    q_error: 1.148936170212766
  - node: "Filter: (cn.country_code = '[us]') (cost=0.148 rows=0.1) (actual time=846e-6..873e-6
      rows=0.424 loops=165206)"
    actual_rows: 0.424
    estimated_rows: 0.1
    q_error: 4.239999999999999
  - node: Single-row index lookup on cn using PRIMARY (id=mc.company_id) (cost=0.148
      rows=1) (actual time=673e-6..693e-6 rows=1 loops=165206)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 19d\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(n.name) AS voicing_actress,\n       MIN(t.title) AS jap_engl_voiced_movie\n
    FROM aka_name AS an,\n     char_name AS chn,\n     cast_info AS ci,\n     company_name
    AS cn,\n     info_type AS it,\n     movie_companies AS mc,\n     movie_info AS
    mi,\n     name AS n,\n     role_type AS rt,\n     title AS t\nWHERE ci.note IN
    ('(voice)',\n                  '(voice: Japanese version)',\n                \
    \  '(voice) (uncredited)',\n                  '(voice: English version)')\n  AND
    cn.country_code ='[us]'\n  AND it.info = 'release dates'\n  AND n.gender ='f'\n\
    \  AND rt.role ='actress'\n  AND t.production_year > 2000\n  AND t.id = mi.movie_id\n\
    \  AND t.id = mc.movie_id\n  AND t.id = ci.movie_id\n  AND mc.movie_id = ci.movie_id\n\
    \  AND mc.movie_id = mi.movie_id\n  AND mi.movie_id = ci.movie_id\n  AND cn.id
    = mc.company_id\n  AND it.id = mi.info_type_id\n  AND n.id = ci.person_id\n  AND
    rt.id = ci.role_id\n  AND n.id = an.person_id\n  AND ci.person_id = an.person_id\n\
    \  AND chn.id = ci.person_role_id"
  qep:
  - node: 'Aggregate: min(n.`name`), min(t.title) (cost=4012 rows=1) (actual time=36246..36246
      rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=4010 rows=20.3) (actual time=2.81..35995 rows=1.76e+6
      loops=1)
    actual_rows: 1760000.0
    estimated_rows: 20.3
    q_error: 86699.50738916257
  - node: Nested loop inner join (cost=3980 rows=203) (actual time=2.79..31057 rows=10.3e+6
      loops=1)
    actual_rows: 10300000.0
    estimated_rows: 203.0
    q_error: 50738.91625615764
  - node: Nested loop inner join (cost=3909 rows=37.7) (actual time=2.63..19526 rows=266031
      loops=1)
    actual_rows: 266031.0
    estimated_rows: 37.7
    q_error: 7056.525198938992
  - node: Nested loop inner join (cost=3808 rows=377) (actual time=2.62..18916 rows=549413
      loops=1)
    actual_rows: 549413.0
    estimated_rows: 377.0
    q_error: 1457.3289124668436
  - node: Nested loop inner join (cost=3676 rows=116) (actual time=2.61..17840 rows=290333
      loops=1)
    actual_rows: 290333.0
    estimated_rows: 116.0
    q_error: 2502.8706896551726
  - node: Nested loop inner join (cost=3639 rows=77.4) (actual time=2.6..17440 rows=159397
      loops=1)
    actual_rows: 159397.0
    estimated_rows: 77.4
    q_error: 2059.392764857881
  - node: Nested loop inner join (cost=3368 rows=774) (actual time=2.59..17317 rows=159539
      loops=1)
    actual_rows: 159539.0
    estimated_rows: 774.0
    q_error: 206.12273901808786
  - node: Nested loop inner join (cost=2845 rows=774) (actual time=2.58..17088 rows=159539
      loops=1)
    actual_rows: 159539.0
    estimated_rows: 774.0
    q_error: 206.12273901808786
  - node: Nested loop inner join (cost=2033 rows=2321) (actual time=1.36..16667 rows=255750
      loops=1)
    actual_rows: 255750.0
    estimated_rows: 2321.0
    q_error: 110.18957345971565
  - node: "Filter: (rt.`role` = 'actress') (cost=1.45 rows=1.2) (actual time=0.0212..0.0306
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.2
    q_error: 1.2
  - node: Table scan on rt (cost=1.45 rows=12) (actual time=0.0188..0.0273 rows=12
      loops=1)
    actual_rows: 12.0
    estimated_rows: 12.0
    q_error: 1.0
  - node: "Filter: ((ci.note in ('(voice)','(voice: Japanese version)','(voice) (uncredited)','(voice:
      English version)')) and (ci.person_role_id is not null)) (cost=1370 rows=1935)
      (actual time=1.34..16654 rows=255750 loops=1)"
    actual_rows: 255750.0
    estimated_rows: 1935.0
    q_error: 132.1705426356589
  - node: Index lookup on ci using role_id_cast_info (role_id=rt.id) (cost=1370 rows=4836)
      (actual time=0.022..15939 rows=7.45e+6 loops=1)
    actual_rows: 7450000.0
    estimated_rows: 4836.0
    q_error: 1540.5293631100083
  - node: 'Filter: (t.production_year > 2000) (cost=0.25 rows=0.333) (actual time=0.00148..0.00152
      rows=0.624 loops=255750)'
    actual_rows: 0.624
    estimated_rows: 0.333
    q_error: 1.8738738738738738
  - node: Single-row index lookup on t using PRIMARY (id=ci.movie_id) (cost=0.25 rows=1)
      (actual time=0.00131..0.00133 rows=1 loops=255750)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Single-row covering index lookup on chn using PRIMARY (id=ci.person_role_id)
      (cost=0.576 rows=1) (actual time=0.00125..0.00127 rows=1 loops=159539)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (n.gender = 'f') (cost=0.25 rows=0.1) (actual time=552e-6..618e-6
      rows=0.999 loops=159539)"
    actual_rows: 0.999
    estimated_rows: 0.1
    q_error: 9.99
  - node: Single-row index lookup on n using PRIMARY (id=ci.person_id) (cost=0.25
      rows=1) (actual time=376e-6..398e-6 rows=1 loops=159539)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Covering index lookup on an using person_id_aka_name (person_id=ci.person_id)
      (cost=0.338 rows=1.5) (actual time=0.00172..0.00231 rows=1.82 loops=159397)
    actual_rows: 1.82
    estimated_rows: 1.5
    q_error: 1.2133333333333334
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=ci.movie_id)
      (cost=0.814 rows=3.24) (actual time=0.0027..0.00353 rows=1.89 loops=290333)
    actual_rows: 1.89
    estimated_rows: 3.24
    q_error: 1.7142857142857144
  - node: "Filter: (cn.country_code = '[us]') (cost=0.166 rows=0.1) (actual time=974e-6..0.001
      rows=0.484 loops=549413)"
    actual_rows: 0.484
    estimated_rows: 0.1
    q_error: 4.84
  - node: Single-row index lookup on cn using PRIMARY (id=mc.company_id) (cost=0.166
      rows=1) (actual time=792e-6..813e-6 rows=1 loops=549413)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mi using movie_id_movie_info (movie_id=ci.movie_id) (cost=1.36
      rows=5.37) (actual time=0.00788..0.0416 rows=38.9 loops=266031)
    actual_rows: 38.9
    estimated_rows: 5.37
    q_error: 7.243947858472998
  - node: "Filter: (it.info = 'release dates') (cost=0.0514 rows=0.1) (actual time=386e-6..396e-6
      rows=0.17 loops=10.3e+6)"
    actual_rows: 0.17
    estimated_rows: 0.1
    q_error: 1.7
  - node: Single-row index lookup on it using PRIMARY (id=mi.info_type_id) (cost=0.0514
      rows=1) (actual time=212e-6..233e-6 rows=1 loops=10.3e+6)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 20a\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(t.title) AS complete_downey_ironman_movie\nFROM complete_cast AS cc,\n\
    \     comp_cast_type AS cct1,\n     comp_cast_type AS cct2,\n     char_name AS
    chn,\n     cast_info AS ci,\n     keyword AS k,\n     kind_type AS kt,\n     movie_keyword
    AS mk,\n     name AS n,\n     title AS t\nWHERE cct1.kind = 'cast'\n  AND cct2.kind
    LIKE '%complete%'\n  AND chn.name NOT LIKE '%Sherlock%'\n  AND (chn.name LIKE
    '%Tony%Stark%'\n       OR chn.name LIKE '%Iron%Man%')\n  AND k.keyword IN ('superhero',\n\
    \                    'sequel',\n                    'second-part',\n         \
    \           'marvel-comics',\n                    'based-on-comic',\n        \
    \            'tv-special',\n                    'fight',\n                   \
    \ 'violence')\n  AND kt.kind = 'movie'\n  AND t.production_year > 1950\n  AND
    kt.id = t.kind_id\n  AND t.id = mk.movie_id\n  AND t.id = ci.movie_id\n  AND t.id
    = cc.movie_id\n  AND mk.movie_id = ci.movie_id\n  AND mk.movie_id = cc.movie_id\n\
    \  AND ci.movie_id = cc.movie_id\n  AND chn.id = ci.person_role_id\n  AND n.id
    = ci.person_id\n  AND k.id = mk.keyword_id\n  AND cct1.id = cc.subject_id\n  AND
    cct2.id = cc.status_id"
  qep:
  - node: 'Aggregate: min(t.title) (cost=240638 rows=1) (actual time=11506..11506
      rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=240101 rows=5365) (actual time=5758..11506
      rows=35 loops=1)
    actual_rows: 35.0
    estimated_rows: 5365.0
    q_error: 153.28571428571428
  - node: Nested loop inner join (cost=234173 rows=10730) (actual time=3034..11502
      rows=1385 loops=1)
    actual_rows: 1385.0
    estimated_rows: 10730.0
    q_error: 7.747292418772563
  - node: Nested loop inner join (cost=157989 rows=930) (actual time=3034..11500 rows=14
      loops=1)
    actual_rows: 14.0
    estimated_rows: 930.0
    q_error: 66.42857142857143
  - node: Nested loop inner join (cost=151388 rows=930) (actual time=3034..11500 rows=14
      loops=1)
    actual_rows: 14.0
    estimated_rows: 930.0
    q_error: 66.42857142857143
  - node: Nested loop inner join (cost=70554 rows=4985) (actual time=24.6..4384 rows=787440
      loops=1)
    actual_rows: 787440.0
    estimated_rows: 4985.0
    q_error: 157.9618856569709
  - node: Nested loop inner join (cost=35164 rows=322) (actual time=24.5..299 rows=28583
      loops=1)
    actual_rows: 28583.0
    estimated_rows: 322.0
    q_error: 88.76708074534162
  - node: Inner hash join (cc.status_id = cct2.id), (cc.subject_id = cct1.id) (cost=841
      rows=4834) (actual time=24.4..111 rows=85941 loops=1)
    actual_rows: 85941.0
    estimated_rows: 4834.0
    q_error: 17.778444352503104
  - node: 'Filter: (cc.movie_id is not null) (cost=13889 rows=135359) (actual time=7.73..64
      rows=135086 loops=1)'
    actual_rows: 135086.0
    estimated_rows: 135359.0
    q_error: 1.0020209348118976
  - node: Table scan on cc (cost=13889 rows=135359) (actual time=7.73..54.9 rows=135086
      loops=1)
    actual_rows: 135086.0
    estimated_rows: 135359.0
    q_error: 1.0020209348118976
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: Inner hash join (no condition) (cost=3.68 rows=0.0357) (actual time=16.7..16.7
      rows=2 loops=1)
    actual_rows: 2.0
    estimated_rows: 0.0357
    q_error: 56.02240896358543
  - node: "Filter: (kt.kind = 'movie') (cost=0.951 rows=1) (actual time=0.0094..0.0142
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on kt (cost=0.951 rows=7) (actual time=0.0084..0.0116 rows=7
      loops=1)
    actual_rows: 7.0
    estimated_rows: 7.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: Inner hash join (no condition) (cost=2.8 rows=0.25) (actual time=16.6..16.6
      rows=2 loops=1)
    actual_rows: 2.0
    estimated_rows: 0.25
    q_error: 8.0
  - node: "Filter: (cct2.kind like '%complete%') (cost=1.4 rows=1) (actual time=0.026..0.0286
      rows=2 loops=1)"
    actual_rows: 2.0
    estimated_rows: 1.0
    q_error: 2.0
  - node: Table scan on cct2 (cost=1.4 rows=4) (actual time=0.0209..0.0235 rows=4
      loops=1)
    actual_rows: 4.0
    estimated_rows: 4.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: "Filter: (cct1.kind = 'cast') (cost=1.4 rows=1) (actual time=16.6..16.6
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on cct1 (cost=1.4 rows=4) (actual time=16.6..16.6 rows=4 loops=1)
    actual_rows: 4.0
    estimated_rows: 4.0
    q_error: 1.0
  - node: 'Filter: ((t.kind_id = kt.id) and (t.production_year > 1950)) (cost=0.25
      rows=0.0667) (actual time=0.00203..0.00206 rows=0.333 loops=85941)'
    actual_rows: 0.333
    estimated_rows: 0.0667
    q_error: 4.992503748125937
  - node: Single-row index lookup on t using PRIMARY (id=cc.movie_id) (cost=0.25 rows=1)
      (actual time=0.00179..0.00181 rows=1 loops=85941)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: 'Filter: (ci.person_role_id is not null) (cost=3.87 rows=15.5) (actual time=0.042..0.141
      rows=27.5 loops=28583)'
    actual_rows: 27.5
    estimated_rows: 15.5
    q_error: 1.7741935483870968
  - node: Index lookup on ci using movie_id_cast_info (movie_id=cc.movie_id) (cost=3.87
      rows=15.5) (actual time=0.0415..0.138 rows=53.7 loops=28583)
    actual_rows: 53.7
    estimated_rows: 15.5
    q_error: 3.4645161290322584
  - node: "Filter: ((not((chn.`name` like '%Sherlock%'))) and ((chn.`name` like '%Tony%Stark%')
      or (chn.`name` like '%Iron%Man%'))) (cost=0.576 rows=0.187) (actual time=0.00895..0.00895
      rows=17.8e-6 loops=787440)"
    actual_rows: 1.78e-05
    estimated_rows: 0.187
    q_error: 10505.61797752809
  - node: Single-row index lookup on chn using PRIMARY (id=ci.person_role_id) (cost=0.576
      rows=1) (actual time=0.00829..0.00831 rows=1 loops=787440)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Single-row covering index lookup on n using PRIMARY (id=ci.person_id) (cost=0.25
      rows=1) (actual time=0.00441..0.00442 rows=1 loops=14)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mk using movie_id_movie_keyword (movie_id=cc.movie_id) (cost=2.89
      rows=11.5) (actual time=0.0542..0.161 rows=98.9 loops=14)
    actual_rows: 98.9
    estimated_rows: 11.5
    q_error: 8.6
  - node: "Filter: (k.keyword in ('superhero','sequel','second-part','marvel-comics','based-on-comic','tv-special','fight','violence'))
      (cost=0.0162 rows=0.5) (actual time=0.00306..0.00306 rows=0.0253 loops=1385)"
    actual_rows: 0.0253
    estimated_rows: 0.5
    q_error: 19.76284584980237
  - node: Single-row index lookup on k using PRIMARY (id=mk.keyword_id) (cost=0.0162
      rows=1) (actual time=0.00275..0.00278 rows=1 loops=1385)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 20b\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(t.title) AS complete_downey_ironman_movie\nFROM complete_cast AS cc,\n\
    \     comp_cast_type AS cct1,\n     comp_cast_type AS cct2,\n     char_name AS
    chn,\n     cast_info AS ci,\n     keyword AS k,\n     kind_type AS kt,\n     movie_keyword
    AS mk,\n     name AS n,\n     title AS t\nWHERE cct1.kind = 'cast'\n  AND cct2.kind
    LIKE '%complete%'\n  AND chn.name NOT LIKE '%Sherlock%'\n  AND (chn.name LIKE
    '%Tony%Stark%'\n       OR chn.name LIKE '%Iron%Man%')\n  AND k.keyword IN ('superhero',\n\
    \                    'sequel',\n                    'second-part',\n         \
    \           'marvel-comics',\n                    'based-on-comic',\n        \
    \            'tv-special',\n                    'fight',\n                   \
    \ 'violence')\n  AND kt.kind = 'movie'\n  AND n.name LIKE '%Downey%Robert%'\n\
    \  AND t.production_year > 2000\n  AND kt.id = t.kind_id\n  AND t.id = mk.movie_id\n\
    \  AND t.id = ci.movie_id\n  AND t.id = cc.movie_id\n  AND mk.movie_id = ci.movie_id\n\
    \  AND mk.movie_id = cc.movie_id\n  AND ci.movie_id = cc.movie_id\n  AND chn.id
    = ci.person_role_id\n  AND n.id = ci.person_id\n  AND k.id = mk.keyword_id\n \
    \ AND cct1.id = cc.subject_id\n  AND cct2.id = cc.status_id"
  qep:
  - node: 'Aggregate: min(t.title) (cost=121461 rows=1) (actual time=1725..1725 rows=1
      loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=121402 rows=596) (actual time=644..1725 rows=17
      loops=1)
    actual_rows: 17.0
    estimated_rows: 596.0
    q_error: 35.05882352941177
  - node: Nested loop inner join (cost=120743 rows=1192) (actual time=643..1722 rows=698
      loops=1)
    actual_rows: 698.0
    estimated_rows: 1192.0
    q_error: 1.7077363896848137
  - node: Nested loop inner join (cost=112279 rows=103) (actual time=643..1721 rows=4
      loops=1)
    actual_rows: 4.0
    estimated_rows: 103.0
    q_error: 25.75
  - node: Nested loop inner join (cost=105677 rows=930) (actual time=374..1721 rows=8
      loops=1)
    actual_rows: 8.0
    estimated_rows: 930.0
    q_error: 116.25
  - node: Nested loop inner join (cost=70287 rows=4985) (actual time=0.633..1254 rows=169617
      loops=1)
    actual_rows: 169617.0
    estimated_rows: 4985.0
    q_error: 34.02547642928786
  - node: Nested loop inner join (cost=34897 rows=322) (actual time=0.599..216 rows=4696
      loops=1)
    actual_rows: 4696.0
    estimated_rows: 322.0
    q_error: 14.583850931677018
  - node: Inner hash join (cc.status_id = cct2.id), (cc.subject_id = cct1.id) (cost=574
      rows=4834) (actual time=0.578..60.7 rows=85941 loops=1)
    actual_rows: 85941.0
    estimated_rows: 4834.0
    q_error: 17.778444352503104
  - node: 'Filter: (cc.movie_id is not null) (cost=13624 rows=135359) (actual time=0.533..38.3
      rows=135086 loops=1)'
    actual_rows: 135086.0
    estimated_rows: 135359.0
    q_error: 1.0020209348118976
  - node: Table scan on cc (cost=13624 rows=135359) (actual time=0.532..29.9 rows=135086
      loops=1)
    actual_rows: 135086.0
    estimated_rows: 135359.0
    q_error: 1.0020209348118976
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: Inner hash join (no condition) (cost=2.18 rows=0.0357) (actual time=0.0389..0.0405
      rows=2 loops=1)
    actual_rows: 2.0
    estimated_rows: 0.0357
    q_error: 56.02240896358543
  - node: "Filter: (kt.kind = 'movie') (cost=0.951 rows=1) (actual time=0.0042..0.0055
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on kt (cost=0.951 rows=7) (actual time=0.0039..0.0049 rows=7
      loops=1)
    actual_rows: 7.0
    estimated_rows: 7.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: Inner hash join (no condition) (cost=1.3 rows=0.25) (actual time=0.0299..0.031
      rows=2 loops=1)
    actual_rows: 2.0
    estimated_rows: 0.25
    q_error: 8.0
  - node: "Filter: (cct2.kind like '%complete%') (cost=0.65 rows=1) (actual time=0.004..0.0047
      rows=2 loops=1)"
    actual_rows: 2.0
    estimated_rows: 1.0
    q_error: 2.0
  - node: Table scan on cct2 (cost=0.65 rows=4) (actual time=0.0021..0.0028 rows=4
      loops=1)
    actual_rows: 4.0
    estimated_rows: 4.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: "Filter: (cct1.kind = 'cast') (cost=0.65 rows=1) (actual time=0.0147..0.0181
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on cct1 (cost=0.65 rows=4) (actual time=0.0126..0.0158 rows=4
      loops=1)
    actual_rows: 4.0
    estimated_rows: 4.0
    q_error: 1.0
  - node: 'Filter: ((t.kind_id = kt.id) and (t.production_year > 2000)) (cost=0.25
      rows=0.0667) (actual time=0.0017..0.0017 rows=0.0546 loops=85941)'
    actual_rows: 0.0546
    estimated_rows: 0.0667
    q_error: 1.2216117216117215
  - node: Single-row index lookup on t using PRIMARY (id=cc.movie_id) (cost=0.25 rows=1)
      (actual time=0.00145..0.00147 rows=1 loops=85941)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: 'Filter: (ci.person_role_id is not null) (cost=3.87 rows=15.5) (actual time=0.0427..0.219
      rows=36.1 loops=4696)'
    actual_rows: 36.1
    estimated_rows: 15.5
    q_error: 2.329032258064516
  - node: Index lookup on ci using movie_id_cast_info (movie_id=cc.movie_id) (cost=3.87
      rows=15.5) (actual time=0.0424..0.214 rows=84.2 loops=4696)
    actual_rows: 84.2
    estimated_rows: 15.5
    q_error: 5.432258064516129
  - node: "Filter: ((not((chn.`name` like '%Sherlock%'))) and ((chn.`name` like '%Tony%Stark%')
      or (chn.`name` like '%Iron%Man%'))) (cost=0.25 rows=0.187) (actual time=0.00266..0.00266
      rows=47.2e-6 loops=169617)"
    actual_rows: 4.72e-05
    estimated_rows: 0.187
    q_error: 3961.864406779661
  - node: Single-row index lookup on chn using PRIMARY (id=ci.person_role_id) (cost=0.25
      rows=1) (actual time=0.00193..0.00196 rows=1 loops=169617)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (n.`name` like '%Downey%Robert%') (cost=0.25 rows=0.111) (actual
      time=0.00386..0.00391 rows=0.5 loops=8)"
    actual_rows: 0.5
    estimated_rows: 0.111
    q_error: 4.504504504504505
  - node: Single-row index lookup on n using PRIMARY (id=ci.person_id) (cost=0.25
      rows=1) (actual time=0.00325..0.00325 rows=1 loops=8)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mk using movie_id_movie_keyword (movie_id=cc.movie_id) (cost=2.89
      rows=11.5) (actual time=0.0214..0.209 rows=174 loops=4)
    actual_rows: 174.0
    estimated_rows: 11.5
    q_error: 15.130434782608695
  - node: "Filter: (k.keyword in ('superhero','sequel','second-part','marvel-comics','based-on-comic','tv-special','fight','violence'))
      (cost=0.0162 rows=0.5) (actual time=0.0032..0.0032 rows=0.0244 loops=698)"
    actual_rows: 0.0244
    estimated_rows: 0.5
    q_error: 20.491803278688522
  - node: Single-row index lookup on k using PRIMARY (id=mk.keyword_id) (cost=0.0162
      rows=1) (actual time=0.0028..0.00283 rows=1 loops=698)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 20c\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(n.name) AS cast_member,\n       MIN(t.title) AS complete_dynamic_hero_movie\n
    FROM complete_cast AS cc,\n     comp_cast_type AS cct1,\n     comp_cast_type AS
    cct2,\n     char_name AS chn,\n     cast_info AS ci,\n     keyword AS k,\n   \
    \  kind_type AS kt,\n     movie_keyword AS mk,\n     name AS n,\n     title AS
    t\nWHERE cct1.kind = 'cast'\n  AND cct2.kind LIKE '%complete%'\n  AND chn.name
    IS NOT NULL\n  AND (chn.name LIKE '%man%'\n       OR chn.name LIKE '%Man%')\n\
    \  AND k.keyword IN ('superhero',\n                    'marvel-comics',\n    \
    \                'based-on-comic',\n                    'tv-special',\n      \
    \              'fight',\n                    'violence',\n                   \
    \ 'magnet',\n                    'web',\n                    'claw',\n       \
    \             'laser')\n  AND kt.kind = 'movie'\n  AND t.production_year > 2000\n\
    \  AND kt.id = t.kind_id\n  AND t.id = mk.movie_id\n  AND t.id = ci.movie_id\n\
    \  AND t.id = cc.movie_id\n  AND mk.movie_id = ci.movie_id\n  AND mk.movie_id
    = cc.movie_id\n  AND ci.movie_id = cc.movie_id\n  AND chn.id = ci.person_role_id\n\
    \  AND n.id = ci.person_id\n  AND k.id = mk.keyword_id\n  AND cct1.id = cc.subject_id\n\
    \  AND cct2.id = cc.status_id"
  qep:
  - node: 'Aggregate: min(n.`name`), min(t.title) (cost=206083 rows=1) (actual time=5338..5338
      rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=205479 rows=6036) (actual time=2.45..5334 rows=5409
      loops=1)
    actual_rows: 5409.0
    estimated_rows: 6036.0
    q_error: 1.1159179145867997
  - node: Nested loop inner join (cost=198809 rows=12071) (actual time=1.91..2905
      rows=1.15e+6 loops=1)
    actual_rows: 1150000.0
    estimated_rows: 12071.0
    q_error: 95.2696545439483
  - node: Nested loop inner join (cost=113104 rows=1046) (actual time=1.89..1645 rows=10774
      loops=1)
    actual_rows: 10774.0
    estimated_rows: 1046.0
    q_error: 10.300191204588911
  - node: Nested loop inner join (cost=105677 rows=1046) (actual time=1.88..1611 rows=10774
      loops=1)
    actual_rows: 10774.0
    estimated_rows: 1046.0
    q_error: 10.300191204588911
  - node: Nested loop inner join (cost=70287 rows=4985) (actual time=0.658..1206 rows=169617
      loops=1)
    actual_rows: 169617.0
    estimated_rows: 4985.0
    q_error: 34.02547642928786
  - node: Nested loop inner join (cost=34897 rows=322) (actual time=0.617..198 rows=4696
      loops=1)
    actual_rows: 4696.0
    estimated_rows: 322.0
    q_error: 14.583850931677018
  - node: Inner hash join (cc.status_id = cct2.id), (cc.subject_id = cct1.id) (cost=574
      rows=4834) (actual time=0.596..59.2 rows=85941 loops=1)
    actual_rows: 85941.0
    estimated_rows: 4834.0
    q_error: 17.778444352503104
  - node: 'Filter: (cc.movie_id is not null) (cost=13624 rows=135359) (actual time=0.55..37.5
      rows=135086 loops=1)'
    actual_rows: 135086.0
    estimated_rows: 135359.0
    q_error: 1.0020209348118976
  - node: Table scan on cc (cost=13624 rows=135359) (actual time=0.55..29.2 rows=135086
      loops=1)
    actual_rows: 135086.0
    estimated_rows: 135359.0
    q_error: 1.0020209348118976
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: Inner hash join (no condition) (cost=2.18 rows=0.0357) (actual time=0.0398..0.0417
      rows=2 loops=1)
    actual_rows: 2.0
    estimated_rows: 0.0357
    q_error: 56.02240896358543
  - node: "Filter: (kt.kind = 'movie') (cost=0.951 rows=1) (actual time=0.0038..0.0054
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on kt (cost=0.951 rows=7) (actual time=0.0036..0.0046 rows=7
      loops=1)
    actual_rows: 7.0
    estimated_rows: 7.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: Inner hash join (no condition) (cost=1.3 rows=0.25) (actual time=0.0305..0.0319
      rows=2 loops=1)
    actual_rows: 2.0
    estimated_rows: 0.25
    q_error: 8.0
  - node: "Filter: (cct2.kind like '%complete%') (cost=0.65 rows=1) (actual time=0.0036..0.0043
      rows=2 loops=1)"
    actual_rows: 2.0
    estimated_rows: 1.0
    q_error: 2.0
  - node: Table scan on cct2 (cost=0.65 rows=4) (actual time=0.002..0.0027 rows=4
      loops=1)
    actual_rows: 4.0
    estimated_rows: 4.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: "Filter: (cct1.kind = 'cast') (cost=0.65 rows=1) (actual time=0.0148..0.018
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on cct1 (cost=0.65 rows=4) (actual time=0.013..0.0157 rows=4
      loops=1)
    actual_rows: 4.0
    estimated_rows: 4.0
    q_error: 1.0
  - node: 'Filter: ((t.kind_id = kt.id) and (t.production_year > 2000)) (cost=0.25
      rows=0.0667) (actual time=0.00152..0.00153 rows=0.0546 loops=85941)'
    actual_rows: 0.0546
    estimated_rows: 0.0667
    q_error: 1.2216117216117215
  - node: Single-row index lookup on t using PRIMARY (id=cc.movie_id) (cost=0.25 rows=1)
      (actual time=0.00132..0.00134 rows=1 loops=85941)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: 'Filter: (ci.person_role_id is not null) (cost=3.87 rows=15.5) (actual time=0.0409..0.213
      rows=36.1 loops=4696)'
    actual_rows: 36.1
    estimated_rows: 15.5
    q_error: 2.329032258064516
  - node: Index lookup on ci using movie_id_cast_info (movie_id=cc.movie_id) (cost=3.87
      rows=15.5) (actual time=0.0407..0.208 rows=84.2 loops=4696)
    actual_rows: 84.2
    estimated_rows: 15.5
    q_error: 5.432258064516129
  - node: "Filter: ((chn.`name` like '%man%') or (chn.`name` like '%Man%')) (cost=0.25
      rows=0.21) (actual time=0.00229..0.0023 rows=0.0635 loops=169617)"
    actual_rows: 0.0635
    estimated_rows: 0.21
    q_error: 3.3070866141732282
  - node: Single-row index lookup on chn using PRIMARY (id=ci.person_role_id) (cost=0.25
      rows=1) (actual time=0.00182..0.00184 rows=1 loops=169617)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Single-row index lookup on n using PRIMARY (id=ci.person_id) (cost=0.25
      rows=1) (actual time=0.00301..0.00303 rows=1 loops=10774)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mk using movie_id_movie_keyword (movie_id=cc.movie_id) (cost=2.89
      rows=11.5) (actual time=0.0147..0.111 rows=106 loops=10774)
    actual_rows: 106.0
    estimated_rows: 11.5
    q_error: 9.217391304347826
  - node: "Filter: (k.keyword in ('superhero','marvel-comics','based-on-comic','tv-special','fight','violence','magnet','web','claw','laser'))
      (cost=0.0162 rows=0.5) (actual time=0.00204..0.00204 rows=0.00472 loops=1.15e+6)"
    actual_rows: 0.00472
    estimated_rows: 0.5
    q_error: 105.9322033898305
  - node: Single-row index lookup on k using PRIMARY (id=mk.keyword_id) (cost=0.0162
      rows=1) (actual time=0.00174..0.00177 rows=1 loops=1.15e+6)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 21a\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(cn.name) AS company_name,\n       MIN(lt.link) AS link_type,\n    \
    \   MIN(t.title) AS western_follow_up\nFROM company_name AS cn,\n     company_type
    AS ct,\n     keyword AS k,\n     link_type AS lt,\n     movie_companies AS mc,\n\
    \     movie_info AS mi,\n     movie_keyword AS mk,\n     movie_link AS ml,\n \
    \    title AS t\nWHERE cn.country_code !='[pl]'\n  AND (cn.name LIKE '%Film%'\n\
    \       OR cn.name LIKE '%Warner%')\n  AND ct.kind ='production companies'\n \
    \ AND k.keyword ='sequel'\n  AND lt.link LIKE '%follow%'\n  AND mc.note IS NULL\n\
    \  AND mi.info IN ('Sweden',\n                  'Norway',\n                  'Germany',\n\
    \                  'Denmark',\n                  'Swedish',\n                \
    \  'Denish',\n                  'Norwegian',\n                  'German')\n  AND
    t.production_year BETWEEN 1950 AND 2000\n  AND lt.id = ml.link_type_id\n  AND
    ml.movie_id = t.id\n  AND t.id = mk.movie_id\n  AND mk.keyword_id = k.id\n  AND
    t.id = mc.movie_id\n  AND mc.company_type_id = ct.id\n  AND mc.company_id = cn.id\n\
    \  AND mi.movie_id = t.id\n  AND ml.movie_id = mk.movie_id\n  AND ml.movie_id
    = mc.movie_id\n  AND mk.movie_id = mc.movie_id\n  AND ml.movie_id = mi.movie_id\n\
    \  AND mk.movie_id = mi.movie_id\n  AND mc.movie_id = mi.movie_id"
  qep:
  - node: 'Aggregate: min(cn.`name`), min(lt.link), min(t.title) (cost=1772 rows=1)
      (actual time=36.2..36.2 rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=1771 rows=8.89) (actual time=1.95..35.8 rows=1410
      loops=1)
    actual_rows: 1410.0
    estimated_rows: 8.89
    q_error: 158.60517435320583
  - node: Nested loop inner join (cost=1730 rows=3.31) (actual time=1.35..26.7 rows=310
      loops=1)
    actual_rows: 310.0
    estimated_rows: 3.31
    q_error: 93.65558912386707
  - node: Nested loop inner join (cost=1652 rows=33.1) (actual time=0.692..19.8 rows=6864
      loops=1)
    actual_rows: 6864.0
    estimated_rows: 33.1
    q_error: 207.3716012084592
  - node: Nested loop inner join (cost=1574 rows=2.87) (actual time=0.675..14.3 rows=699
      loops=1)
    actual_rows: 699.0
    estimated_rows: 2.87
    q_error: 243.55400696864112
  - node: Nested loop inner join (cost=1538 rows=15.2) (actual time=0.348..11.1 rows=2794
      loops=1)
    actual_rows: 2794.0
    estimated_rows: 15.2
    q_error: 183.81578947368422
  - node: Nested loop inner join (cost=1181 rows=46.8) (actual time=0.322..4.06 rows=1332
      loops=1)
    actual_rows: 1332.0
    estimated_rows: 46.8
    q_error: 28.461538461538463
  - node: Nested loop inner join (cost=190 rows=422) (actual time=0.294..2.38 rows=2315
      loops=1)
    actual_rows: 2315.0
    estimated_rows: 422.0
    q_error: 5.485781990521327
  - node: Inner hash join (no condition) (cost=2.7 rows=0.222) (actual time=0.0325..0.0485
      rows=2 loops=1)
    actual_rows: 2.0
    estimated_rows: 0.222
    q_error: 9.00900900900901
  - node: "Filter: (lt.link like '%follow%') (cost=2.05 rows=2) (actual time=0.0065..0.0192
      rows=2 loops=1)"
    actual_rows: 2.0
    estimated_rows: 2.0
    q_error: 1.0
  - node: Table scan on lt (cost=2.05 rows=18) (actual time=0.0053..0.0137 rows=18
      loops=1)
    actual_rows: 18.0
    estimated_rows: 18.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: "Filter: (ct.kind = 'production companies') (cost=0.65 rows=1) (actual time=0.0167..0.0187
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on ct (cost=0.65 rows=4) (actual time=0.0144..0.0169 rows=4 loops=1)
    actual_rows: 4.0
    estimated_rows: 4.0
    q_error: 1.0
  - node: Index lookup on ml using link_type_id_movie_link (link_type_id=lt.id) (cost=168
      rows=1898) (actual time=0.229..1.12 rows=1158 loops=2)
    actual_rows: 1158.0
    estimated_rows: 1898.0
    q_error: 1.6390328151986182
  - node: 'Filter: (t.production_year between 1950 and 2000) (cost=0.25 rows=0.111)
      (actual time=604e-6..632e-6 rows=0.575 loops=2315)'
    actual_rows: 0.575
    estimated_rows: 0.111
    q_error: 5.18018018018018
  - node: Single-row index lookup on t using PRIMARY (id=ml.movie_id) (cost=0.25 rows=1)
      (actual time=500e-6..516e-6 rows=1 loops=2315)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: 'Filter: ((mc.company_type_id = ct.id) and (mc.note is null)) (cost=0.811
      rows=0.324) (actual time=0.0036..0.0051 rows=2.1 loops=1332)'
    actual_rows: 2.1
    estimated_rows: 0.324
    q_error: 6.481481481481482
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=ml.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00177..0.00476 rows=4.13 loops=1332)
    actual_rows: 4.13
    estimated_rows: 3.24
    q_error: 1.2746913580246912
  - node: "Filter: ((cn.country_code <> '[pl]') and ((cn.`name` like '%Film%') or
      (cn.`name` like '%Warner%'))) (cost=0.25 rows=0.189) (actual time=0.00104..0.00106
      rows=0.25 loops=2794)"
    actual_rows: 0.25
    estimated_rows: 0.189
    q_error: 1.3227513227513228
  - node: Single-row index lookup on cn using PRIMARY (id=mc.company_id) (cost=0.25
      rows=1) (actual time=681e-6..696e-6 rows=1 loops=2794)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mk using movie_id_movie_keyword (movie_id=ml.movie_id) (cost=2.93
      rows=11.5) (actual time=0.00483..0.00746 rows=9.82 loops=699)
    actual_rows: 9.82
    estimated_rows: 11.5
    q_error: 1.1710794297352343
  - node: "Filter: (k.keyword = 'sequel') (cost=0.25 rows=0.1) (actual time=944e-6..947e-6
      rows=0.0452 loops=6864)"
    actual_rows: 0.0452
    estimated_rows: 0.1
    q_error: 2.212389380530974
  - node: Single-row index lookup on k using PRIMARY (id=mk.keyword_id) (cost=0.25
      rows=1) (actual time=820e-6..835e-6 rows=1 loops=6864)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (mi.info in ('Sweden','Norway','Germany','Denmark','Swedish','Denish','Norwegian','German'))
      (cost=1.35 rows=2.69) (actual time=0.0178..0.0293 rows=4.55 loops=310)"
    actual_rows: 4.55
    estimated_rows: 2.69
    q_error: 1.691449814126394
  - node: Index lookup on mi using movie_id_movie_info (movie_id=ml.movie_id) (cost=1.35
      rows=5.37) (actual time=0.00702..0.0267 rows=17.4 loops=310)
    actual_rows: 17.4
    estimated_rows: 5.37
    q_error: 3.2402234636871503

- query: "-- JOB Query 21b\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(cn.name) AS company_name,\n       MIN(lt.link) AS link_type,\n    \
    \   MIN(t.title) AS german_follow_up\nFROM company_name AS cn,\n     company_type
    AS ct,\n     keyword AS k,\n     link_type AS lt,\n     movie_companies AS mc,\n\
    \     movie_info AS mi,\n     movie_keyword AS mk,\n     movie_link AS ml,\n \
    \    title AS t\nWHERE cn.country_code !='[pl]'\n  AND (cn.name LIKE '%Film%'\n\
    \       OR cn.name LIKE '%Warner%')\n  AND ct.kind ='production companies'\n \
    \ AND k.keyword ='sequel'\n  AND lt.link LIKE '%follow%'\n  AND mc.note IS NULL\n\
    \  AND mi.info IN ('Germany',\n                  'German')\n  AND t.production_year
    BETWEEN 2000 AND 2010\n  AND lt.id = ml.link_type_id\n  AND ml.movie_id = t.id\n\
    \  AND t.id = mk.movie_id\n  AND mk.keyword_id = k.id\n  AND t.id = mc.movie_id\n\
    \  AND mc.company_type_id = ct.id\n  AND mc.company_id = cn.id\n  AND mi.movie_id
    = t.id\n  AND ml.movie_id = mk.movie_id\n  AND ml.movie_id = mc.movie_id\n  AND
    mk.movie_id = mc.movie_id\n  AND ml.movie_id = mi.movie_id\n  AND mk.movie_id
    = mi.movie_id\n  AND mc.movie_id = mi.movie_id"
  qep:
  - node: 'Aggregate: min(cn.`name`), min(lt.link), min(t.title) (cost=1772 rows=1)
      (actual time=17.8..17.8 rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=1771 rows=3.56) (actual time=5.52..17.7 rows=38
      loops=1)
    actual_rows: 38.0
    estimated_rows: 3.56
    q_error: 10.674157303370785
  - node: Nested loop inner join (cost=1730 rows=3.31) (actual time=5.47..15.1 rows=92
      loops=1)
    actual_rows: 92.0
    estimated_rows: 3.31
    q_error: 27.794561933534744
  - node: Nested loop inner join (cost=1652 rows=33.1) (actual time=0.492..12.9 rows=1872
      loops=1)
    actual_rows: 1872.0
    estimated_rows: 33.1
    q_error: 56.55589123867069
  - node: Nested loop inner join (cost=1574 rows=2.87) (actual time=0.478..10.7 rows=489
      loops=1)
    actual_rows: 489.0
    estimated_rows: 2.87
    q_error: 170.38327526132403
  - node: Nested loop inner join (cost=1538 rows=15.2) (actual time=0.273..8.81 rows=1762
      loops=1)
    actual_rows: 1762.0
    estimated_rows: 15.2
    q_error: 115.92105263157896
  - node: Nested loop inner join (cost=1181 rows=46.8) (actual time=0.26..3.7 rows=1007
      loops=1)
    actual_rows: 1007.0
    estimated_rows: 46.8
    q_error: 21.517094017094017
  - node: Nested loop inner join (cost=190 rows=422) (actual time=0.25..2.21 rows=2315
      loops=1)
    actual_rows: 2315.0
    estimated_rows: 422.0
    q_error: 5.485781990521327
  - node: Inner hash join (no condition) (cost=2.7 rows=0.222) (actual time=0.0369..0.0494
      rows=2 loops=1)
    actual_rows: 2.0
    estimated_rows: 0.222
    q_error: 9.00900900900901
  - node: "Filter: (lt.link like '%follow%') (cost=2.05 rows=2) (actual time=0.0062..0.0159
      rows=2 loops=1)"
    actual_rows: 2.0
    estimated_rows: 2.0
    q_error: 1.0
  - node: Table scan on lt (cost=2.05 rows=18) (actual time=0.0048..0.0117 rows=18
      loops=1)
    actual_rows: 18.0
    estimated_rows: 18.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: "Filter: (ct.kind = 'production companies') (cost=0.65 rows=1) (actual time=0.0183..0.0208
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on ct (cost=0.65 rows=4) (actual time=0.0154..0.0186 rows=4 loops=1)
    actual_rows: 4.0
    estimated_rows: 4.0
    q_error: 1.0
  - node: Index lookup on ml using link_type_id_movie_link (link_type_id=lt.id) (cost=168
      rows=1898) (actual time=0.202..1.04 rows=1158 loops=2)
    actual_rows: 1158.0
    estimated_rows: 1898.0
    q_error: 1.6390328151986182
  - node: 'Filter: (t.production_year between 2000 and 2010) (cost=0.25 rows=0.111)
      (actual time=552e-6..573e-6 rows=0.435 loops=2315)'
    actual_rows: 0.435
    estimated_rows: 0.111
    q_error: 3.918918918918919
  - node: Single-row index lookup on t using PRIMARY (id=ml.movie_id) (cost=0.25 rows=1)
      (actual time=449e-6..464e-6 rows=1 loops=2315)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: 'Filter: ((mc.company_type_id = ct.id) and (mc.note is null)) (cost=0.811
      rows=0.324) (actual time=0.00383..0.00496 rows=1.75 loops=1007)'
    actual_rows: 1.75
    estimated_rows: 0.324
    q_error: 5.401234567901234
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=ml.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00149..0.00463 rows=4.68 loops=1007)
    actual_rows: 4.68
    estimated_rows: 3.24
    q_error: 1.4444444444444442
  - node: "Filter: ((cn.country_code <> '[pl]') and ((cn.`name` like '%Film%') or
      (cn.`name` like '%Warner%'))) (cost=0.25 rows=0.189) (actual time=997e-6..0.00102
      rows=0.278 loops=1762)"
    actual_rows: 0.278
    estimated_rows: 0.189
    q_error: 1.470899470899471
  - node: Single-row index lookup on cn using PRIMARY (id=mc.company_id) (cost=0.25
      rows=1) (actual time=630e-6..652e-6 rows=1 loops=1762)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mk using movie_id_movie_keyword (movie_id=ml.movie_id) (cost=2.93
      rows=11.5) (actual time=0.0036..0.00415 rows=3.83 loops=489)
    actual_rows: 3.83
    estimated_rows: 11.5
    q_error: 3.0026109660574414
  - node: "Filter: (k.keyword = 'sequel') (cost=0.25 rows=0.1) (actual time=0.0011..0.00111
      rows=0.0491 loops=1872)"
    actual_rows: 0.0491
    estimated_rows: 0.1
    q_error: 2.0366598778004077
  - node: Single-row index lookup on k using PRIMARY (id=mk.keyword_id) (cost=0.25
      rows=1) (actual time=968e-6..984e-6 rows=1 loops=1872)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (mi.info in ('Germany','German')) (cost=1.35 rows=1.07) (actual
      time=0.0227..0.0287 rows=0.413 loops=92)"
    actual_rows: 0.413
    estimated_rows: 1.07
    q_error: 2.590799031476998
  - node: Index lookup on mi using movie_id_movie_info (movie_id=ml.movie_id) (cost=1.35
      rows=5.37) (actual time=0.00117..0.0256 rows=32.2 loops=92)
    actual_rows: 32.2
    estimated_rows: 5.37
    q_error: 5.996275605214153

- query: "-- JOB Query 21c\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(cn.name) AS company_name,\n       MIN(lt.link) AS link_type,\n    \
    \   MIN(t.title) AS western_follow_up\nFROM company_name AS cn,\n     company_type
    AS ct,\n     keyword AS k,\n     link_type AS lt,\n     movie_companies AS mc,\n\
    \     movie_info AS mi,\n     movie_keyword AS mk,\n     movie_link AS ml,\n \
    \    title AS t\nWHERE cn.country_code !='[pl]'\n  AND (cn.name LIKE '%Film%'\n\
    \       OR cn.name LIKE '%Warner%')\n  AND ct.kind ='production companies'\n \
    \ AND k.keyword ='sequel'\n  AND lt.link LIKE '%follow%'\n  AND mc.note IS NULL\n\
    \  AND mi.info IN ('Sweden',\n                  'Norway',\n                  'Germany',\n\
    \                  'Denmark',\n                  'Swedish',\n                \
    \  'Denish',\n                  'Norwegian',\n                  'German',\n  \
    \                'English')\n  AND t.production_year BETWEEN 1950 AND 2010\n \
    \ AND lt.id = ml.link_type_id\n  AND ml.movie_id = t.id\n  AND t.id = mk.movie_id\n\
    \  AND mk.keyword_id = k.id\n  AND t.id = mc.movie_id\n  AND mc.company_type_id
    = ct.id\n  AND mc.company_id = cn.id\n  AND mi.movie_id = t.id\n  AND ml.movie_id
    = mk.movie_id\n  AND ml.movie_id = mc.movie_id\n  AND mk.movie_id = mc.movie_id\n\
    \  AND ml.movie_id = mi.movie_id\n  AND mk.movie_id = mi.movie_id\n  AND mc.movie_id
    = mi.movie_id"
  qep:
  - node: 'Aggregate: min(cn.`name`), min(lt.link), min(t.title) (cost=1772 rows=1)
      (actual time=47.7..47.7 rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=1771 rows=8.89) (actual time=2.35..47.3 rows=1874
      loops=1)
    actual_rows: 1874.0
    estimated_rows: 8.89
    q_error: 210.7986501687289
  - node: Nested loop inner join (cost=1730 rows=3.31) (actual time=2.33..40.1 rows=402
      loops=1)
    actual_rows: 402.0
    estimated_rows: 3.31
    q_error: 121.45015105740181
  - node: Nested loop inner join (cost=1652 rows=33.1) (actual time=0.5..30 rows=8702
      loops=1)
    actual_rows: 8702.0
    estimated_rows: 33.1
    q_error: 262.9003021148036
  - node: Nested loop inner join (cost=1574 rows=2.87) (actual time=0.487..21.8 rows=1137
      loops=1)
    actual_rows: 1137.0
    estimated_rows: 2.87
    q_error: 396.1672473867596
  - node: Nested loop inner join (cost=1538 rows=15.2) (actual time=0.277..16.4 rows=4339
      loops=1)
    actual_rows: 4339.0
    estimated_rows: 15.2
    q_error: 285.4605263157895
  - node: Nested loop inner join (cost=1181 rows=46.8) (actual time=0.261..4.12 rows=2248
      loops=1)
    actual_rows: 2248.0
    estimated_rows: 46.8
    q_error: 48.034188034188034
  - node: Nested loop inner join (cost=190 rows=422) (actual time=0.253..2.31 rows=2315
      loops=1)
    actual_rows: 2315.0
    estimated_rows: 422.0
    q_error: 5.485781990521327
  - node: Inner hash join (no condition) (cost=2.7 rows=0.222) (actual time=0.0337..0.0558
      rows=2 loops=1)
    actual_rows: 2.0
    estimated_rows: 0.222
    q_error: 9.00900900900901
  - node: "Filter: (lt.link like '%follow%') (cost=2.05 rows=2) (actual time=0.0061..0.0243
      rows=2 loops=1)"
    actual_rows: 2.0
    estimated_rows: 2.0
    q_error: 1.0
  - node: Table scan on lt (cost=2.05 rows=18) (actual time=0.0046..0.0163 rows=18
      loops=1)
    actual_rows: 18.0
    estimated_rows: 18.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: "Filter: (ct.kind = 'production companies') (cost=0.65 rows=1) (actual time=0.0179..0.0205
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on ct (cost=0.65 rows=4) (actual time=0.0158..0.0189 rows=4 loops=1)
    actual_rows: 4.0
    estimated_rows: 4.0
    q_error: 1.0
  - node: Index lookup on ml using link_type_id_movie_link (link_type_id=lt.id) (cost=168
      rows=1898) (actual time=0.202..1.08 rows=1158 loops=2)
    actual_rows: 1158.0
    estimated_rows: 1898.0
    q_error: 1.6390328151986182
  - node: 'Filter: (t.production_year between 1950 and 2010) (cost=0.25 rows=0.111)
      (actual time=630e-6..680e-6 rows=0.971 loops=2315)'
    actual_rows: 0.971
    estimated_rows: 0.111
    q_error: 8.747747747747747
  - node: Single-row index lookup on t using PRIMARY (id=ml.movie_id) (cost=0.25 rows=1)
      (actual time=515e-6..531e-6 rows=1 loops=2315)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: 'Filter: ((mc.company_type_id = ct.id) and (mc.note is null)) (cost=0.811
      rows=0.324) (actual time=0.00385..0.00532 rows=1.93 loops=2248)'
    actual_rows: 1.93
    estimated_rows: 0.324
    q_error: 5.9567901234567895
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=ml.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00167..0.00489 rows=4.4 loops=2248)
    actual_rows: 4.4
    estimated_rows: 3.24
    q_error: 1.3580246913580247
  - node: "Filter: ((cn.country_code <> '[pl]') and ((cn.`name` like '%Film%') or
      (cn.`name` like '%Warner%'))) (cost=0.25 rows=0.189) (actual time=0.00109..0.00118
      rows=0.262 loops=4339)"
    actual_rows: 0.262
    estimated_rows: 0.189
    q_error: 1.3862433862433863
  - node: Single-row index lookup on cn using PRIMARY (id=mc.company_id) (cost=0.25
      rows=1) (actual time=689e-6..705e-6 rows=1 loops=4339)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mk using movie_id_movie_keyword (movie_id=ml.movie_id) (cost=2.93
      rows=11.5) (actual time=0.00472..0.00681 rows=7.65 loops=1137)
    actual_rows: 7.65
    estimated_rows: 11.5
    q_error: 1.5032679738562091
  - node: "Filter: (k.keyword = 'sequel') (cost=0.25 rows=0.1) (actual time=0.00109..0.00109
      rows=0.0462 loops=8702)"
    actual_rows: 0.0462
    estimated_rows: 0.1
    q_error: 2.164502164502165
  - node: Single-row index lookup on k using PRIMARY (id=mk.keyword_id) (cost=0.25
      rows=1) (actual time=940e-6..956e-6 rows=1 loops=8702)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (mi.info in ('Sweden','Norway','Germany','Denmark','Swedish','Denish','Norwegian','German','English'))
      (cost=1.35 rows=2.69) (actual time=0.00666..0.0176 rows=4.66 loops=402)"
    actual_rows: 4.66
    estimated_rows: 2.69
    q_error: 1.7323420074349443
  - node: Index lookup on mi using movie_id_movie_info (movie_id=ml.movie_id) (cost=1.35
      rows=5.37) (actual time=0.00104..0.0146 rows=20.8 loops=402)
    actual_rows: 20.8
    estimated_rows: 5.37
    q_error: 3.8733705772811917

- query: "-- JOB Query 22a\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(cn.name) AS movie_company,\n       MIN(mi_idx.info) AS rating,\n  \
    \     MIN(t.title) AS western_violent_movie\nFROM company_name AS cn,\n     company_type
    AS ct,\n     info_type AS it1,\n     info_type AS it2,\n     keyword AS k,\n \
    \    kind_type AS kt,\n     movie_companies AS mc,\n     movie_info AS mi,\n \
    \    movie_info_idx AS mi_idx,\n     movie_keyword AS mk,\n     title AS t\nWHERE
    cn.country_code != '[us]'\n  AND it1.info = 'countries'\n  AND it2.info = 'rating'\n\
    \  AND k.keyword IN ('murder',\n                    'murder-in-title',\n     \
    \               'blood',\n                    'violence')\n  AND kt.kind IN ('movie',\n\
    \                  'episode')\n  AND mc.note NOT LIKE '%(USA)%'\n  AND mc.note
    LIKE '%(200%)%'\n  AND mi.info IN ('Germany',\n                  'German',\n \
    \                 'USA',\n                  'American')\n  AND mi_idx.info < '7.0'\n\
    \  AND t.production_year > 2008\n  AND kt.id = t.kind_id\n  AND t.id = mi.movie_id\n\
    \  AND t.id = mk.movie_id\n  AND t.id = mi_idx.movie_id\n  AND t.id = mc.movie_id\n\
    \  AND mk.movie_id = mi.movie_id\n  AND mk.movie_id = mi_idx.movie_id\n  AND mk.movie_id
    = mc.movie_id\n  AND mi.movie_id = mi_idx.movie_id\n  AND mi.movie_id = mc.movie_id\n\
    \  AND mc.movie_id = mi_idx.movie_id\n  AND k.id = mk.keyword_id\n  AND it1.id
    = mi.info_type_id\n  AND it2.id = mi_idx.info_type_id\n  AND ct.id = mc.company_type_id\n\
    \  AND cn.id = mc.company_id"
  qep:
  - node: 'Aggregate: min(cn.`name`), min(mi_idx.info), min(t.title) (cost=19233 rows=1)
      (actual time=6629..6629 rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=19226 rows=67.5) (actual time=3000..6627 rows=2851
      loops=1)
    actual_rows: 2851.0
    estimated_rows: 67.5
    q_error: 42.237037037037034
  - node: Nested loop inner join (cost=19141 rows=169) (actual time=2878..6048 rows=319409
      loops=1)
    actual_rows: 319409.0
    estimated_rows: 169.0
    q_error: 1889.9940828402366
  - node: Nested loop inner join (cost=18977 rows=14.6) (actual time=2877..5731 rows=3672
      loops=1)
    actual_rows: 3672.0
    estimated_rows: 14.6
    q_error: 251.5068493150685
  - node: Nested loop inner join (cost=18969 rows=16.2) (actual time=2877..5721 rows=4434
      loops=1)
    actual_rows: 4434.0
    estimated_rows: 16.2
    q_error: 273.7037037037037
  - node: Nested loop inner join (cost=18960 rows=16.2) (actual time=2877..5719 rows=4434
      loops=1)
    actual_rows: 4434.0
    estimated_rows: 16.2
    q_error: 273.7037037037037
  - node: Nested loop inner join (cost=18800 rows=50.7) (actual time=2868..5577 rows=15594
      loops=1)
    actual_rows: 15594.0
    estimated_rows: 50.7
    q_error: 307.5739644970414
  - node: Nested loop inner join (cost=18527 rows=507) (actual time=2868..5516 rows=63085
      loops=1)
    actual_rows: 63085.0
    estimated_rows: 507.0
    q_error: 124.42800788954635
  - node: Nested loop inner join (cost=17044 rows=469) (actual time=2868..5183 rows=113741
      loops=1)
    actual_rows: 113741.0
    estimated_rows: 469.0
    q_error: 242.5181236673774
  - node: Inner hash join (no condition) (cost=13261 rows=7038) (actual time=2858..3674
      rows=1.18e+6 loops=1)
    actual_rows: 1180000.0
    estimated_rows: 7038.0
    q_error: 167.66126740551292
  - node: "Filter: (kt.kind in ('movie','episode')) (cost=784e-6 rows=2) (actual time=0.0266..0.0354
      rows=2 loops=1)"
    actual_rows: 2.0
    estimated_rows: 2.0
    q_error: 1.0
  - node: Table scan on kt (cost=784e-6 rows=7) (actual time=0.0232..0.0286 rows=7
      loops=1)
    actual_rows: 7.0
    estimated_rows: 7.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: Nested loop inner join (cost=10789 rows=12317) (actual time=0.0486..2213
      rows=588764 loops=1)
    actual_rows: 588764.0
    estimated_rows: 12317.0
    q_error: 47.800925550052774
  - node: "Filter: (it1.info = 'countries') (cost=11.6 rows=11.3) (actual time=0.0219..0.0558
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 11.3
    q_error: 11.3
  - node: Table scan on it1 (cost=11.6 rows=113) (actual time=0.0189..0.0478 rows=113
      loops=1)
    actual_rows: 113.0
    estimated_rows: 113.0
    q_error: 1.0
  - node: "Filter: (mi.info in ('Germany','German','USA','American')) (cost=691 rows=1090)
      (actual time=0.0261..2185 rows=588764 loops=1)"
    actual_rows: 588764.0
    estimated_rows: 1090.0
    q_error: 540.1504587155963
  - node: Index lookup on mi using info_type_id_movie_info (info_type_id=it1.id) (cost=691
      rows=2725) (actual time=0.0226..1969 rows=1.33e+6 loops=1)
    actual_rows: 1330000.0
    estimated_rows: 2725.0
    q_error: 488.07339449541286
  - node: 'Filter: ((t.kind_id = kt.id) and (t.production_year > 2008)) (cost=0.125
      rows=0.0667) (actual time=0.00119..0.0012 rows=0.0966 loops=1.18e+6)'
    actual_rows: 0.0966
    estimated_rows: 0.0667
    q_error: 1.4482758620689657
  - node: Single-row index lookup on t using PRIMARY (id=mi.movie_id) (cost=0.125
      rows=1) (actual time=0.00101..0.00103 rows=1 loops=1.18e+6)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (mi_idx.info < '7.0') (cost=0.811 rows=1.08) (actual time=0.00211..0.00281
      rows=0.555 loops=113741)"
    actual_rows: 0.555
    estimated_rows: 1.08
    q_error: 1.9459459459459458
  - node: Index lookup on mi_idx using movie_id_movie_info_idx (movie_id=mi.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.002..0.00265 rows=0.682 loops=113741)
    actual_rows: 0.682
    estimated_rows: 3.24
    q_error: 4.750733137829912
  - node: "Filter: (it2.info = 'rating') (cost=0.125 rows=0.1) (actual time=842e-6..859e-6
      rows=0.247 loops=63085)"
    actual_rows: 0.247
    estimated_rows: 0.1
    q_error: 2.4699999999999998
  - node: Single-row index lookup on it2 using PRIMARY (id=mi_idx.info_type_id) (cost=0.125
      rows=1) (actual time=652e-6..673e-6 rows=1 loops=63085)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: ((not((mc.note like '%(USA)%'))) and (mc.note like '%(200%)%'))
      (cost=0.811 rows=0.32) (actual time=0.00782..0.009 rows=0.284 loops=15594)"
    actual_rows: 0.284
    estimated_rows: 0.32
    q_error: 1.1267605633802817
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=mi.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00333..0.00743 rows=3.72 loops=15594)
    actual_rows: 3.72
    estimated_rows: 3.24
    q_error: 1.1481481481481481
  - node: Single-row covering index lookup on ct using PRIMARY (id=mc.company_type_id)
      (cost=0.117 rows=1) (actual time=185e-6..206e-6 rows=1 loops=4434)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (cn.country_code <> '[us]') (cost=0.117 rows=0.9) (actual time=0.00205..0.00211
      rows=0.828 loops=4434)"
    actual_rows: 0.828
    estimated_rows: 0.9
    q_error: 1.0869565217391306
  - node: Single-row index lookup on cn using PRIMARY (id=mc.company_id) (cost=0.117
      rows=1) (actual time=0.00181..0.00183 rows=1 loops=4434)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mk using movie_id_movie_keyword (movie_id=mi.movie_id) (cost=2.91
      rows=11.5) (actual time=0.0104..0.0821 rows=87 loops=3672)
    actual_rows: 87.0
    estimated_rows: 11.5
    q_error: 7.565217391304348
  - node: "Filter: (k.keyword in ('murder','murder-in-title','blood','violence'))
      (cost=0.116 rows=0.4) (actual time=0.00173..0.00173 rows=0.00893 loops=319409)"
    actual_rows: 0.00893
    estimated_rows: 0.4
    q_error: 44.79283314669653
  - node: Single-row index lookup on k using PRIMARY (id=mk.keyword_id) (cost=0.116
      rows=1) (actual time=0.00147..0.00149 rows=1 loops=319409)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 22b\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(cn.name) AS movie_company,\n       MIN(mi_idx.info) AS rating,\n  \
    \     MIN(t.title) AS western_violent_movie\nFROM company_name AS cn,\n     company_type
    AS ct,\n     info_type AS it1,\n     info_type AS it2,\n     keyword AS k,\n \
    \    kind_type AS kt,\n     movie_companies AS mc,\n     movie_info AS mi,\n \
    \    movie_info_idx AS mi_idx,\n     movie_keyword AS mk,\n     title AS t\nWHERE
    cn.country_code != '[us]'\n  AND it1.info = 'countries'\n  AND it2.info = 'rating'\n\
    \  AND k.keyword IN ('murder',\n                    'murder-in-title',\n     \
    \               'blood',\n                    'violence')\n  AND kt.kind IN ('movie',\n\
    \                  'episode')\n  AND mc.note NOT LIKE '%(USA)%'\n  AND mc.note
    LIKE '%(200%)%'\n  AND mi.info IN ('Germany',\n                  'German',\n \
    \                 'USA',\n                  'American')\n  AND mi_idx.info < '7.0'\n\
    \  AND t.production_year > 2009\n  AND kt.id = t.kind_id\n  AND t.id = mi.movie_id\n\
    \  AND t.id = mk.movie_id\n  AND t.id = mi_idx.movie_id\n  AND t.id = mc.movie_id\n\
    \  AND mk.movie_id = mi.movie_id\n  AND mk.movie_id = mi_idx.movie_id\n  AND mk.movie_id
    = mc.movie_id\n  AND mi.movie_id = mi_idx.movie_id\n  AND mi.movie_id = mc.movie_id\n\
    \  AND mc.movie_id = mi_idx.movie_id\n  AND k.id = mk.keyword_id\n  AND it1.id
    = mi.info_type_id\n  AND it2.id = mi_idx.info_type_id\n  AND ct.id = mc.company_type_id\n\
    \  AND cn.id = mc.company_id"
  qep:
  - node: 'Aggregate: min(cn.`name`), min(mi_idx.info), min(t.title) (cost=19233 rows=1)
      (actual time=5293..5293 rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=19226 rows=67.5) (actual time=3347..5293 rows=31
      loops=1)
    actual_rows: 31.0
    estimated_rows: 67.5
    q_error: 2.1774193548387095
  - node: Nested loop inner join (cost=19141 rows=169) (actual time=3312..5284 rows=2606
      loops=1)
    actual_rows: 2606.0
    estimated_rows: 169.0
    q_error: 15.420118343195266
  - node: Nested loop inner join (cost=18977 rows=14.6) (actual time=3312..5280 rows=91
      loops=1)
    actual_rows: 91.0
    estimated_rows: 14.6
    q_error: 6.232876712328768
  - node: Nested loop inner join (cost=18969 rows=16.2) (actual time=3312..5280 rows=173
      loops=1)
    actual_rows: 173.0
    estimated_rows: 16.2
    q_error: 10.679012345679013
  - node: Nested loop inner join (cost=18960 rows=16.2) (actual time=3312..5280 rows=173
      loops=1)
    actual_rows: 173.0
    estimated_rows: 16.2
    q_error: 10.679012345679013
  - node: Nested loop inner join (cost=18800 rows=50.7) (actual time=2713..5177 rows=11540
      loops=1)
    actual_rows: 11540.0
    estimated_rows: 50.7
    q_error: 227.61341222879682
  - node: Nested loop inner join (cost=18527 rows=507) (actual time=2712..5131 rows=46717
      loops=1)
    actual_rows: 46717.0
    estimated_rows: 507.0
    q_error: 92.1439842209073
  - node: Nested loop inner join (cost=17044 rows=469) (actual time=2712..4871 rows=91362
      loops=1)
    actual_rows: 91362.0
    estimated_rows: 469.0
    q_error: 194.80170575692964
  - node: Inner hash join (no condition) (cost=13261 rows=7038) (actual time=2703..3415
      rows=1.18e+6 loops=1)
    actual_rows: 1180000.0
    estimated_rows: 7038.0
    q_error: 167.66126740551292
  - node: "Filter: (kt.kind in ('movie','episode')) (cost=784e-6 rows=2) (actual time=0.0283..0.0369
      rows=2 loops=1)"
    actual_rows: 2.0
    estimated_rows: 2.0
    q_error: 1.0
  - node: Table scan on kt (cost=784e-6 rows=7) (actual time=0.0243..0.03 rows=7 loops=1)
    actual_rows: 7.0
    estimated_rows: 7.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: Nested loop inner join (cost=10789 rows=12317) (actual time=0.0453..2093
      rows=588764 loops=1)
    actual_rows: 588764.0
    estimated_rows: 12317.0
    q_error: 47.800925550052774
  - node: "Filter: (it1.info = 'countries') (cost=11.6 rows=11.3) (actual time=0.0213..0.0522
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 11.3
    q_error: 11.3
  - node: Table scan on it1 (cost=11.6 rows=113) (actual time=0.018..0.0441 rows=113
      loops=1)
    actual_rows: 113.0
    estimated_rows: 113.0
    q_error: 1.0
  - node: "Filter: (mi.info in ('Germany','German','USA','American')) (cost=691 rows=1090)
      (actual time=0.0234..2066 rows=588764 loops=1)"
    actual_rows: 588764.0
    estimated_rows: 1090.0
    q_error: 540.1504587155963
  - node: Index lookup on mi using info_type_id_movie_info (info_type_id=it1.id) (cost=691
      rows=2725) (actual time=0.0199..1864 rows=1.33e+6 loops=1)
    actual_rows: 1330000.0
    estimated_rows: 2725.0
    q_error: 488.07339449541286
  - node: 'Filter: ((t.kind_id = kt.id) and (t.production_year > 2009)) (cost=0.125
      rows=0.0667) (actual time=0.00115..0.00116 rows=0.0776 loops=1.18e+6)'
    actual_rows: 0.0776
    estimated_rows: 0.0667
    q_error: 1.163418290854573
  - node: Single-row index lookup on t using PRIMARY (id=mi.movie_id) (cost=0.125
      rows=1) (actual time=975e-6..995e-6 rows=1 loops=1.18e+6)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (mi_idx.info < '7.0') (cost=0.811 rows=1.08) (actual time=0.00208..0.00273
      rows=0.511 loops=91362)"
    actual_rows: 0.511
    estimated_rows: 1.08
    q_error: 2.1135029354207435
  - node: Index lookup on mi_idx using movie_id_movie_info_idx (movie_id=mi.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00197..0.00257 rows=0.629 loops=91362)
    actual_rows: 0.629
    estimated_rows: 3.24
    q_error: 5.151033386327504
  - node: "Filter: (it2.info = 'rating') (cost=0.125 rows=0.1) (actual time=874e-6..891e-6
      rows=0.247 loops=46717)"
    actual_rows: 0.247
    estimated_rows: 0.1
    q_error: 2.4699999999999998
  - node: Single-row index lookup on it2 using PRIMARY (id=mi_idx.info_type_id) (cost=0.125
      rows=1) (actual time=673e-6..694e-6 rows=1 loops=46717)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: ((not((mc.note like '%(USA)%'))) and (mc.note like '%(200%)%'))
      (cost=0.811 rows=0.32) (actual time=0.00866..0.00877 rows=0.015 loops=11540)"
    actual_rows: 0.015
    estimated_rows: 0.32
    q_error: 21.333333333333336
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=mi.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00329..0.00724 rows=3.6 loops=11540)
    actual_rows: 3.6
    estimated_rows: 3.24
    q_error: 1.1111111111111112
  - node: Single-row covering index lookup on ct using PRIMARY (id=mc.company_type_id)
      (cost=0.117 rows=1) (actual time=457e-6..481e-6 rows=1 loops=173)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (cn.country_code <> '[us]') (cost=0.117 rows=0.9) (actual time=0.00311..0.00315
      rows=0.526 loops=173)"
    actual_rows: 0.526
    estimated_rows: 0.9
    q_error: 1.7110266159695817
  - node: Single-row index lookup on cn using PRIMARY (id=mc.company_id) (cost=0.117
      rows=1) (actual time=0.00265..0.00268 rows=1 loops=173)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mk using movie_id_movie_keyword (movie_id=mi.movie_id) (cost=2.91
      rows=11.5) (actual time=0.0125..0.0391 rows=28.6 loops=91)
    actual_rows: 28.6
    estimated_rows: 11.5
    q_error: 2.4869565217391307
  - node: "Filter: (k.keyword in ('murder','murder-in-title','blood','violence'))
      (cost=0.116 rows=0.4) (actual time=0.00331..0.00331 rows=0.0119 loops=2606)"
    actual_rows: 0.0119
    estimated_rows: 0.4
    q_error: 33.61344537815126
  - node: Single-row index lookup on k using PRIMARY (id=mk.keyword_id) (cost=0.116
      rows=1) (actual time=0.003..0.00302 rows=1 loops=2606)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 22c\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(cn.name) AS movie_company,\n       MIN(mi_idx.info) AS rating,\n  \
    \     MIN(t.title) AS western_violent_movie\nFROM company_name AS cn,\n     company_type
    AS ct,\n     info_type AS it1,\n     info_type AS it2,\n     keyword AS k,\n \
    \    kind_type AS kt,\n     movie_companies AS mc,\n     movie_info AS mi,\n \
    \    movie_info_idx AS mi_idx,\n     movie_keyword AS mk,\n     title AS t\nWHERE
    cn.country_code != '[us]'\n  AND it1.info = 'countries'\n  AND it2.info = 'rating'\n\
    \  AND k.keyword IN ('murder',\n                    'murder-in-title',\n     \
    \               'blood',\n                    'violence')\n  AND kt.kind IN ('movie',\n\
    \                  'episode')\n  AND mc.note NOT LIKE '%(USA)%'\n  AND mc.note
    LIKE '%(200%)%'\n  AND mi.info IN ('Sweden',\n                  'Norway',\n  \
    \                'Germany',\n                  'Denmark',\n                  'Swedish',\n\
    \                  'Danish',\n                  'Norwegian',\n               \
    \   'German',\n                  'USA',\n                  'American')\n  AND
    mi_idx.info < '8.5'\n  AND t.production_year > 2005\n  AND kt.id = t.kind_id\n\
    \  AND t.id = mi.movie_id\n  AND t.id = mk.movie_id\n  AND t.id = mi_idx.movie_id\n\
    \  AND t.id = mc.movie_id\n  AND mk.movie_id = mi.movie_id\n  AND mk.movie_id
    = mi_idx.movie_id\n  AND mk.movie_id = mc.movie_id\n  AND mi.movie_id = mi_idx.movie_id\n\
    \  AND mi.movie_id = mc.movie_id\n  AND mc.movie_id = mi_idx.movie_id\n  AND k.id
    = mk.keyword_id\n  AND it1.id = mi.info_type_id\n  AND it2.id = mi_idx.info_type_id\n\
    \  AND ct.id = mc.company_type_id\n  AND cn.id = mc.company_id"
  qep:
  - node: 'Aggregate: min(cn.`name`), min(mi_idx.info), min(t.title) (cost=21344 rows=1)
      (actual time=13237..13237 rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=21336 rows=84.3) (actual time=2906..13227 rows=21489
      loops=1)
    actual_rows: 21489.0
    estimated_rows: 84.3
    q_error: 254.91103202846975
  - node: Nested loop inner join (cost=21229 rows=211) (actual time=2785..8845 rows=2.61e+6
      loops=1)
    actual_rows: 2610000.0
    estimated_rows: 211.0
    q_error: 12369.668246445497
  - node: Nested loop inner join (cost=21024 rows=18.3) (actual time=2785..6299 rows=35930
      loops=1)
    actual_rows: 35930.0
    estimated_rows: 18.3
    q_error: 1963.3879781420765
  - node: Nested loop inner join (cost=21013 rows=20.3) (actual time=2785..6225 rows=40333
      loops=1)
    actual_rows: 40333.0
    estimated_rows: 20.3
    q_error: 1986.847290640394
  - node: Nested loop inner join (cost=21003 rows=20.3) (actual time=2785..6210 rows=40333
      loops=1)
    actual_rows: 40333.0
    estimated_rows: 20.3
    q_error: 1986.847290640394
  - node: Nested loop inner join (cost=20803 rows=63.4) (actual time=2785..5779 rows=44414
      loops=1)
    actual_rows: 44414.0
    estimated_rows: 63.4
    q_error: 700.5362776025237
  - node: Nested loop inner join (cost=20462 rows=634) (actual time=2785..5638 rows=133055
      loops=1)
    actual_rows: 133055.0
    estimated_rows: 634.0
    q_error: 209.86593059936908
  - node: Nested loop inner join (cost=18608 rows=586) (actual time=2785..5106 rows=165761
      loops=1)
    actual_rows: 165761.0
    estimated_rows: 586.0
    q_error: 282.86860068259386
  - node: Inner hash join (no condition) (cost=13879 rows=8798) (actual time=2775..3519
      rows=1.23e+6 loops=1)
    actual_rows: 1230000.0
    estimated_rows: 8798.0
    q_error: 139.80450102295976
  - node: "Filter: (kt.kind in ('movie','episode')) (cost=768e-6 rows=2) (actual time=0.026..0.0341
      rows=2 loops=1)"
    actual_rows: 2.0
    estimated_rows: 2.0
    q_error: 1.0
  - node: Table scan on kt (cost=768e-6 rows=7) (actual time=0.0228..0.0287 rows=7
      loops=1)
    actual_rows: 7.0
    estimated_rows: 7.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: Nested loop inner join (cost=10789 rows=15396) (actual time=0.0474..2177
      rows=614251 loops=1)
    actual_rows: 614251.0
    estimated_rows: 15396.0
    q_error: 39.89679137438296
  - node: "Filter: (it1.info = 'countries') (cost=11.6 rows=11.3) (actual time=0.022..0.0534
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 11.3
    q_error: 11.3
  - node: Table scan on it1 (cost=11.6 rows=113) (actual time=0.0187..0.0446 rows=113
      loops=1)
    actual_rows: 113.0
    estimated_rows: 113.0
    q_error: 1.0
  - node: "Filter: (mi.info in ('Sweden','Norway','Germany','Denmark','Swedish','Danish','Norwegian','German','USA','American'))
      (cost=693 rows=1362) (actual time=0.0248..2149 rows=614251 loops=1)"
    actual_rows: 614251.0
    estimated_rows: 1362.0
    q_error: 450.99192364170335
  - node: Index lookup on mi using info_type_id_movie_info (info_type_id=it1.id) (cost=693
      rows=2725) (actual time=0.0212..1902 rows=1.33e+6 loops=1)
    actual_rows: 1330000.0
    estimated_rows: 2725.0
    q_error: 488.07339449541286
  - node: 'Filter: ((t.kind_id = kt.id) and (t.production_year > 2005)) (cost=0.125
      rows=0.0667) (actual time=0.0012..0.00121 rows=0.135 loops=1.23e+6)'
    actual_rows: 0.135
    estimated_rows: 0.0667
    q_error: 2.0239880059970017
  - node: Single-row index lookup on t using PRIMARY (id=mi.movie_id) (cost=0.125
      rows=1) (actual time=0.00102..0.00104 rows=1 loops=1.23e+6)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (mi_idx.info < '8.5') (cost=0.811 rows=1.08) (actual time=0.00217..0.00308
      rows=0.803 loops=165761)"
    actual_rows: 0.803
    estimated_rows: 1.08
    q_error: 1.3449564134495642
  - node: Index lookup on mi_idx using movie_id_movie_info_idx (movie_id=mi.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00205..0.00288 rows=0.838 loops=165761)
    actual_rows: 0.838
    estimated_rows: 3.24
    q_error: 3.866348448687351
  - node: "Filter: (it2.info = 'rating') (cost=0.125 rows=0.1) (actual time=931e-6..954e-6
      rows=0.334 loops=133055)"
    actual_rows: 0.334
    estimated_rows: 0.1
    q_error: 3.34
  - node: Single-row index lookup on it2 using PRIMARY (id=mi_idx.info_type_id) (cost=0.125
      rows=1) (actual time=729e-6..751e-6 rows=1 loops=133055)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: ((not((mc.note like '%(USA)%'))) and (mc.note like '%(200%)%'))
      (cost=0.811 rows=0.32) (actual time=0.00647..0.00955 rows=0.908 loops=44414)"
    actual_rows: 0.908
    estimated_rows: 0.32
    q_error: 2.8375
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=mi.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00286..0.00779 rows=4.26 loops=44414)
    actual_rows: 4.26
    estimated_rows: 3.24
    q_error: 1.3148148148148147
  - node: Single-row covering index lookup on ct using PRIMARY (id=mc.company_type_id)
      (cost=0.117 rows=1) (actual time=164e-6..187e-6 rows=1 loops=40333)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (cn.country_code <> '[us]') (cost=0.117 rows=0.9) (actual time=0.00162..0.00169
      rows=0.891 loops=40333)"
    actual_rows: 0.891
    estimated_rows: 0.9
    q_error: 1.0101010101010102
  - node: Single-row index lookup on cn using PRIMARY (id=mc.company_id) (cost=0.117
      rows=1) (actual time=0.00141..0.00144 rows=1 loops=40333)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mk using movie_id_movie_keyword (movie_id=mi.movie_id) (cost=2.9
      rows=11.5) (actual time=0.00919..0.0672 rows=72.7 loops=35930)
    actual_rows: 72.7
    estimated_rows: 11.5
    q_error: 6.321739130434783
  - node: "Filter: (k.keyword in ('murder','murder-in-title','blood','violence'))
      (cost=0.116 rows=0.4) (actual time=0.0016..0.0016 rows=0.00823 loops=2.61e+6)"
    actual_rows: 0.00823
    estimated_rows: 0.4
    q_error: 48.60267314702309
  - node: Single-row index lookup on k using PRIMARY (id=mk.keyword_id) (cost=0.116
      rows=1) (actual time=0.00135..0.00137 rows=1 loops=2.61e+6)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 22d\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(cn.name) AS movie_company,\n       MIN(mi_idx.info) AS rating,\n  \
    \     MIN(t.title) AS western_violent_movie\nFROM company_name AS cn,\n     company_type
    AS ct,\n     info_type AS it1,\n     info_type AS it2,\n     keyword AS k,\n \
    \    kind_type AS kt,\n     movie_companies AS mc,\n     movie_info AS mi,\n \
    \    movie_info_idx AS mi_idx,\n     movie_keyword AS mk,\n     title AS t\nWHERE
    cn.country_code != '[us]'\n  AND it1.info = 'countries'\n  AND it2.info = 'rating'\n\
    \  AND k.keyword IN ('murder',\n                    'murder-in-title',\n     \
    \               'blood',\n                    'violence')\n  AND kt.kind IN ('movie',\n\
    \                  'episode')\n  AND mi.info IN ('Sweden',\n                 \
    \ 'Norway',\n                  'Germany',\n                  'Denmark',\n    \
    \              'Swedish',\n                  'Danish',\n                  'Norwegian',\n\
    \                  'German',\n                  'USA',\n                  'American')\n\
    \  AND mi_idx.info < '8.5'\n  AND t.production_year > 2005\n  AND kt.id = t.kind_id\n\
    \  AND t.id = mi.movie_id\n  AND t.id = mk.movie_id\n  AND t.id = mi_idx.movie_id\n\
    \  AND t.id = mc.movie_id\n  AND mk.movie_id = mi.movie_id\n  AND mk.movie_id
    = mi_idx.movie_id\n  AND mk.movie_id = mc.movie_id\n  AND mi.movie_id = mi_idx.movie_id\n\
    \  AND mi.movie_id = mc.movie_id\n  AND mc.movie_id = mi_idx.movie_id\n  AND k.id
    = mk.keyword_id\n  AND it1.id = mi.info_type_id\n  AND it2.id = mi_idx.info_type_id\n\
    \  AND ct.id = mc.company_type_id\n  AND cn.id = mc.company_id"
  qep:
  - node: 'Aggregate: min(cn.`name`), min(mi_idx.info), min(t.title) (cost=23152 rows=1)
      (actual time=7985..7985 rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=23067 rows=854) (actual time=2676..7973 rows=46281
      loops=1)
    actual_rows: 46281.0
    estimated_rows: 854.0
    q_error: 54.19320843091335
  - node: Nested loop inner join (cost=22938 rows=949) (actual time=2676..7879 rows=64848
      loops=1)
    actual_rows: 64848.0
    estimated_rows: 949.0
    q_error: 68.33298208640674
  - node: Nested loop inner join (cost=22810 rows=949) (actual time=2676..7857 rows=64848
      loops=1)
    actual_rows: 64848.0
    estimated_rows: 949.0
    q_error: 68.33298208640674
  - node: Nested loop inner join (cost=21885 rows=293) (actual time=2676..7764 rows=4115
      loops=1)
    actual_rows: 4115.0
    estimated_rows: 293.0
    q_error: 14.044368600682594
  - node: Nested loop inner join (cost=21516 rows=731) (actual time=2671..6328 rows=460150
      loops=1)
    actual_rows: 460150.0
    estimated_rows: 731.0
    q_error: 629.4801641586868
  - node: Nested loop inner join (cost=20803 rows=63.4) (actual time=2671..5673 rows=44414
      loops=1)
    actual_rows: 44414.0
    estimated_rows: 63.4
    q_error: 700.5362776025237
  - node: Nested loop inner join (cost=20462 rows=634) (actual time=2671..5535 rows=133055
      loops=1)
    actual_rows: 133055.0
    estimated_rows: 634.0
    q_error: 209.86593059936908
  - node: Nested loop inner join (cost=18608 rows=586) (actual time=2671..5006 rows=165761
      loops=1)
    actual_rows: 165761.0
    estimated_rows: 586.0
    q_error: 282.86860068259386
  - node: Inner hash join (no condition) (cost=13879 rows=8798) (actual time=2659..3437
      rows=1.23e+6 loops=1)
    actual_rows: 1230000.0
    estimated_rows: 8798.0
    q_error: 139.80450102295976
  - node: "Filter: (kt.kind in ('movie','episode')) (cost=768e-6 rows=2) (actual time=0.0252..0.0333
      rows=2 loops=1)"
    actual_rows: 2.0
    estimated_rows: 2.0
    q_error: 1.0
  - node: Table scan on kt (cost=768e-6 rows=7) (actual time=0.0217..0.0268 rows=7
      loops=1)
    actual_rows: 7.0
    estimated_rows: 7.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: Nested loop inner join (cost=10789 rows=15396) (actual time=0.048..2070
      rows=614251 loops=1)
    actual_rows: 614251.0
    estimated_rows: 15396.0
    q_error: 39.89679137438296
  - node: "Filter: (it1.info = 'countries') (cost=11.6 rows=11.3) (actual time=0.0223..0.0745
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 11.3
    q_error: 11.3
  - node: Table scan on it1 (cost=11.6 rows=113) (actual time=0.0188..0.0611 rows=113
      loops=1)
    actual_rows: 113.0
    estimated_rows: 113.0
    q_error: 1.0
  - node: "Filter: (mi.info in ('Sweden','Norway','Germany','Denmark','Swedish','Danish','Norwegian','German','USA','American'))
      (cost=693 rows=1362) (actual time=0.0251..2044 rows=614251 loops=1)"
    actual_rows: 614251.0
    estimated_rows: 1362.0
    q_error: 450.99192364170335
  - node: Index lookup on mi using info_type_id_movie_info (info_type_id=it1.id) (cost=693
      rows=2725) (actual time=0.0209..1819 rows=1.33e+6 loops=1)
    actual_rows: 1330000.0
    estimated_rows: 2725.0
    q_error: 488.07339449541286
  - node: 'Filter: ((t.kind_id = kt.id) and (t.production_year > 2005)) (cost=0.125
      rows=0.0667) (actual time=0.00119..0.0012 rows=0.135 loops=1.23e+6)'
    actual_rows: 0.135
    estimated_rows: 0.0667
    q_error: 2.0239880059970017
  - node: Single-row index lookup on t using PRIMARY (id=mi.movie_id) (cost=0.125
      rows=1) (actual time=0.00101..0.00103 rows=1 loops=1.23e+6)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (mi_idx.info < '8.5') (cost=0.811 rows=1.08) (actual time=0.00218..0.00306
      rows=0.803 loops=165761)"
    actual_rows: 0.803
    estimated_rows: 1.08
    q_error: 1.3449564134495642
  - node: Index lookup on mi_idx using movie_id_movie_info_idx (movie_id=mi.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00206..0.00287 rows=0.838 loops=165761)
    actual_rows: 0.838
    estimated_rows: 3.24
    q_error: 3.866348448687351
  - node: "Filter: (it2.info = 'rating') (cost=0.125 rows=0.1) (actual time=904e-6..926e-6
      rows=0.334 loops=133055)"
    actual_rows: 0.334
    estimated_rows: 0.1
    q_error: 3.34
  - node: Single-row index lookup on it2 using PRIMARY (id=mi_idx.info_type_id) (cost=0.125
      rows=1) (actual time=705e-6..727e-6 rows=1 loops=133055)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mk using movie_id_movie_keyword (movie_id=mi.movie_id) (cost=2.89
      rows=11.5) (actual time=0.00591..0.0141 rows=10.4 loops=44414)
    actual_rows: 10.4
    estimated_rows: 11.5
    q_error: 1.1057692307692308
  - node: "Filter: (k.keyword in ('murder','murder-in-title','blood','violence'))
      (cost=0.116 rows=0.4) (actual time=0.00304..0.00304 rows=0.00894 loops=460150)"
    actual_rows: 0.00894
    estimated_rows: 0.4
    q_error: 44.742729306487696
  - node: Single-row index lookup on k using PRIMARY (id=mk.keyword_id) (cost=0.116
      rows=1) (actual time=0.00278..0.0028 rows=1 loops=460150)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=mi.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00756..0.0217 rows=15.8 loops=4115)
    actual_rows: 15.8
    estimated_rows: 3.24
    q_error: 4.8765432098765435
  - node: Single-row covering index lookup on ct using PRIMARY (id=mc.company_type_id)
      (cost=0.0101 rows=1) (actual time=187e-6..208e-6 rows=1 loops=64848)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (cn.country_code <> '[us]') (cost=0.01 rows=0.9) (actual time=0.00129..0.00134
      rows=0.714 loops=64848)"
    actual_rows: 0.714
    estimated_rows: 0.9
    q_error: 1.2605042016806725
  - node: Single-row index lookup on cn using PRIMARY (id=mc.company_id) (cost=0.01
      rows=1) (actual time=0.00111..0.00113 rows=1 loops=64848)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 23a\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(kt.kind) AS movie_kind,\n       MIN(t.title) AS complete_us_internet_movie\n
    FROM complete_cast AS cc,\n     comp_cast_type AS cct1,\n     company_name AS
    cn,\n     company_type AS ct,\n     info_type AS it1,\n     keyword AS k,\n  \
    \   kind_type AS kt,\n     movie_companies AS mc,\n     movie_info AS mi,\n  \
    \   movie_keyword AS mk,\n     title AS t\nWHERE cct1.kind = 'complete+verified'\n\
    \  AND cn.country_code = '[us]'\n  AND it1.info = 'release dates'\n  AND kt.kind
    IN ('movie')\n  AND mi.note LIKE '%internet%'\n  AND mi.info IS NOT NULL\n  AND
    (mi.info LIKE 'USA:% 199%'\n       OR mi.info LIKE 'USA:% 200%')\n  AND t.production_year
    > 2000\n  AND kt.id = t.kind_id\n  AND t.id = mi.movie_id\n  AND t.id = mk.movie_id\n\
    \  AND t.id = mc.movie_id\n  AND t.id = cc.movie_id\n  AND mk.movie_id = mi.movie_id\n\
    \  AND mk.movie_id = mc.movie_id\n  AND mk.movie_id = cc.movie_id\n  AND mi.movie_id
    = mc.movie_id\n  AND mi.movie_id = cc.movie_id\n  AND mc.movie_id = cc.movie_id\n\
    \  AND k.id = mk.keyword_id\n  AND it1.id = mi.info_type_id\n  AND cn.id = mc.company_id\n\
    \  AND ct.id = mc.company_type_id\n  AND cct1.id = cc.status_id"
  qep:
  - node: 'Aggregate: min(kt.kind), min(t.title) (cost=8152 rows=1) (actual time=5277..5277
      rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=8152 rows=3.34) (actual time=4718..5277 rows=618
      loops=1)
    actual_rows: 618.0
    estimated_rows: 3.34
    q_error: 185.02994011976048
  - node: Nested loop inner join (cost=8138 rows=3.34) (actual time=4718..5276 rows=618
      loops=1)
    actual_rows: 618.0
    estimated_rows: 3.34
    q_error: 185.02994011976048
  - node: Nested loop inner join (cost=8079 rows=0.289) (actual time=4718..5276 rows=6
      loops=1)
    actual_rows: 6.0
    estimated_rows: 0.289
    q_error: 20.761245674740486
  - node: Nested loop inner join (cost=8040 rows=2.89) (actual time=4718..5276 rows=6
      loops=1)
    actual_rows: 6.0
    estimated_rows: 2.89
    q_error: 2.0761245674740483
  - node: Nested loop inner join (cost=8001 rows=2.89) (actual time=4718..5276 rows=6
      loops=1)
    actual_rows: 6.0
    estimated_rows: 2.89
    q_error: 2.0761245674740483
  - node: Nested loop inner join (cost=7950 rows=0.891) (actual time=4718..5276 rows=5
      loops=1)
    actual_rows: 5.0
    estimated_rows: 0.891
    q_error: 5.611672278338945
  - node: Nested loop inner join (cost=7935 rows=0.684) (actual time=2944..5231 rows=818
      loops=1)
    actual_rows: 818.0
    estimated_rows: 0.684
    q_error: 1195.906432748538
  - node: Nested loop inner join (cost=7754 rows=10.3) (actual time=0.996..5221 rows=1785
      loops=1)
    actual_rows: 1785.0
    estimated_rows: 10.3
    q_error: 173.30097087378638
  - node: Inner hash join (no condition) (cost=12.2 rows=0.161) (actual time=0.0502..0.0871
      rows=1 loops=1)
    actual_rows: 1.0
    estimated_rows: 0.161
    q_error: 6.211180124223603
  - node: "Filter: (it1.info = 'release dates') (cost=11.6 rows=11.3) (actual time=0.0092..0.0452
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 11.3
    q_error: 11.3
  - node: Table scan on it1 (cost=11.6 rows=113) (actual time=0.0068..0.0359 rows=113
      loops=1)
    actual_rows: 113.0
    estimated_rows: 113.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: Inner hash join (no condition) (cost=1.6 rows=0.143) (actual time=0.0347..0.0367
      rows=1 loops=1)
    actual_rows: 1.0
    estimated_rows: 0.143
    q_error: 6.993006993006993
  - node: "Filter: (kt.kind = 'movie') (cost=0.95 rows=1) (actual time=0.0052..0.0069
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on kt (cost=0.95 rows=7) (actual time=0.005..0.0063 rows=7 loops=1)
    actual_rows: 7.0
    estimated_rows: 7.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: "Filter: (cct1.kind = 'complete+verified') (cost=0.65 rows=1) (actual time=0.02..0.022
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on cct1 (cost=0.65 rows=4) (actual time=0.0166..0.0195 rows=4
      loops=1)
    actual_rows: 4.0
    estimated_rows: 4.0
    q_error: 1.0
  - node: "Filter: ((mi.note like '%internet%') and ((mi.info like 'USA:% 199%') or
      (mi.info like 'USA:% 200%'))) (cost=682 rows=63.5) (actual time=0.946..5221
      rows=1785 loops=1)"
    actual_rows: 1785.0
    estimated_rows: 63.5
    q_error: 28.11023622047244
  - node: Index lookup on mi using info_type_id_movie_info (info_type_id=it1.id) (cost=682
      rows=2725) (actual time=0.0257..4845 rows=3.04e+6 loops=1)
    actual_rows: 3040000.0
    estimated_rows: 2725.0
    q_error: 1115.5963302752293
  - node: 'Filter: ((t.kind_id = kt.id) and (t.production_year > 2000)) (cost=0.25
      rows=0.0667) (actual time=0.00512..0.00517 rows=0.458 loops=1785)'
    actual_rows: 0.458
    estimated_rows: 0.0667
    q_error: 6.86656671664168
  - node: Single-row index lookup on t using PRIMARY (id=mi.movie_id) (cost=0.25 rows=1)
      (actual time=0.0044..0.00444 rows=1 loops=1785)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: 'Filter: (cc.status_id = cct1.id) (cost=0.329 rows=1.3) (actual time=0.054..0.054
      rows=0.00611 loops=818)'
    actual_rows: 0.00611
    estimated_rows: 1.3
    q_error: 212.76595744680853
  - node: Index lookup on cc using movie_id_complete_cast (movie_id=mi.movie_id) (cost=0.329
      rows=1.3) (actual time=0.0538..0.0539 rows=0.0391 loops=818)
    actual_rows: 0.0391
    estimated_rows: 1.3
    q_error: 33.248081841432224
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=mi.movie_id)
      (cost=0.816 rows=3.24) (actual time=0.00674..0.0074 rows=1.2 loops=5)
    actual_rows: 1.2
    estimated_rows: 3.24
    q_error: 2.7
  - node: Single-row covering index lookup on ct using PRIMARY (id=mc.company_type_id)
      (cost=0.192 rows=1) (actual time=0.00108..0.00108 rows=1 loops=6)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (cn.country_code = '[us]') (cost=0.192 rows=0.1) (actual time=0.00242..0.00248
      rows=1 loops=6)"
    actual_rows: 1.0
    estimated_rows: 0.1
    q_error: 10.0
  - node: Single-row index lookup on cn using PRIMARY (id=mc.company_id) (cost=0.192
      rows=1) (actual time=0.00182..0.00183 rows=1 loops=6)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mk using movie_id_movie_keyword (movie_id=mi.movie_id) (cost=2.94
      rows=11.5) (actual time=0.0111..0.0958 rows=103 loops=6)
    actual_rows: 103.0
    estimated_rows: 11.5
    q_error: 8.956521739130435
  - node: Single-row covering index lookup on k using PRIMARY (id=mk.keyword_id) (cost=0.0595
      rows=1) (actual time=0.00176..0.00178 rows=1 loops=618)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 23b\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(kt.kind) AS movie_kind,\n       MIN(t.title) AS complete_nerdy_internet_movie\n
    FROM complete_cast AS cc,\n     comp_cast_type AS cct1,\n     company_name AS
    cn,\n     company_type AS ct,\n     info_type AS it1,\n     keyword AS k,\n  \
    \   kind_type AS kt,\n     movie_companies AS mc,\n     movie_info AS mi,\n  \
    \   movie_keyword AS mk,\n     title AS t\nWHERE cct1.kind = 'complete+verified'\n\
    \  AND cn.country_code = '[us]'\n  AND it1.info = 'release dates'\n  AND k.keyword
    IN ('nerd',\n                    'loner',\n                    'alienation',\n\
    \                    'dignity')\n  AND kt.kind IN ('movie')\n  AND mi.note LIKE
    '%internet%'\n  AND mi.info LIKE 'USA:% 200%'\n  AND t.production_year > 2000\n\
    \  AND kt.id = t.kind_id\n  AND t.id = mi.movie_id\n  AND t.id = mk.movie_id\n\
    \  AND t.id = mc.movie_id\n  AND t.id = cc.movie_id\n  AND mk.movie_id = mi.movie_id\n\
    \  AND mk.movie_id = mc.movie_id\n  AND mk.movie_id = cc.movie_id\n  AND mi.movie_id
    = mc.movie_id\n  AND mi.movie_id = cc.movie_id\n  AND mc.movie_id = cc.movie_id\n\
    \  AND k.id = mk.keyword_id\n  AND it1.id = mi.info_type_id\n  AND cn.id = mc.company_id\n\
    \  AND ct.id = mc.company_type_id\n  AND cct1.id = cc.status_id"
  qep:
  - node: 'Aggregate: min(kt.kind), min(t.title) (cost=7965 rows=1) (actual time=5051..5051
      rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=7965 rows=0.707) (actual time=4512..5051 rows=16
      loops=1)
    actual_rows: 16.0
    estimated_rows: 0.707
    q_error: 22.63083451202263
  - node: Nested loop inner join (cost=7957 rows=1.77) (actual time=4497..5050 rows=618
      loops=1)
    actual_rows: 618.0
    estimated_rows: 1.77
    q_error: 349.1525423728813
  - node: Nested loop inner join (cost=7926 rows=0.153) (actual time=4497..5049 rows=6
      loops=1)
    actual_rows: 6.0
    estimated_rows: 0.153
    q_error: 39.21568627450981
  - node: Nested loop inner join (cost=7906 rows=1.53) (actual time=4497..5049 rows=6
      loops=1)
    actual_rows: 6.0
    estimated_rows: 1.53
    q_error: 3.9215686274509802
  - node: Nested loop inner join (cost=7885 rows=1.53) (actual time=4497..5049 rows=6
      loops=1)
    actual_rows: 6.0
    estimated_rows: 1.53
    q_error: 3.9215686274509802
  - node: Nested loop inner join (cost=7858 rows=0.472) (actual time=4497..5049 rows=5
      loops=1)
    actual_rows: 5.0
    estimated_rows: 0.472
    q_error: 10.593220338983052
  - node: Nested loop inner join (cost=7850 rows=0.362) (actual time=2704..5045 rows=818
      loops=1)
    actual_rows: 818.0
    estimated_rows: 0.362
    q_error: 2259.6685082872928
  - node: Nested loop inner join (cost=7754 rows=5.43) (actual time=0.781..5035 rows=1773
      loops=1)
    actual_rows: 1773.0
    estimated_rows: 5.43
    q_error: 326.5193370165746
  - node: Inner hash join (no condition) (cost=12.2 rows=0.161) (actual time=0.0423..0.0684
      rows=1 loops=1)
    actual_rows: 1.0
    estimated_rows: 0.161
    q_error: 6.211180124223603
  - node: "Filter: (it1.info = 'release dates') (cost=11.6 rows=11.3) (actual time=0.0081..0.033
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 11.3
    q_error: 11.3
  - node: Table scan on it1 (cost=11.6 rows=113) (actual time=0.0057..0.0272 rows=113
      loops=1)
    actual_rows: 113.0
    estimated_rows: 113.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: Inner hash join (no condition) (cost=1.6 rows=0.143) (actual time=0.0288..0.0305
      rows=1 loops=1)
    actual_rows: 1.0
    estimated_rows: 0.143
    q_error: 6.993006993006993
  - node: "Filter: (kt.kind = 'movie') (cost=0.95 rows=1) (actual time=0.0039..0.0054
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on kt (cost=0.95 rows=7) (actual time=0.0038..0.0049 rows=7 loops=1)
    actual_rows: 7.0
    estimated_rows: 7.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: "Filter: (cct1.kind = 'complete+verified') (cost=0.65 rows=1) (actual time=0.0167..0.0186
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on cct1 (cost=0.65 rows=4) (actual time=0.0138..0.0165 rows=4
      loops=1)
    actual_rows: 4.0
    estimated_rows: 4.0
    q_error: 1.0
  - node: "Filter: ((mi.note like '%internet%') and (mi.info like 'USA:% 200%')) (cost=682
      rows=33.6) (actual time=0.738..5035 rows=1773 loops=1)"
    actual_rows: 1773.0
    estimated_rows: 33.6
    q_error: 52.76785714285714
  - node: Index lookup on mi using info_type_id_movie_info (info_type_id=it1.id) (cost=682
      rows=2725) (actual time=0.02..4678 rows=3.04e+6 loops=1)
    actual_rows: 3040000.0
    estimated_rows: 2725.0
    q_error: 1115.5963302752293
  - node: 'Filter: ((t.kind_id = kt.id) and (t.production_year > 2000)) (cost=0.25
      rows=0.0667) (actual time=0.00502..0.00507 rows=0.461 loops=1773)'
    actual_rows: 0.461
    estimated_rows: 0.0667
    q_error: 6.911544227886058
  - node: Single-row index lookup on t using PRIMARY (id=mi.movie_id) (cost=0.25 rows=1)
      (actual time=0.00426..0.0043 rows=1 loops=1773)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: 'Filter: (cc.status_id = cct1.id) (cost=0.331 rows=1.3) (actual time=0.00449..0.0045
      rows=0.00611 loops=818)'
    actual_rows: 0.00611
    estimated_rows: 1.3
    q_error: 212.76595744680853
  - node: Index lookup on cc using movie_id_complete_cast (movie_id=mi.movie_id) (cost=0.331
      rows=1.3) (actual time=0.0043..0.00432 rows=0.0391 loops=818)
    actual_rows: 0.0391
    estimated_rows: 1.3
    q_error: 33.248081841432224
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=mi.movie_id)
      (cost=0.821 rows=3.24) (actual time=0.00688..0.00768 rows=1.2 loops=5)
    actual_rows: 1.2
    estimated_rows: 3.24
    q_error: 2.7
  - node: Single-row covering index lookup on ct using PRIMARY (id=mc.company_type_id)
      (cost=0.193 rows=1) (actual time=0.00125..0.0013 rows=1 loops=6)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (cn.country_code = '[us]') (cost=0.192 rows=0.1) (actual time=0.00302..0.0031
      rows=1 loops=6)"
    actual_rows: 1.0
    estimated_rows: 0.1
    q_error: 10.0
  - node: Single-row index lookup on cn using PRIMARY (id=mc.company_id) (cost=0.192
      rows=1) (actual time=0.0022..0.00223 rows=1 loops=6)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mk using movie_id_movie_keyword (movie_id=mi.movie_id) (cost=2.99
      rows=11.5) (actual time=0.013..0.12 rows=103 loops=6)
    actual_rows: 103.0
    estimated_rows: 11.5
    q_error: 8.956521739130435
  - node: "Filter: (k.keyword in ('nerd','loner','alienation','dignity')) (cost=0.0594
      rows=0.4) (actual time=0.00265..0.00265 rows=0.0259 loops=618)"
    actual_rows: 0.0259
    estimated_rows: 0.4
    q_error: 15.444015444015445
  - node: Single-row index lookup on k using PRIMARY (id=mk.keyword_id) (cost=0.0594
      rows=1) (actual time=0.00224..0.00226 rows=1 loops=618)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 23c\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(kt.kind) AS movie_kind,\n       MIN(t.title) AS complete_us_internet_movie\n
    FROM complete_cast AS cc,\n     comp_cast_type AS cct1,\n     company_name AS
    cn,\n     company_type AS ct,\n     info_type AS it1,\n     keyword AS k,\n  \
    \   kind_type AS kt,\n     movie_companies AS mc,\n     movie_info AS mi,\n  \
    \   movie_keyword AS mk,\n     title AS t\nWHERE cct1.kind = 'complete+verified'\n\
    \  AND cn.country_code = '[us]'\n  AND it1.info = 'release dates'\n  AND kt.kind
    IN ('movie',\n                  'tv movie',\n                  'video movie',\n\
    \                  'video game')\n  AND mi.note LIKE '%internet%'\n  AND mi.info
    IS NOT NULL\n  AND (mi.info LIKE 'USA:% 199%'\n       OR mi.info LIKE 'USA:% 200%')\n\
    \  AND t.production_year > 1990\n  AND kt.id = t.kind_id\n  AND t.id = mi.movie_id\n\
    \  AND t.id = mk.movie_id\n  AND t.id = mc.movie_id\n  AND t.id = cc.movie_id\n\
    \  AND mk.movie_id = mi.movie_id\n  AND mk.movie_id = mc.movie_id\n  AND mk.movie_id
    = cc.movie_id\n  AND mi.movie_id = mc.movie_id\n  AND mi.movie_id = cc.movie_id\n\
    \  AND mc.movie_id = cc.movie_id\n  AND k.id = mk.keyword_id\n  AND it1.id = mi.info_type_id\n\
    \  AND cn.id = mc.company_id\n  AND ct.id = mc.company_type_id\n  AND cct1.id
    = cc.status_id"
  qep:
  - node: 'Aggregate: min(kt.kind), min(t.title) (cost=8841 rows=1) (actual time=4832..4832
      rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=8835 rows=58.4) (actual time=2996..4832 rows=628
      loops=1)
    actual_rows: 628.0
    estimated_rows: 58.4
    q_error: 10.753424657534246
  - node: Nested loop inner join (cost=8795 rows=58.4) (actual time=2996..4831 rows=628
      loops=1)
    actual_rows: 628.0
    estimated_rows: 58.4
    q_error: 10.753424657534246
  - node: Nested loop inner join (cost=8643 rows=5.06) (actual time=2996..4830 rows=7
      loops=1)
    actual_rows: 7.0
    estimated_rows: 5.06
    q_error: 1.383399209486166
  - node: Nested loop inner join (cost=8541 rows=50.6) (actual time=2996..4830 rows=7
      loops=1)
    actual_rows: 7.0
    estimated_rows: 50.6
    q_error: 7.228571428571429
  - node: Nested loop inner join (cost=8439 rows=50.6) (actual time=2996..4830 rows=7
      loops=1)
    actual_rows: 7.0
    estimated_rows: 50.6
    q_error: 7.228571428571429
  - node: Nested loop inner join (cost=8307 rows=15.6) (actual time=2996..4830 rows=6
      loops=1)
    actual_rows: 6.0
    estimated_rows: 15.6
    q_error: 2.6
  - node: Nested loop inner join (cost=8267 rows=12) (actual time=2595..4825 rows=1260
      loops=1)
    actual_rows: 1260.0
    estimated_rows: 12.0
    q_error: 105.0
  - node: Nested loop inner join (cost=8205 rows=23.9) (actual time=0.802..4820 rows=1784
      loops=1)
    actual_rows: 1784.0
    estimated_rows: 23.9
    q_error: 74.64435146443515
  - node: Nested loop inner join (cost=8018 rows=71.8) (actual time=0.794..4812 rows=1785
      loops=1)
    actual_rows: 1785.0
    estimated_rows: 71.8
    q_error: 24.860724233983287
  - node: Inner hash join (no condition) (cost=12.2 rows=1.13) (actual time=0.0442..0.0958
      rows=1 loops=1)
    actual_rows: 1.0
    estimated_rows: 1.13
    q_error: 1.13
  - node: "Filter: (it1.info = 'release dates') (cost=11.6 rows=11.3) (actual time=0.0081..0.0581
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 11.3
    q_error: 11.3
  - node: Table scan on it1 (cost=11.6 rows=113) (actual time=0.0057..0.048 rows=113
      loops=1)
    actual_rows: 113.0
    estimated_rows: 113.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: "Filter: (cct1.kind = 'complete+verified') (cost=0.65 rows=1) (actual time=0.0271..0.0293
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on cct1 (cost=0.65 rows=4) (actual time=0.0238..0.0269 rows=4
      loops=1)
    actual_rows: 4.0
    estimated_rows: 4.0
    q_error: 1.0
  - node: "Filter: ((mi.note like '%internet%') and ((mi.info like 'USA:% 199%') or
      (mi.info like 'USA:% 200%'))) (cost=682 rows=63.5) (actual time=0.749..4811
      rows=1785 loops=1)"
    actual_rows: 1785.0
    estimated_rows: 63.5
    q_error: 28.11023622047244
  - node: Index lookup on mi using info_type_id_movie_info (info_type_id=it1.id) (cost=682
      rows=2725) (actual time=0.0215..4488 rows=3.04e+6 loops=1)
    actual_rows: 3040000.0
    estimated_rows: 2725.0
    q_error: 1115.5963302752293
  - node: 'Filter: (t.production_year > 1990) (cost=0.25 rows=0.333) (actual time=0.00439..0.00446
      rows=0.999 loops=1785)'
    actual_rows: 0.999
    estimated_rows: 0.333
    q_error: 3.0
  - node: Single-row index lookup on t using PRIMARY (id=mi.movie_id) (cost=0.25 rows=1)
      (actual time=0.00396..0.00398 rows=1 loops=1785)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (kt.kind in ('movie','tv movie','video movie','video game')) (cost=0.25
      rows=0.5) (actual time=0.00218..0.00224 rows=0.706 loops=1784)"
    actual_rows: 0.706
    estimated_rows: 0.5
    q_error: 1.412
  - node: Single-row index lookup on kt using PRIMARY (id=t.kind_id) (cost=0.25 rows=1)
      (actual time=0.00141..0.00145 rows=1 loops=1784)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: 'Filter: (cc.status_id = cct1.id) (cost=0.327 rows=1.3) (actual time=0.00397..0.00397
      rows=0.00476 loops=1260)'
    actual_rows: 0.00476
    estimated_rows: 1.3
    q_error: 273.109243697479
  - node: Index lookup on cc using movie_id_complete_cast (movie_id=mi.movie_id) (cost=0.327
      rows=1.3) (actual time=0.00379..0.00382 rows=0.0302 loops=1260)
    actual_rows: 0.0302
    estimated_rows: 1.3
    q_error: 43.04635761589404
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=mi.movie_id)
      (cost=0.813 rows=3.24) (actual time=0.00632..0.00693 rows=1.17 loops=6)
    actual_rows: 1.17
    estimated_rows: 3.24
    q_error: 2.7692307692307696
  - node: Single-row covering index lookup on ct using PRIMARY (id=mc.company_type_id)
      (cost=0.192 rows=1) (actual time=0.00121..0.00121 rows=1 loops=7)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (cn.country_code = '[us]') (cost=0.192 rows=0.1) (actual time=0.0031..0.00314
      rows=1 loops=7)"
    actual_rows: 1.0
    estimated_rows: 0.1
    q_error: 10.0
  - node: Single-row index lookup on cn using PRIMARY (id=mc.company_id) (cost=0.192
      rows=1) (actual time=0.00263..0.00264 rows=1 loops=7)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mk using movie_id_movie_keyword (movie_id=mi.movie_id) (cost=2.91
      rows=11.5) (actual time=0.0113..0.0832 rows=89.7 loops=7)
    actual_rows: 89.7
    estimated_rows: 11.5
    q_error: 7.8
  - node: Single-row covering index lookup on k using PRIMARY (id=mk.keyword_id) (cost=0.0593
      rows=1) (actual time=0.00168..0.00169 rows=1 loops=628)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 24a\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(chn.name) AS voiced_char_name,\n       MIN(n.name) AS voicing_actress_name,\n\
    \       MIN(t.title) AS voiced_action_movie_jap_eng\nFROM aka_name AS an,\n  \
    \   char_name AS chn,\n     cast_info AS ci,\n     company_name AS cn,\n     info_type
    AS it,\n     keyword AS k,\n     movie_companies AS mc,\n     movie_info AS mi,\n\
    \     movie_keyword AS mk,\n     name AS n,\n     role_type AS rt,\n     title
    AS t\nWHERE ci.note IN ('(voice)',\n                  '(voice: Japanese version)',\n\
    \                  '(voice) (uncredited)',\n                  '(voice: English
    version)')\n  AND cn.country_code ='[us]'\n  AND it.info = 'release dates'\n \
    \ AND k.keyword IN ('hero',\n                    'martial-arts',\n           \
    \         'hand-to-hand-combat')\n  AND mi.info IS NOT NULL\n  AND (mi.info LIKE
    'Japan:%201%'\n       OR mi.info LIKE 'USA:%201%')\n  AND n.gender ='f'\n  AND
    n.name LIKE '%An%'\n  AND rt.role ='actress'\n  AND t.production_year > 2010\n\
    \  AND t.id = mi.movie_id\n  AND t.id = mc.movie_id\n  AND t.id = ci.movie_id\n\
    \  AND t.id = mk.movie_id\n  AND mc.movie_id = ci.movie_id\n  AND mc.movie_id
    = mi.movie_id\n  AND mc.movie_id = mk.movie_id\n  AND mi.movie_id = ci.movie_id\n\
    \  AND mi.movie_id = mk.movie_id\n  AND ci.movie_id = mk.movie_id\n  AND cn.id
    = mc.company_id\n  AND it.id = mi.info_type_id\n  AND n.id = ci.person_id\n  AND
    rt.id = ci.role_id\n  AND n.id = an.person_id\n  AND ci.person_id = an.person_id\n\
    \  AND chn.id = ci.person_role_id\n  AND k.id = mk.keyword_id"
  qep:
  - node: 'Aggregate: min(chn.`name`), min(n.`name`), min(t.title) (cost=3502 rows=1)
      (actual time=19340..19340 rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=3502 rows=7.36) (actual time=575..19339 rows=820
      loops=1)
    actual_rows: 820.0
    estimated_rows: 7.36
    q_error: 111.41304347826086
  - node: Nested loop inner join (cost=3498 rows=24.5) (actual time=185..19003 rows=220221
      loops=1)
    actual_rows: 220221.0
    estimated_rows: 24.5
    q_error: 8988.612244897959
  - node: Nested loop inner join (cost=3490 rows=2.13) (actual time=185..18763 rows=14276
      loops=1)
    actual_rows: 14276.0
    estimated_rows: 2.13
    q_error: 6702.347417840376
  - node: Nested loop inner join (cost=3484 rows=21.3) (actual time=185..18719 rows=35751
      loops=1)
    actual_rows: 35751.0
    estimated_rows: 21.3
    q_error: 1678.450704225352
  - node: Nested loop inner join (cost=3477 rows=6.55) (actual time=167..18659 rows=9530
      loops=1)
    actual_rows: 9530.0
    estimated_rows: 6.55
    q_error: 1454.9618320610687
  - node: Nested loop inner join (cost=3475 rows=4.36) (actual time=26.2..18636 rows=5351
      loops=1)
    actual_rows: 5351.0
    estimated_rows: 4.36
    q_error: 1227.2935779816512
  - node: Nested loop inner join (cost=3460 rows=43.6) (actual time=26.2..18630 rows=5351
      loops=1)
    actual_rows: 5351.0
    estimated_rows: 43.6
    q_error: 122.72935779816514
  - node: Nested loop inner join (cost=3387 rows=38.7) (actual time=26.1..18439 rows=6406
      loops=1)
    actual_rows: 6406.0
    estimated_rows: 38.7
    q_error: 165.5297157622739
  - node: Nested loop inner join (cost=3116 rows=774) (actual time=9.37..18389 rows=24426
      loops=1)
    actual_rows: 24426.0
    estimated_rows: 774.0
    q_error: 31.558139534883722
  - node: Nested loop inner join (cost=2845 rows=774) (actual time=9.36..18341 rows=24426
      loops=1)
    actual_rows: 24426.0
    estimated_rows: 774.0
    q_error: 31.558139534883722
  - node: Nested loop inner join (cost=2033 rows=2321) (actual time=1.29..17880 rows=255750
      loops=1)
    actual_rows: 255750.0
    estimated_rows: 2321.0
    q_error: 110.18957345971565
  - node: "Filter: (rt.`role` = 'actress') (cost=1.45 rows=1.2) (actual time=0.0204..0.027
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.2
    q_error: 1.2
  - node: Table scan on rt (cost=1.45 rows=12) (actual time=0.018..0.0244 rows=12
      loops=1)
    actual_rows: 12.0
    estimated_rows: 12.0
    q_error: 1.0
  - node: "Filter: ((ci.note in ('(voice)','(voice: Japanese version)','(voice) (uncredited)','(voice:
      English version)')) and (ci.person_role_id is not null)) (cost=1370 rows=1935)
      (actual time=1.27..17866 rows=255750 loops=1)"
    actual_rows: 255750.0
    estimated_rows: 1935.0
    q_error: 132.1705426356589
  - node: Index lookup on ci using role_id_cast_info (role_id=rt.id) (cost=1370 rows=4836)
      (actual time=0.0234..16978 rows=7.45e+6 loops=1)
    actual_rows: 7450000.0
    estimated_rows: 4836.0
    q_error: 1540.5293631100083
  - node: 'Filter: (t.production_year > 2010) (cost=0.25 rows=0.333) (actual time=0.00169..0.0017
      rows=0.0955 loops=255750)'
    actual_rows: 0.0955
    estimated_rows: 0.333
    q_error: 3.486910994764398
  - node: Single-row index lookup on t using PRIMARY (id=ci.movie_id) (cost=0.25 rows=1)
      (actual time=0.00147..0.00149 rows=1 loops=255750)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Single-row index lookup on chn using PRIMARY (id=ci.person_role_id) (cost=0.25
      rows=1) (actual time=0.00177..0.00179 rows=1 loops=24426)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: ((n.gender = 'f') and (n.`name` like '%An%')) (cost=0.25 rows=0.05)
      (actual time=0.00186..0.00188 rows=0.262 loops=24426)"
    actual_rows: 0.262
    estimated_rows: 0.05
    q_error: 5.24
  - node: Single-row index lookup on n using PRIMARY (id=ci.person_id) (cost=0.25
      rows=1) (actual time=0.00107..0.00109 rows=1 loops=24426)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: ((mi.info like 'Japan:%201%') or (mi.info like 'USA:%201%')) (cost=1.35
      rows=1.13) (actual time=0.0266..0.0297 rows=0.835 loops=6406)"
    actual_rows: 0.835
    estimated_rows: 1.13
    q_error: 1.3532934131736527
  - node: Index lookup on mi using movie_id_movie_info (movie_id=ci.movie_id) (cost=1.35
      rows=5.37) (actual time=0.00674..0.0272 rows=10.4 loops=6406)
    actual_rows: 10.4
    estimated_rows: 5.37
    q_error: 1.9366852886405959
  - node: "Filter: (it.info = 'release dates') (cost=0.25 rows=0.1) (actual time=722e-6..797e-6
      rows=1 loops=5351)"
    actual_rows: 1.0
    estimated_rows: 0.1
    q_error: 10.0
  - node: Single-row index lookup on it using PRIMARY (id=mi.info_type_id) (cost=0.25
      rows=1) (actual time=306e-6..330e-6 rows=1 loops=5351)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Covering index lookup on an using person_id_aka_name (person_id=ci.person_id)
      (cost=0.371 rows=1.5) (actual time=0.00343..0.00414 rows=1.78 loops=5351)
    actual_rows: 1.78
    estimated_rows: 1.5
    q_error: 1.1866666666666668
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=ci.movie_id)
      (cost=0.86 rows=3.24) (actual time=0.00372..0.00594 rows=3.75 loops=9530)
    actual_rows: 3.75
    estimated_rows: 3.24
    q_error: 1.1574074074074074
  - node: "Filter: (cn.country_code = '[us]') (cost=0.148 rows=0.1) (actual time=0.00111..0.00114
      rows=0.399 loops=35751)"
    actual_rows: 0.399
    estimated_rows: 0.1
    q_error: 3.99
  - node: Single-row index lookup on cn using PRIMARY (id=mc.company_id) (cost=0.148
      rows=1) (actual time=894e-6..913e-6 rows=1 loops=35751)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mk using movie_id_movie_keyword (movie_id=ci.movie_id) (cost=3.43
      rows=11.5) (actual time=0.00631..0.016 rows=15.4 loops=14276)
    actual_rows: 15.4
    estimated_rows: 11.5
    q_error: 1.3391304347826087
  - node: "Filter: (k.keyword in ('hero','martial-arts','hand-to-hand-combat')) (cost=0.0467
      rows=0.3) (actual time=0.00145..0.00145 rows=0.00372 loops=220221)"
    actual_rows: 0.00372
    estimated_rows: 0.3
    q_error: 80.64516129032258
  - node: Single-row index lookup on k using PRIMARY (id=mk.keyword_id) (cost=0.0467
      rows=1) (actual time=0.0012..0.00122 rows=1 loops=220221)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 24b\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(chn.name) AS voiced_char_name,\n       MIN(n.name) AS voicing_actress_name,\n\
    \       MIN(t.title) AS kung_fu_panda\nFROM aka_name AS an,\n     char_name AS
    chn,\n     cast_info AS ci,\n     company_name AS cn,\n     info_type AS it,\n\
    \     keyword AS k,\n     movie_companies AS mc,\n     movie_info AS mi,\n   \
    \  movie_keyword AS mk,\n     name AS n,\n     role_type AS rt,\n     title AS
    t\nWHERE ci.note IN ('(voice)',\n                  '(voice: Japanese version)',\n\
    \                  '(voice) (uncredited)',\n                  '(voice: English
    version)')\n  AND cn.country_code ='[us]'\n  AND cn.name = 'DreamWorks Animation'\n\
    \  AND it.info = 'release dates'\n  AND k.keyword IN ('hero',\n              \
    \      'martial-arts',\n                    'hand-to-hand-combat',\n         \
    \           'computer-animated-movie')\n  AND mi.info IS NOT NULL\n  AND (mi.info
    LIKE 'Japan:%201%'\n       OR mi.info LIKE 'USA:%201%')\n  AND n.gender ='f'\n\
    \  AND n.name LIKE '%An%'\n  AND rt.role ='actress'\n  AND t.production_year >
    2010\n  AND t.title LIKE 'Kung Fu Panda%'\n  AND t.id = mi.movie_id\n  AND t.id
    = mc.movie_id\n  AND t.id = ci.movie_id\n  AND t.id = mk.movie_id\n  AND mc.movie_id
    = ci.movie_id\n  AND mc.movie_id = mi.movie_id\n  AND mc.movie_id = mk.movie_id\n\
    \  AND mi.movie_id = ci.movie_id\n  AND mi.movie_id = mk.movie_id\n  AND ci.movie_id
    = mk.movie_id\n  AND cn.id = mc.company_id\n  AND it.id = mi.info_type_id\n  AND
    n.id = ci.person_id\n  AND rt.id = ci.role_id\n  AND n.id = an.person_id\n  AND
    ci.person_id = an.person_id\n  AND chn.id = ci.person_role_id\n  AND k.id = mk.keyword_id"
  qep:
  - node: 'Aggregate: min(chn.`name`), min(n.`name`), min(t.title) (cost=2943 rows=1)
      (actual time=16992..16992 rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=2943 rows=0.736) (actual time=7320..16992 rows=57
      loops=1)
    actual_rows: 57.0
    estimated_rows: 0.736
    q_error: 77.44565217391305
  - node: Nested loop inner join (cost=2942 rows=1.84) (actual time=7319..16990 rows=900
      loops=1)
    actual_rows: 900.0
    estimated_rows: 1.84
    q_error: 489.1304347826087
  - node: Nested loop inner join (cost=2942 rows=0.159) (actual time=7319..16989 rows=31
      loops=1)
    actual_rows: 31.0
    estimated_rows: 0.159
    q_error: 194.9685534591195
  - node: Nested loop inner join (cost=2941 rows=3.19) (actual time=7319..16988 rows=401
      loops=1)
    actual_rows: 401.0
    estimated_rows: 3.19
    q_error: 125.70532915360502
  - node: Nested loop inner join (cost=2940 rows=0.983) (actual time=7319..16988 rows=31
      loops=1)
    actual_rows: 31.0
    estimated_rows: 0.983
    q_error: 31.536113936927773
  - node: Nested loop inner join (cost=2940 rows=0.654) (actual time=7319..16988 rows=9
      loops=1)
    actual_rows: 9.0
    estimated_rows: 0.654
    q_error: 13.761467889908257
  - node: Nested loop inner join (cost=2937 rows=6.54) (actual time=7319..16988 rows=9
      loops=1)
    actual_rows: 9.0
    estimated_rows: 6.54
    q_error: 1.3761467889908257
  - node: Nested loop inner join (cost=2926 rows=5.8) (actual time=7318..16987 rows=7
      loops=1)
    actual_rows: 7.0
    estimated_rows: 5.8
    q_error: 1.206896551724138
  - node: Nested loop inner join (cost=2886 rows=116) (actual time=5593..16987 rows=16
      loops=1)
    actual_rows: 16.0
    estimated_rows: 116.0
    q_error: 7.25
  - node: Nested loop inner join (cost=2845 rows=116) (actual time=5593..16987 rows=16
      loops=1)
    actual_rows: 16.0
    estimated_rows: 116.0
    q_error: 7.25
  - node: Nested loop inner join (cost=2033 rows=2321) (actual time=1.21..16565 rows=255750
      loops=1)
    actual_rows: 255750.0
    estimated_rows: 2321.0
    q_error: 110.18957345971565
  - node: "Filter: (rt.`role` = 'actress') (cost=1.45 rows=1.2) (actual time=0.018..0.026
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.2
    q_error: 1.2
  - node: Table scan on rt (cost=1.45 rows=12) (actual time=0.0161..0.0228 rows=12
      loops=1)
    actual_rows: 12.0
    estimated_rows: 12.0
    q_error: 1.0
  - node: "Filter: ((ci.note in ('(voice)','(voice: Japanese version)','(voice) (uncredited)','(voice:
      English version)')) and (ci.person_role_id is not null)) (cost=1370 rows=1935)
      (actual time=1.19..16552 rows=255750 loops=1)"
    actual_rows: 255750.0
    estimated_rows: 1935.0
    q_error: 132.1705426356589
  - node: Index lookup on ci using role_id_cast_info (role_id=rt.id) (cost=1370 rows=4836)
      (actual time=0.0199..15838 rows=7.45e+6 loops=1)
    actual_rows: 7450000.0
    estimated_rows: 4836.0
    q_error: 1540.5293631100083
  - node: "Filter: ((t.production_year > 2010) and (t.title like 'Kung Fu Panda%'))
      (cost=0.25 rows=0.05) (actual time=0.00155..0.00155 rows=62.6e-6 loops=255750)"
    actual_rows: 6.26e-05
    estimated_rows: 0.05
    q_error: 798.7220447284345
  - node: Single-row index lookup on t using PRIMARY (id=ci.movie_id) (cost=0.25 rows=1)
      (actual time=0.00132..0.00134 rows=1 loops=255750)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Single-row index lookup on chn using PRIMARY (id=ci.person_role_id) (cost=0.251
      rows=1) (actual time=0.00451..0.00452 rows=1 loops=16)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: ((n.gender = 'f') and (n.`name` like '%An%')) (cost=0.25 rows=0.05)
      (actual time=0.00501..0.00503 rows=0.438 loops=16)"
    actual_rows: 0.438
    estimated_rows: 0.05
    q_error: 8.76
  - node: Single-row index lookup on n using PRIMARY (id=ci.person_id) (cost=0.25
      rows=1) (actual time=0.00348..0.00349 rows=1 loops=16)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: ((mi.info like 'Japan:%201%') or (mi.info like 'USA:%201%')) (cost=1.36
      rows=1.13) (actual time=0.132..0.152 rows=1.29 loops=7)"
    actual_rows: 1.29
    estimated_rows: 1.13
    q_error: 1.1415929203539825
  - node: Index lookup on mi using movie_id_movie_info (movie_id=ci.movie_id) (cost=1.36
      rows=5.37) (actual time=0.00974..0.142 rows=49.9 loops=7)
    actual_rows: 49.9
    estimated_rows: 5.37
    q_error: 9.292364990689013
  - node: "Filter: (it.info = 'release dates') (cost=0.252 rows=0.1) (actual time=0.00207..0.00211
      rows=1 loops=9)"
    actual_rows: 1.0
    estimated_rows: 0.1
    q_error: 10.0
  - node: Single-row index lookup on it using PRIMARY (id=mi.info_type_id) (cost=0.252
      rows=1) (actual time=0.00159..0.00161 rows=1 loops=9)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Covering index lookup on an using person_id_aka_name (person_id=ci.person_id)
      (cost=0.566 rows=1.5) (actual time=0.0048..0.00622 rows=3.44 loops=9)
    actual_rows: 3.44
    estimated_rows: 1.5
    q_error: 2.2933333333333334
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=ci.movie_id)
      (cost=1.14 rows=3.24) (actual time=0.00616..0.0183 rows=12.9 loops=31)
    actual_rows: 12.9
    estimated_rows: 3.24
    q_error: 3.9814814814814814
  - node: "Filter: ((cn.`name` = 'DreamWorks Animation') and (cn.country_code = '[us]'))
      (cost=0.149 rows=0.05) (actual time=0.00119..0.0012 rows=0.0773 loops=401)"
    actual_rows: 0.0773
    estimated_rows: 0.05
    q_error: 1.5459999999999998
  - node: Single-row index lookup on cn using PRIMARY (id=mc.company_id) (cost=0.149
      rows=1) (actual time=936e-6..960e-6 rows=1 loops=401)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mk using movie_id_movie_keyword (movie_id=ci.movie_id) (cost=10.1
      rows=11.5) (actual time=0.0121..0.0314 rows=29 loops=31)
    actual_rows: 29.0
    estimated_rows: 11.5
    q_error: 2.5217391304347827
  - node: "Filter: (k.keyword in ('hero','martial-arts','hand-to-hand-combat','computer-animated-movie'))
      (cost=0.0673 rows=0.4) (actual time=0.00181..0.00181 rows=0.0633 loops=900)"
    actual_rows: 0.0633
    estimated_rows: 0.4
    q_error: 6.319115323854661
  - node: Single-row index lookup on k using PRIMARY (id=mk.keyword_id) (cost=0.0673
      rows=1) (actual time=0.00148..0.00152 rows=1 loops=900)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 25a\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(mi.info) AS movie_budget,\n       MIN(mi_idx.info) AS movie_votes,\n\
    \       MIN(n.name) AS male_writer,\n       MIN(t.title) AS violent_movie_title\n
    FROM cast_info AS ci,\n     info_type AS it1,\n     info_type AS it2,\n     keyword
    AS k,\n     movie_info AS mi,\n     movie_info_idx AS mi_idx,\n     movie_keyword
    AS mk,\n     name AS n,\n     title AS t\nWHERE ci.note IN ('(writer)',\n    \
    \              '(head writer)',\n                  '(written by)',\n         \
    \         '(story)',\n                  '(story editor)')\n  AND it1.info = 'genres'\n\
    \  AND it2.info = 'votes'\n  AND k.keyword IN ('murder',\n                   \
    \ 'blood',\n                    'gore',\n                    'death',\n      \
    \              'female-nudity')\n  AND mi.info = 'Horror'\n  AND n.gender = 'm'\n\
    \  AND t.id = mi.movie_id\n  AND t.id = mi_idx.movie_id\n  AND t.id = ci.movie_id\n\
    \  AND t.id = mk.movie_id\n  AND ci.movie_id = mi.movie_id\n  AND ci.movie_id
    = mi_idx.movie_id\n  AND ci.movie_id = mk.movie_id\n  AND mi.movie_id = mi_idx.movie_id\n\
    \  AND mi.movie_id = mk.movie_id\n  AND mi_idx.movie_id = mk.movie_id\n  AND n.id
    = ci.person_id\n  AND it1.id = mi.info_type_id\n  AND it2.id = mi_idx.info_type_id\n\
    \  AND k.id = mk.keyword_id"
  qep:
  - node: 'Aggregate: min(mi.info), min(mi_idx.info), min(n.`name`), min(t.title)
      (cost=29272 rows=1) (actual time=5292..5292 rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=28826 rows=4455) (actual time=45.4..5289 rows=4407
      loops=1)
    actual_rows: 4407.0
    estimated_rows: 4455.0
    q_error: 1.0108917631041525
  - node: Nested loop inner join (cost=27846 rows=8911) (actual time=4.49..4870 rows=128590
      loops=1)
    actual_rows: 128590.0
    estimated_rows: 8911.0
    q_error: 14.430479183032208
  - node: Nested loop inner join (cost=24727 rows=772) (actual time=4.47..4512 rows=4851
      loops=1)
    actual_rows: 4851.0
    estimated_rows: 772.0
    q_error: 6.283678756476684
  - node: Nested loop inner join (cost=23360 rows=7722) (actual time=3.49..4481 rows=8650
      loops=1)
    actual_rows: 8650.0
    estimated_rows: 7722.0
    q_error: 1.1201761201761202
  - node: Nested loop inner join (cost=17954 rows=998) (actual time=0.112..2860 rows=16480
      loops=1)
    actual_rows: 16480.0
    estimated_rows: 998.0
    q_error: 16.51302605210421
  - node: Nested loop inner join (cost=17778 rows=998) (actual time=0.107..2827 rows=16480
      loops=1)
    actual_rows: 16480.0
    estimated_rows: 998.0
    q_error: 16.51302605210421
  - node: Nested loop inner join (cost=14283 rows=9984) (actual time=0.1..2764 rows=49452
      loops=1)
    actual_rows: 49452.0
    estimated_rows: 9984.0
    q_error: 4.953125
  - node: Nested loop inner join (cost=10789 rows=3079) (actual time=0.0871..2604
      rows=30413 loops=1)
    actual_rows: 30413.0
    estimated_rows: 3079.0
    q_error: 9.877557648587203
  - node: "Filter: (it1.info = 'genres') (cost=11.6 rows=11.3) (actual time=0.0201..0.0432
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 11.3
    q_error: 11.3
  - node: Table scan on it1 (cost=11.6 rows=113) (actual time=0.0178..0.0377 rows=113
      loops=1)
    actual_rows: 113.0
    estimated_rows: 113.0
    q_error: 1.0
  - node: "Filter: (mi.info = 'Horror') (cost=684 rows=272) (actual time=0.0664..2602
      rows=30413 loops=1)"
    actual_rows: 30413.0
    estimated_rows: 272.0
    q_error: 111.8125
  - node: Index lookup on mi using info_type_id_movie_info (info_type_id=it1.id) (cost=684
      rows=2725) (actual time=0.0219..2474 rows=1.53e+6 loops=1)
    actual_rows: 1530000.0
    estimated_rows: 2725.0
    q_error: 561.4678899082569
  - node: Index lookup on mi_idx using movie_id_movie_info_idx (movie_id=mi.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00311..0.00502 rows=1.63 loops=30413)
    actual_rows: 1.63
    estimated_rows: 3.24
    q_error: 1.9877300613496935
  - node: "Filter: (it2.info = 'votes') (cost=0.25 rows=0.1) (actual time=0.00111..0.00114
      rows=0.333 loops=49452)"
    actual_rows: 0.333
    estimated_rows: 0.1
    q_error: 3.33
  - node: Single-row index lookup on it2 using PRIMARY (id=mi_idx.info_type_id) (cost=0.25
      rows=1) (actual time=859e-6..883e-6 rows=1 loops=49452)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Single-row index lookup on t using PRIMARY (id=mi.movie_id) (cost=0.0772
      rows=1) (actual time=0.00178..0.00181 rows=1 loops=16480)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (ci.note in ('(writer)','(head writer)','(written by)','(story)','(story
      editor)')) (cost=3.87 rows=7.73) (actual time=0.0838..0.0982 rows=0.525 loops=16480)"
    actual_rows: 0.525
    estimated_rows: 7.73
    q_error: 14.723809523809525
  - node: Index lookup on ci using movie_id_cast_info (movie_id=mi.movie_id) (cost=3.87
      rows=15.5) (actual time=0.00498..0.094 rows=33.3 loops=16480)
    actual_rows: 33.3
    estimated_rows: 15.5
    q_error: 2.148387096774193
  - node: "Filter: (n.gender = 'm') (cost=0.0771 rows=0.1) (actual time=0.00343..0.00348
      rows=0.561 loops=8650)"
    actual_rows: 0.561
    estimated_rows: 0.1
    q_error: 5.61
  - node: Single-row index lookup on n using PRIMARY (id=ci.person_id) (cost=0.0771
      rows=1) (actual time=0.00318..0.00321 rows=1 loops=8650)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mk using movie_id_movie_keyword (movie_id=mi.movie_id) (cost=2.89
      rows=11.5) (actual time=0.0394..0.0721 rows=26.5 loops=4851)
    actual_rows: 26.5
    estimated_rows: 11.5
    q_error: 2.3043478260869565
  - node: "Filter: (k.keyword in ('murder','blood','gore','death','female-nudity'))
      (cost=0.00997 rows=0.5) (actual time=0.00316..0.00317 rows=0.0343 loops=128590)"
    actual_rows: 0.0343
    estimated_rows: 0.5
    q_error: 14.57725947521866
  - node: Single-row index lookup on k using PRIMARY (id=mk.keyword_id) (cost=0.00997
      rows=1) (actual time=0.00288..0.0029 rows=1 loops=128590)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 25b\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(mi.info) AS movie_budget,\n       MIN(mi_idx.info) AS movie_votes,\n\
    \       MIN(n.name) AS male_writer,\n       MIN(t.title) AS violent_movie_title\n
    FROM cast_info AS ci,\n     info_type AS it1,\n     info_type AS it2,\n     keyword
    AS k,\n     movie_info AS mi,\n     movie_info_idx AS mi_idx,\n     movie_keyword
    AS mk,\n     name AS n,\n     title AS t\nWHERE ci.note IN ('(writer)',\n    \
    \              '(head writer)',\n                  '(written by)',\n         \
    \         '(story)',\n                  '(story editor)')\n  AND it1.info = 'genres'\n\
    \  AND it2.info = 'votes'\n  AND k.keyword IN ('murder',\n                   \
    \ 'blood',\n                    'gore',\n                    'death',\n      \
    \              'female-nudity')\n  AND mi.info = 'Horror'\n  AND n.gender = 'm'\n\
    \  AND t.production_year > 2010\n  AND t.title LIKE 'Vampire%'\n  AND t.id = mi.movie_id\n\
    \  AND t.id = mi_idx.movie_id\n  AND t.id = ci.movie_id\n  AND t.id = mk.movie_id\n\
    \  AND ci.movie_id = mi.movie_id\n  AND ci.movie_id = mi_idx.movie_id\n  AND ci.movie_id
    = mk.movie_id\n  AND mi.movie_id = mi_idx.movie_id\n  AND mi.movie_id = mk.movie_id\n\
    \  AND mi_idx.movie_id = mk.movie_id\n  AND n.id = ci.person_id\n  AND it1.id
    = mi.info_type_id\n  AND it2.id = mi_idx.info_type_id\n  AND k.id = mk.keyword_id"
  qep:
  - node: 'Aggregate: min(mi.info), min(mi_idx.info), min(n.`name`), min(t.title)
      (cost=12782 rows=1) (actual time=2487..2487 rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=12759 rows=223) (actual time=2342..2487 rows=6
      loops=1)
    actual_rows: 6.0
    estimated_rows: 223.0
    q_error: 37.166666666666664
  - node: Nested loop inner join (cost=12710 rows=446) (actual time=2342..2486 rows=35
      loops=1)
    actual_rows: 35.0
    estimated_rows: 446.0
    q_error: 12.742857142857142
  - node: Nested loop inner join (cost=12554 rows=38.6) (actual time=2342..2486 rows=4
      loops=1)
    actual_rows: 4.0
    estimated_rows: 38.6
    q_error: 9.65
  - node: Nested loop inner join (cost=12486 rows=386) (actual time=2342..2486 rows=4
      loops=1)
    actual_rows: 4.0
    estimated_rows: 386.0
    q_error: 96.5
  - node: Nested loop inner join (cost=12216 rows=49.9) (actual time=158..2486 rows=10
      loops=1)
    actual_rows: 10.0
    estimated_rows: 49.9
    q_error: 4.99
  - node: Nested loop inner join (cost=12041 rows=499) (actual time=158..2486 rows=30
      loops=1)
    actual_rows: 30.0
    estimated_rows: 499.0
    q_error: 16.633333333333333
  - node: Nested loop inner join (cost=11866 rows=154) (actual time=158..2485 rows=23
      loops=1)
    actual_rows: 23.0
    estimated_rows: 154.0
    q_error: 6.695652173913044
  - node: Nested loop inner join (cost=10789 rows=3079) (actual time=0.0876..2428
      rows=30413 loops=1)
    actual_rows: 30413.0
    estimated_rows: 3079.0
    q_error: 9.877557648587203
  - node: "Filter: (it1.info = 'genres') (cost=11.6 rows=11.3) (actual time=0.0197..0.0541
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 11.3
    q_error: 11.3
  - node: Table scan on it1 (cost=11.6 rows=113) (actual time=0.0174..0.0465 rows=113
      loops=1)
    actual_rows: 113.0
    estimated_rows: 113.0
    q_error: 1.0
  - node: "Filter: (mi.info = 'Horror') (cost=684 rows=272) (actual time=0.067..2426
      rows=30413 loops=1)"
    actual_rows: 30413.0
    estimated_rows: 272.0
    q_error: 111.8125
  - node: Index lookup on mi using info_type_id_movie_info (info_type_id=it1.id) (cost=684
      rows=2725) (actual time=0.0227..2300 rows=1.53e+6 loops=1)
    actual_rows: 1530000.0
    estimated_rows: 2725.0
    q_error: 561.4678899082569
  - node: "Filter: ((t.production_year > 2010) and (t.title like 'Vampire%')) (cost=0.25
      rows=0.05) (actual time=0.00179..0.00179 rows=756e-6 loops=30413)"
    actual_rows: 0.000756
    estimated_rows: 0.05
    q_error: 66.13756613756614
  - node: Single-row index lookup on t using PRIMARY (id=mi.movie_id) (cost=0.25 rows=1)
      (actual time=0.00152..0.00154 rows=1 loops=30413)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mi_idx using movie_id_movie_info_idx (movie_id=mi.movie_id)
      (cost=0.813 rows=3.24) (actual time=0.00328..0.00452 rows=1.3 loops=23)
    actual_rows: 1.3
    estimated_rows: 3.24
    q_error: 2.4923076923076923
  - node: "Filter: (it2.info = 'votes') (cost=0.25 rows=0.1) (actual time=0.00123..0.00125
      rows=0.333 loops=30)"
    actual_rows: 0.333
    estimated_rows: 0.1
    q_error: 3.33
  - node: Single-row index lookup on it2 using PRIMARY (id=mi_idx.info_type_id) (cost=0.25
      rows=1) (actual time=997e-6..0.00101 rows=1 loops=30)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (ci.note in ('(writer)','(head writer)','(written by)','(story)','(story
      editor)')) (cost=3.88 rows=7.73) (actual time=0.0672..0.0793 rows=0.4 loops=10)"
    actual_rows: 0.4
    estimated_rows: 7.73
    q_error: 19.325
  - node: Index lookup on ci using movie_id_cast_info (movie_id=mi.movie_id) (cost=3.88
      rows=15.5) (actual time=0.00537..0.0767 rows=27.6 loops=10)
    actual_rows: 27.6
    estimated_rows: 15.5
    q_error: 1.7806451612903227
  - node: "Filter: (n.gender = 'm') (cost=0.0771 rows=0.1) (actual time=0.00407..0.00413
      rows=1 loops=4)"
    actual_rows: 1.0
    estimated_rows: 0.1
    q_error: 10.0
  - node: Single-row index lookup on n using PRIMARY (id=ci.person_id) (cost=0.0771
      rows=1) (actual time=0.00387..0.00387 rows=1 loops=4)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mk using movie_id_movie_keyword (movie_id=mi.movie_id) (cost=2.91
      rows=11.5) (actual time=0.0116..0.0153 rows=8.75 loops=4)
    actual_rows: 8.75
    estimated_rows: 11.5
    q_error: 1.3142857142857143
  - node: "Filter: (k.keyword in ('murder','blood','gore','death','female-nudity'))
      (cost=0.0101 rows=0.5) (actual time=0.00355..0.00356 rows=0.171 loops=35)"
    actual_rows: 0.171
    estimated_rows: 0.5
    q_error: 2.923976608187134
  - node: Single-row index lookup on k using PRIMARY (id=mk.keyword_id) (cost=0.0101
      rows=1) (actual time=0.00328..0.00331 rows=1 loops=35)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 25c\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(mi.info) AS movie_budget,\n       MIN(mi_idx.info) AS movie_votes,\n\
    \       MIN(n.name) AS male_writer,\n       MIN(t.title) AS violent_movie_title\n
    FROM cast_info AS ci,\n     info_type AS it1,\n     info_type AS it2,\n     keyword
    AS k,\n     movie_info AS mi,\n     movie_info_idx AS mi_idx,\n     movie_keyword
    AS mk,\n     name AS n,\n     title AS t\nWHERE ci.note IN ('(writer)',\n    \
    \              '(head writer)',\n                  '(written by)',\n         \
    \         '(story)',\n                  '(story editor)')\n  AND it1.info = 'genres'\n\
    \  AND it2.info = 'votes'\n  AND k.keyword IN ('murder',\n                   \
    \ 'violence',\n                    'blood',\n                    'gore',\n   \
    \                 'death',\n                    'female-nudity',\n           \
    \         'hospital')\n  AND mi.info IN ('Horror',\n                  'Action',\n\
    \                  'Sci-Fi',\n                  'Thriller',\n                \
    \  'Crime',\n                  'War')\n  AND n.gender = 'm'\n  AND t.id = mi.movie_id\n\
    \  AND t.id = mi_idx.movie_id\n  AND t.id = ci.movie_id\n  AND t.id = mk.movie_id\n\
    \  AND ci.movie_id = mi.movie_id\n  AND ci.movie_id = mi_idx.movie_id\n  AND ci.movie_id
    = mk.movie_id\n  AND mi.movie_id = mi_idx.movie_id\n  AND mi.movie_id = mk.movie_id\n\
    \  AND mi_idx.movie_id = mk.movie_id\n  AND n.id = ci.person_id\n  AND it1.id
    = mi.info_type_id\n  AND it2.id = mi_idx.info_type_id\n  AND k.id = mk.keyword_id"
  qep:
  - node: 'Aggregate: min(mi.info), min(mi_idx.info), min(n.`name`), min(t.title)
      (cost=103204 rows=1) (actual time=17688..17688 rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=100976 rows=22277) (actual time=4.38..17671
      rows=26153 loops=1)
    actual_rows: 26153.0
    estimated_rows: 22277.0
    q_error: 1.173991111909144
  - node: Nested loop inner join (cost=96076 rows=44555) (actual time=4.34..15301
      rows=941053 loops=1)
    actual_rows: 941053.0
    estimated_rows: 44555.0
    q_error: 21.12115363034452
  - node: Nested loop inner join (cost=80482 rows=3861) (actual time=4.32..13672 rows=28073
      loops=1)
    actual_rows: 28073.0
    estimated_rows: 3861.0
    q_error: 7.270914270914271
  - node: Nested loop inner join (cost=73645 rows=38609) (actual time=2.3..13532 rows=54155
      loops=1)
    actual_rows: 54155.0
    estimated_rows: 38609.0
    q_error: 1.4026522313450231
  - node: Nested loop inner join (cost=46618 rows=4992) (actual time=0.0925..4303
      rows=102516 loops=1)
    actual_rows: 102516.0
    estimated_rows: 4992.0
    q_error: 20.536057692307693
  - node: Nested loop inner join (cost=45734 rows=4992) (actual time=0.0884..4151
      rows=102516 loops=1)
    actual_rows: 102516.0
    estimated_rows: 4992.0
    q_error: 20.536057692307693
  - node: Nested loop inner join (cost=28261 rows=49922) (actual time=0.0815..3782
      rows=307785 loops=1)
    actual_rows: 307785.0
    estimated_rows: 49922.0
    q_error: 6.165317895917632
  - node: Nested loop inner join (cost=10789 rows=15396) (actual time=0.0693..2928
      rows=186594 loops=1)
    actual_rows: 186594.0
    estimated_rows: 15396.0
    q_error: 12.119641465315667
  - node: "Filter: (it1.info = 'genres') (cost=11.6 rows=11.3) (actual time=0.0199..0.0502
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 11.3
    q_error: 11.3
  - node: Table scan on it1 (cost=11.6 rows=113) (actual time=0.0175..0.0432 rows=113
      loops=1)
    actual_rows: 113.0
    estimated_rows: 113.0
    q_error: 1.0
  - node: "Filter: (mi.info in ('Horror','Action','Sci-Fi','Thriller','Crime','War'))
      (cost=693 rows=1362) (actual time=0.0487..2917 rows=186594 loops=1)"
    actual_rows: 186594.0
    estimated_rows: 1362.0
    q_error: 137.0
  - node: Index lookup on mi using info_type_id_movie_info (info_type_id=it1.id) (cost=693
      rows=2725) (actual time=0.0204..2638 rows=1.53e+6 loops=1)
    actual_rows: 1530000.0
    estimated_rows: 2725.0
    q_error: 561.4678899082569
  - node: Index lookup on mi_idx using movie_id_movie_info_idx (movie_id=mi.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.0026..0.00438 rows=1.65 loops=186594)
    actual_rows: 1.65
    estimated_rows: 3.24
    q_error: 1.9636363636363638
  - node: "Filter: (it2.info = 'votes') (cost=0.25 rows=0.1) (actual time=0.00105..0.00107
      rows=0.333 loops=307785)"
    actual_rows: 0.333
    estimated_rows: 0.1
    q_error: 3.33
  - node: Single-row index lookup on it2 using PRIMARY (id=mi_idx.info_type_id) (cost=0.25
      rows=1) (actual time=809e-6..832e-6 rows=1 loops=307785)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Single-row index lookup on t using PRIMARY (id=mi.movie_id) (cost=0.0771
      rows=1) (actual time=0.00128..0.0013 rows=1 loops=102516)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (ci.note in ('(writer)','(head writer)','(written by)','(story)','(story
      editor)')) (cost=3.87 rows=7.73) (actual time=0.076..0.0899 rows=0.528 loops=102516)"
    actual_rows: 0.528
    estimated_rows: 7.73
    q_error: 14.640151515151516
  - node: Index lookup on ci using movie_id_cast_info (movie_id=mi.movie_id) (cost=3.87
      rows=15.5) (actual time=0.00353..0.0849 rows=39.4 loops=102516)
    actual_rows: 39.4
    estimated_rows: 15.5
    q_error: 2.541935483870968
  - node: "Filter: (n.gender = 'm') (cost=0.0771 rows=0.1) (actual time=0.00237..0.00242
      rows=0.518 loops=54155)"
    actual_rows: 0.518
    estimated_rows: 0.1
    q_error: 5.18
  - node: Single-row index lookup on n using PRIMARY (id=ci.person_id) (cost=0.0771
      rows=1) (actual time=0.00214..0.00217 rows=1 loops=54155)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mk using movie_id_movie_keyword (movie_id=mi.movie_id) (cost=2.89
      rows=11.5) (actual time=0.0269..0.0562 rows=33.5 loops=28073)
    actual_rows: 33.5
    estimated_rows: 11.5
    q_error: 2.9130434782608696
  - node: "Filter: (k.keyword in ('murder','violence','blood','gore','death','female-nudity','hospital'))
      (cost=0.00997 rows=0.5) (actual time=0.00243..0.00243 rows=0.0278 loops=941053)"
    actual_rows: 0.0278
    estimated_rows: 0.5
    q_error: 17.98561151079137
  - node: Single-row index lookup on k using PRIMARY (id=mk.keyword_id) (cost=0.00997
      rows=1) (actual time=0.00215..0.00217 rows=1 loops=941053)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 26a\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(chn.name) AS character_name,\n       MIN(mi_idx.info) AS rating,\n\
    \       MIN(n.name) AS playing_actor,\n       MIN(t.title) AS complete_hero_movie\n
    FROM complete_cast AS cc,\n     comp_cast_type AS cct1,\n     comp_cast_type AS
    cct2,\n     char_name AS chn,\n     cast_info AS ci,\n     info_type AS it2,\n\
    \     keyword AS k,\n     kind_type AS kt,\n     movie_info_idx AS mi_idx,\n \
    \    movie_keyword AS mk,\n     name AS n,\n     title AS t\nWHERE cct1.kind =
    'cast'\n  AND cct2.kind LIKE '%complete%'\n  AND chn.name IS NOT NULL\n  AND (chn.name
    LIKE '%man%'\n       OR chn.name LIKE '%Man%')\n  AND it2.info = 'rating'\n  AND
    k.keyword IN ('superhero',\n                    'marvel-comics',\n           \
    \         'based-on-comic',\n                    'tv-special',\n             \
    \       'fight',\n                    'violence',\n                    'magnet',\n\
    \                    'web',\n                    'claw',\n                   \
    \ 'laser')\n  AND kt.kind = 'movie'\n  AND mi_idx.info > '7.0'\n  AND t.production_year
    > 2000\n  AND kt.id = t.kind_id\n  AND t.id = mk.movie_id\n  AND t.id = ci.movie_id\n\
    \  AND t.id = cc.movie_id\n  AND t.id = mi_idx.movie_id\n  AND mk.movie_id = ci.movie_id\n\
    \  AND mk.movie_id = cc.movie_id\n  AND mk.movie_id = mi_idx.movie_id\n  AND ci.movie_id
    = cc.movie_id\n  AND ci.movie_id = mi_idx.movie_id\n  AND cc.movie_id = mi_idx.movie_id\n\
    \  AND chn.id = ci.person_role_id\n  AND n.id = ci.person_id\n  AND k.id = mk.keyword_id\n\
    \  AND cct1.id = cc.subject_id\n  AND cct2.id = cc.status_id\n  AND it2.id = mi_idx.info_type_id"
  qep:
  - node: 'Aggregate: min(chn.`name`), min(mi_idx.info), min(n.`name`), min(t.title)
      (cost=62905 rows=1) (actual time=1650..1650 rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=62840 rows=652) (actual time=6.09..1648 rows=1728
      loops=1)
    actual_rows: 1728.0
    estimated_rows: 652.0
    q_error: 2.6503067484662575
  - node: Nested loop inner join (cost=62163 rows=1305) (actual time=1.42..889 rows=349503
      loops=1)
    actual_rows: 349503.0
    estimated_rows: 1305.0
    q_error: 267.8183908045977
  - node: Nested loop inner join (cost=52900 rows=113) (actual time=1.4..510 rows=2048
      loops=1)
    actual_rows: 2048.0
    estimated_rows: 113.0
    q_error: 18.123893805309734
  - node: Nested loop inner join (cost=52157 rows=113) (actual time=1.39..503 rows=2048
      loops=1)
    actual_rows: 2048.0
    estimated_rows: 113.0
    q_error: 18.123893805309734
  - node: Nested loop inner join (cost=48614 rows=539) (actual time=0.806..412 rows=31384
      loops=1)
    actual_rows: 31384.0
    estimated_rows: 539.0
    q_error: 58.22634508348794
  - node: Nested loop inner join (cost=44789 rows=34.8) (actual time=0.776..222 rows=647
      loops=1)
    actual_rows: 647.0
    estimated_rows: 34.8
    q_error: 18.591954022988507
  - node: Nested loop inner join (cost=42316 rows=348) (actual time=0.661..220 rows=1252
      loops=1)
    actual_rows: 1252.0
    estimated_rows: 348.0
    q_error: 3.5977011494252875
  - node: Nested loop inner join (cost=34897 rows=322) (actual time=0.644..188 rows=4696
      loops=1)
    actual_rows: 4696.0
    estimated_rows: 322.0
    q_error: 14.583850931677018
  - node: Inner hash join (cc.status_id = cct2.id), (cc.subject_id = cct1.id) (cost=574
      rows=4834) (actual time=0.623..55.9 rows=85941 loops=1)
    actual_rows: 85941.0
    estimated_rows: 4834.0
    q_error: 17.778444352503104
  - node: 'Filter: (cc.movie_id is not null) (cost=13624 rows=135359) (actual time=0.572..36
      rows=135086 loops=1)'
    actual_rows: 135086.0
    estimated_rows: 135359.0
    q_error: 1.0020209348118976
  - node: Table scan on cc (cost=13624 rows=135359) (actual time=0.571..28.1 rows=135086
      loops=1)
    actual_rows: 135086.0
    estimated_rows: 135359.0
    q_error: 1.0020209348118976
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: Inner hash join (no condition) (cost=2.18 rows=0.0357) (actual time=0.044..0.0459
      rows=2 loops=1)
    actual_rows: 2.0
    estimated_rows: 0.0357
    q_error: 56.02240896358543
  - node: "Filter: (kt.kind = 'movie') (cost=0.951 rows=1) (actual time=0.0045..0.0059
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on kt (cost=0.951 rows=7) (actual time=0.0042..0.0053 rows=7
      loops=1)
    actual_rows: 7.0
    estimated_rows: 7.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: Inner hash join (no condition) (cost=1.3 rows=0.25) (actual time=0.0338..0.0352
      rows=2 loops=1)
    actual_rows: 2.0
    estimated_rows: 0.25
    q_error: 8.0
  - node: "Filter: (cct2.kind like '%complete%') (cost=0.65 rows=1) (actual time=0.0042..0.0049
      rows=2 loops=1)"
    actual_rows: 2.0
    estimated_rows: 1.0
    q_error: 2.0
  - node: Table scan on cct2 (cost=0.65 rows=4) (actual time=0.0018..0.0025 rows=4
      loops=1)
    actual_rows: 4.0
    estimated_rows: 4.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: "Filter: (cct1.kind = 'cast') (cost=0.65 rows=1) (actual time=0.0174..0.0208
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on cct1 (cost=0.65 rows=4) (actual time=0.0152..0.0182 rows=4
      loops=1)
    actual_rows: 4.0
    estimated_rows: 4.0
    q_error: 1.0
  - node: 'Filter: ((t.kind_id = kt.id) and (t.production_year > 2000)) (cost=0.25
      rows=0.0667) (actual time=0.00145..0.00145 rows=0.0546 loops=85941)'
    actual_rows: 0.0546
    estimated_rows: 0.0667
    q_error: 1.2216117216117215
  - node: Single-row index lookup on t using PRIMARY (id=cc.movie_id) (cost=0.25 rows=1)
      (actual time=0.00125..0.00127 rows=1 loops=85941)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (mi_idx.info > '7.0') (cost=0.811 rows=1.08) (actual time=0.0062..0.00663
      rows=0.267 loops=4696)"
    actual_rows: 0.267
    estimated_rows: 1.08
    q_error: 4.044943820224719
  - node: Index lookup on mi_idx using movie_id_movie_info_idx (movie_id=cc.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00356..0.00621 rows=2.58 loops=4696)
    actual_rows: 2.58
    estimated_rows: 3.24
    q_error: 1.255813953488372
  - node: "Filter: (it2.info = 'rating') (cost=0.25 rows=0.1) (actual time=0.00132..0.00137
      rows=0.517 loops=1252)"
    actual_rows: 0.517
    estimated_rows: 0.1
    q_error: 5.17
  - node: Single-row index lookup on it2 using PRIMARY (id=mi_idx.info_type_id) (cost=0.25
      rows=1) (actual time=0.001..0.00103 rows=1 loops=1252)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: 'Filter: (ci.person_role_id is not null) (cost=3.87 rows=15.5) (actual time=0.042..0.292
      rows=48.5 loops=647)'
    actual_rows: 48.5
    estimated_rows: 15.5
    q_error: 3.129032258064516
  - node: Index lookup on ci using movie_id_cast_info (movie_id=cc.movie_id) (cost=3.87
      rows=15.5) (actual time=0.0418..0.286 rows=120 loops=647)
    actual_rows: 120.0
    estimated_rows: 15.5
    q_error: 7.741935483870968
  - node: "Filter: ((chn.`name` like '%man%') or (chn.`name` like '%Man%')) (cost=0.231
      rows=0.21) (actual time=0.00281..0.00282 rows=0.0653 loops=31384)"
    actual_rows: 0.0653
    estimated_rows: 0.21
    q_error: 3.215926493108729
  - node: Single-row index lookup on chn using PRIMARY (id=ci.person_role_id) (cost=0.231
      rows=1) (actual time=0.00232..0.00235 rows=1 loops=31384)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Single-row index lookup on n using PRIMARY (id=ci.person_id) (cost=0.231
      rows=1) (actual time=0.00314..0.00316 rows=1 loops=2048)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mk using movie_id_movie_keyword (movie_id=cc.movie_id) (cost=2.89
      rows=11.5) (actual time=0.0133..0.176 rows=171 loops=2048)
    actual_rows: 171.0
    estimated_rows: 11.5
    q_error: 14.869565217391305
  - node: "Filter: (k.keyword in ('superhero','marvel-comics','based-on-comic','tv-special','fight','violence','magnet','web','claw','laser'))
      (cost=0.015 rows=0.5) (actual time=0.00209..0.00209 rows=0.00494 loops=349503)"
    actual_rows: 0.00494
    estimated_rows: 0.5
    q_error: 101.21457489878543
  - node: Single-row index lookup on k using PRIMARY (id=mk.keyword_id) (cost=0.015
      rows=1) (actual time=0.00178..0.0018 rows=1 loops=349503)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 26b\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(chn.name) AS character_name,\n       MIN(mi_idx.info) AS rating,\n\
    \       MIN(t.title) AS complete_hero_movie\nFROM complete_cast AS cc,\n     comp_cast_type
    AS cct1,\n     comp_cast_type AS cct2,\n     char_name AS chn,\n     cast_info
    AS ci,\n     info_type AS it2,\n     keyword AS k,\n     kind_type AS kt,\n  \
    \   movie_info_idx AS mi_idx,\n     movie_keyword AS mk,\n     name AS n,\n  \
    \   title AS t\nWHERE cct1.kind = 'cast'\n  AND cct2.kind LIKE '%complete%'\n\
    \  AND chn.name IS NOT NULL\n  AND (chn.name LIKE '%man%'\n       OR chn.name
    LIKE '%Man%')\n  AND it2.info = 'rating'\n  AND k.keyword IN ('superhero',\n \
    \                   'marvel-comics',\n                    'based-on-comic',\n\
    \                    'fight')\n  AND kt.kind = 'movie'\n  AND mi_idx.info > '8.0'\n\
    \  AND t.production_year > 2005\n  AND kt.id = t.kind_id\n  AND t.id = mk.movie_id\n\
    \  AND t.id = ci.movie_id\n  AND t.id = cc.movie_id\n  AND t.id = mi_idx.movie_id\n\
    \  AND mk.movie_id = ci.movie_id\n  AND mk.movie_id = cc.movie_id\n  AND mk.movie_id
    = mi_idx.movie_id\n  AND ci.movie_id = cc.movie_id\n  AND ci.movie_id = mi_idx.movie_id\n\
    \  AND cc.movie_id = mi_idx.movie_id\n  AND chn.id = ci.person_role_id\n  AND
    n.id = ci.person_id\n  AND k.id = mk.keyword_id\n  AND cct1.id = cc.subject_id\n\
    \  AND cct2.id = cc.status_id\n  AND it2.id = mi_idx.info_type_id"
  qep:
  - node: 'Aggregate: min(chn.`name`), min(mi_idx.info), min(t.title) (cost=62892
      rows=1) (actual time=267..267 rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=62840 rows=522) (actual time=63.9..267 rows=93
      loops=1)
    actual_rows: 93.0
    estimated_rows: 522.0
    q_error: 5.612903225806452
  - node: Nested loop inner join (cost=62163 rows=1305) (actual time=13.7..205 rows=32038
      loops=1)
    actual_rows: 32038.0
    estimated_rows: 1305.0
    q_error: 24.550191570881225
  - node: Nested loop inner join (cost=52900 rows=113) (actual time=13.4..173 rows=124
      loops=1)
    actual_rows: 124.0
    estimated_rows: 113.0
    q_error: 1.0973451327433628
  - node: Nested loop inner join (cost=52157 rows=113) (actual time=13.4..173 rows=124
      loops=1)
    actual_rows: 124.0
    estimated_rows: 113.0
    q_error: 1.0973451327433628
  - node: Nested loop inner join (cost=48614 rows=539) (actual time=3.02..170 rows=1398
      loops=1)
    actual_rows: 1398.0
    estimated_rows: 539.0
    q_error: 2.593692022263451
  - node: Nested loop inner join (cost=44789 rows=34.8) (actual time=2.97..158 rows=32
      loops=1)
    actual_rows: 32.0
    estimated_rows: 34.8
    q_error: 1.0875
  - node: Nested loop inner join (cost=42316 rows=348) (actual time=0.771..158 rows=197
      loops=1)
    actual_rows: 197.0
    estimated_rows: 348.0
    q_error: 1.766497461928934
  - node: Nested loop inner join (cost=34897 rows=322) (actual time=0.6..146 rows=2396
      loops=1)
    actual_rows: 2396.0
    estimated_rows: 322.0
    q_error: 7.440993788819876
  - node: Inner hash join (cc.status_id = cct2.id), (cc.subject_id = cct1.id) (cost=574
      rows=4834) (actual time=0.578..44.5 rows=85941 loops=1)
    actual_rows: 85941.0
    estimated_rows: 4834.0
    q_error: 17.778444352503104
  - node: 'Filter: (cc.movie_id is not null) (cost=13624 rows=135359) (actual time=0.532..29.3
      rows=135086 loops=1)'
    actual_rows: 135086.0
    estimated_rows: 135359.0
    q_error: 1.0020209348118976
  - node: Table scan on cc (cost=13624 rows=135359) (actual time=0.531..23.1 rows=135086
      loops=1)
    actual_rows: 135086.0
    estimated_rows: 135359.0
    q_error: 1.0020209348118976
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: Inner hash join (no condition) (cost=2.18 rows=0.0357) (actual time=0.0394..0.0412
      rows=2 loops=1)
    actual_rows: 2.0
    estimated_rows: 0.0357
    q_error: 56.02240896358543
  - node: "Filter: (kt.kind = 'movie') (cost=0.951 rows=1) (actual time=0.0039..0.0053
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on kt (cost=0.951 rows=7) (actual time=0.0038..0.005 rows=7 loops=1)
    actual_rows: 7.0
    estimated_rows: 7.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: Inner hash join (no condition) (cost=1.3 rows=0.25) (actual time=0.0308..0.032
      rows=2 loops=1)
    actual_rows: 2.0
    estimated_rows: 0.25
    q_error: 8.0
  - node: "Filter: (cct2.kind like '%complete%') (cost=0.65 rows=1) (actual time=0.0042..0.005
      rows=2 loops=1)"
    actual_rows: 2.0
    estimated_rows: 1.0
    q_error: 2.0
  - node: Table scan on cct2 (cost=0.65 rows=4) (actual time=0.0018..0.0024 rows=4
      loops=1)
    actual_rows: 4.0
    estimated_rows: 4.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: "Filter: (cct1.kind = 'cast') (cost=0.65 rows=1) (actual time=0.0153..0.0187
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on cct1 (cost=0.65 rows=4) (actual time=0.0133..0.0164 rows=4
      loops=1)
    actual_rows: 4.0
    estimated_rows: 4.0
    q_error: 1.0
  - node: 'Filter: ((t.kind_id = kt.id) and (t.production_year > 2005)) (cost=0.25
      rows=0.0667) (actual time=0.00111..0.00111 rows=0.0279 loops=85941)'
    actual_rows: 0.0279
    estimated_rows: 0.0667
    q_error: 2.390681003584229
  - node: Single-row index lookup on t using PRIMARY (id=cc.movie_id) (cost=0.25 rows=1)
      (actual time=970e-6..987e-6 rows=1 loops=85941)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (mi_idx.info > '8.0') (cost=0.811 rows=1.08) (actual time=0.00488..0.00503
      rows=0.0822 loops=2396)"
    actual_rows: 0.0822
    estimated_rows: 1.08
    q_error: 13.138686131386862
  - node: Index lookup on mi_idx using movie_id_movie_info_idx (movie_id=cc.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00283..0.00477 rows=2.35 loops=2396)
    actual_rows: 2.35
    estimated_rows: 3.24
    q_error: 1.3787234042553191
  - node: "Filter: (it2.info = 'rating') (cost=0.25 rows=0.1) (actual time=0.00101..0.00102
      rows=0.162 loops=197)"
    actual_rows: 0.162
    estimated_rows: 0.1
    q_error: 1.6199999999999999
  - node: Single-row index lookup on it2 using PRIMARY (id=mi_idx.info_type_id) (cost=0.25
      rows=1) (actual time=756e-6..772e-6 rows=1 loops=197)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: 'Filter: (ci.person_role_id is not null) (cost=3.87 rows=15.5) (actual time=0.043..0.353
      rows=43.7 loops=32)'
    actual_rows: 43.7
    estimated_rows: 15.5
    q_error: 2.8193548387096774
  - node: Index lookup on ci using movie_id_cast_info (movie_id=cc.movie_id) (cost=3.87
      rows=15.5) (actual time=0.0427..0.346 rows=132 loops=32)
    actual_rows: 132.0
    estimated_rows: 15.5
    q_error: 8.516129032258064
  - node: "Filter: ((chn.`name` like '%man%') or (chn.`name` like '%Man%')) (cost=0.231
      rows=0.21) (actual time=0.00222..0.00222 rows=0.0887 loops=1398)"
    actual_rows: 0.0887
    estimated_rows: 0.21
    q_error: 2.367531003382187
  - node: Single-row index lookup on chn using PRIMARY (id=ci.person_role_id) (cost=0.231
      rows=1) (actual time=0.00177..0.00179 rows=1 loops=1398)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Single-row covering index lookup on n using PRIMARY (id=ci.person_id) (cost=0.231
      rows=1) (actual time=0.00221..0.00224 rows=1 loops=124)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mk using movie_id_movie_keyword (movie_id=cc.movie_id) (cost=2.89
      rows=11.5) (actual time=0.0124..0.244 rows=258 loops=124)
    actual_rows: 258.0
    estimated_rows: 11.5
    q_error: 22.434782608695652
  - node: "Filter: (k.keyword in ('superhero','marvel-comics','based-on-comic','fight'))
      (cost=0.015 rows=0.4) (actual time=0.00185..0.00185 rows=0.0029 loops=32038)"
    actual_rows: 0.0029
    estimated_rows: 0.4
    q_error: 137.93103448275863
  - node: Single-row index lookup on k using PRIMARY (id=mk.keyword_id) (cost=0.015
      rows=1) (actual time=0.00163..0.00165 rows=1 loops=32038)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 26c\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(chn.name) AS character_name,\n       MIN(mi_idx.info) AS rating,\n\
    \       MIN(t.title) AS complete_hero_movie\nFROM complete_cast AS cc,\n     comp_cast_type
    AS cct1,\n     comp_cast_type AS cct2,\n     char_name AS chn,\n     cast_info
    AS ci,\n     info_type AS it2,\n     keyword AS k,\n     kind_type AS kt,\n  \
    \   movie_info_idx AS mi_idx,\n     movie_keyword AS mk,\n     name AS n,\n  \
    \   title AS t\nWHERE cct1.kind = 'cast'\n  AND cct2.kind LIKE '%complete%'\n\
    \  AND chn.name IS NOT NULL\n  AND (chn.name LIKE '%man%'\n       OR chn.name
    LIKE '%Man%')\n  AND it2.info = 'rating'\n  AND k.keyword IN ('superhero',\n \
    \                   'marvel-comics',\n                    'based-on-comic',\n\
    \                    'tv-special',\n                    'fight',\n           \
    \         'violence',\n                    'magnet',\n                    'web',\n\
    \                    'claw',\n                    'laser')\n  AND kt.kind = 'movie'\n\
    \  AND t.production_year > 2000\n  AND kt.id = t.kind_id\n  AND t.id = mk.movie_id\n\
    \  AND t.id = ci.movie_id\n  AND t.id = cc.movie_id\n  AND t.id = mi_idx.movie_id\n\
    \  AND mk.movie_id = ci.movie_id\n  AND mk.movie_id = cc.movie_id\n  AND mk.movie_id
    = mi_idx.movie_id\n  AND ci.movie_id = cc.movie_id\n  AND ci.movie_id = mi_idx.movie_id\n\
    \  AND cc.movie_id = mi_idx.movie_id\n  AND chn.id = ci.person_role_id\n  AND
    n.id = ci.person_id\n  AND k.id = mk.keyword_id\n  AND cct1.id = cc.subject_id\n\
    \  AND cct2.id = cc.status_id\n  AND it2.id = mi_idx.info_type_id"
  qep:
  - node: 'Aggregate: min(chn.`name`), min(mi_idx.info), min(t.title) (cost=94552
      rows=1) (actual time=5059..5059 rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=94356 rows=1957) (actual time=2.47..5056 rows=5403
      loops=1)
    actual_rows: 5403.0
    estimated_rows: 1957.0
    q_error: 2.7608584568216656
  - node: Nested loop inner join (cost=93418 rows=3914) (actual time=1.95..2771 rows=1.15e+6
      loops=1)
    actual_rows: 1150000.0
    estimated_rows: 3914.0
    q_error: 293.8170669391926
  - node: Nested loop inner join (cost=65628 rows=339) (actual time=1.93..1578 rows=10460
      loops=1)
    actual_rows: 10460.0
    estimated_rows: 339.0
    q_error: 30.855457227138643
  - node: Nested loop inner join (cost=64862 rows=339) (actual time=1.92..1552 rows=10460
      loops=1)
    actual_rows: 10460.0
    estimated_rows: 339.0
    q_error: 30.855457227138643
  - node: Nested loop inner join (cost=61211 rows=1616) (actual time=0.663..1162 rows=165397
      loops=1)
    actual_rows: 165397.0
    estimated_rows: 1616.0
    q_error: 102.3496287128713
  - node: Nested loop inner join (cost=49735 rows=104) (actual time=0.63..245 rows=4028
      loops=1)
    actual_rows: 4028.0
    estimated_rows: 104.0
    q_error: 38.73076923076923
  - node: Nested loop inner join (cost=42316 rows=1045) (actual time=0.621..230 rows=12132
      loops=1)
    actual_rows: 12132.0
    estimated_rows: 1045.0
    q_error: 11.60956937799043
  - node: Nested loop inner join (cost=34897 rows=322) (actual time=0.606..194 rows=4696
      loops=1)
    actual_rows: 4696.0
    estimated_rows: 322.0
    q_error: 14.583850931677018
  - node: Inner hash join (cc.status_id = cct2.id), (cc.subject_id = cct1.id) (cost=574
      rows=4834) (actual time=0.585..60.9 rows=85941 loops=1)
    actual_rows: 85941.0
    estimated_rows: 4834.0
    q_error: 17.778444352503104
  - node: 'Filter: (cc.movie_id is not null) (cost=13624 rows=135359) (actual time=0.54..40.1
      rows=135086 loops=1)'
    actual_rows: 135086.0
    estimated_rows: 135359.0
    q_error: 1.0020209348118976
  - node: Table scan on cc (cost=13624 rows=135359) (actual time=0.54..32.1 rows=135086
      loops=1)
    actual_rows: 135086.0
    estimated_rows: 135359.0
    q_error: 1.0020209348118976
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: Inner hash join (no condition) (cost=2.18 rows=0.0357) (actual time=0.0382..0.0401
      rows=2 loops=1)
    actual_rows: 2.0
    estimated_rows: 0.0357
    q_error: 56.02240896358543
  - node: "Filter: (kt.kind = 'movie') (cost=0.951 rows=1) (actual time=0.0038..0.0054
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on kt (cost=0.951 rows=7) (actual time=0.0036..0.005 rows=7 loops=1)
    actual_rows: 7.0
    estimated_rows: 7.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: Inner hash join (no condition) (cost=1.3 rows=0.25) (actual time=0.0296..0.0308
      rows=2 loops=1)
    actual_rows: 2.0
    estimated_rows: 0.25
    q_error: 8.0
  - node: "Filter: (cct2.kind like '%complete%') (cost=0.65 rows=1) (actual time=0.0039..0.0047
      rows=2 loops=1)"
    actual_rows: 2.0
    estimated_rows: 1.0
    q_error: 2.0
  - node: Table scan on cct2 (cost=0.65 rows=4) (actual time=0.002..0.0028 rows=4
      loops=1)
    actual_rows: 4.0
    estimated_rows: 4.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: "Filter: (cct1.kind = 'cast') (cost=0.65 rows=1) (actual time=0.0144..0.018
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on cct1 (cost=0.65 rows=4) (actual time=0.0127..0.0159 rows=4
      loops=1)
    actual_rows: 4.0
    estimated_rows: 4.0
    q_error: 1.0
  - node: 'Filter: ((t.kind_id = kt.id) and (t.production_year > 2000)) (cost=0.25
      rows=0.0667) (actual time=0.00146..0.00146 rows=0.0546 loops=85941)'
    actual_rows: 0.0546
    estimated_rows: 0.0667
    q_error: 1.2216117216117215
  - node: Single-row index lookup on t using PRIMARY (id=cc.movie_id) (cost=0.25 rows=1)
      (actual time=0.00126..0.00128 rows=1 loops=85941)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mi_idx using movie_id_movie_info_idx (movie_id=cc.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00442..0.00748 rows=2.58 loops=4696)
    actual_rows: 2.58
    estimated_rows: 3.24
    q_error: 1.255813953488372
  - node: "Filter: (it2.info = 'rating') (cost=0.25 rows=0.1) (actual time=0.00109..0.00112
      rows=0.332 loops=12132)"
    actual_rows: 0.332
    estimated_rows: 0.1
    q_error: 3.32
  - node: Single-row index lookup on it2 using PRIMARY (id=mi_idx.info_type_id) (cost=0.25
      rows=1) (actual time=842e-6..864e-6 rows=1 loops=12132)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: 'Filter: (ci.person_role_id is not null) (cost=3.87 rows=15.5) (actual time=0.0398..0.225
      rows=41.1 loops=4028)'
    actual_rows: 41.1
    estimated_rows: 15.5
    q_error: 2.6516129032258067
  - node: Index lookup on ci using movie_id_cast_info (movie_id=cc.movie_id) (cost=3.87
      rows=15.5) (actual time=0.0396..0.221 rows=95.8 loops=4028)
    actual_rows: 95.8
    estimated_rows: 15.5
    q_error: 6.180645161290323
  - node: "Filter: ((chn.`name` like '%man%') or (chn.`name` like '%Man%')) (cost=0.0771
      rows=0.21) (actual time=0.00227..0.00227 rows=0.0632 loops=165397)"
    actual_rows: 0.0632
    estimated_rows: 0.21
    q_error: 3.322784810126582
  - node: Single-row index lookup on chn using PRIMARY (id=ci.person_role_id) (cost=0.0771
      rows=1) (actual time=0.00182..0.00185 rows=1 loops=165397)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Single-row covering index lookup on n using PRIMARY (id=ci.person_id) (cost=0.0771
      rows=1) (actual time=0.00229..0.00232 rows=1 loops=10460)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mk using movie_id_movie_keyword (movie_id=cc.movie_id) (cost=2.89
      rows=11.5) (actual time=0.0122..0.109 rows=110 loops=10460)
    actual_rows: 110.0
    estimated_rows: 11.5
    q_error: 9.565217391304348
  - node: "Filter: (k.keyword in ('superhero','marvel-comics','based-on-comic','tv-special','fight','violence','magnet','web','claw','laser'))
      (cost=0.00498 rows=0.5) (actual time=0.00191..0.00191 rows=0.00471 loops=1.15e+6)"
    actual_rows: 0.00471
    estimated_rows: 0.5
    q_error: 106.15711252653928
  - node: Single-row index lookup on k using PRIMARY (id=mk.keyword_id) (cost=0.00498
      rows=1) (actual time=0.00163..0.00165 rows=1 loops=1.15e+6)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 27a\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(cn.name) AS producing_company,\n       MIN(lt.link) AS link_type,\n\
    \       MIN(t.title) AS complete_western_sequel\nFROM complete_cast AS cc,\n \
    \    comp_cast_type AS cct1,\n     comp_cast_type AS cct2,\n     company_name
    AS cn,\n     company_type AS ct,\n     keyword AS k,\n     link_type AS lt,\n\
    \     movie_companies AS mc,\n     movie_info AS mi,\n     movie_keyword AS mk,\n\
    \     movie_link AS ml,\n     title AS t\nWHERE cct1.kind IN ('cast',\n      \
    \              'crew')\n  AND cct2.kind = 'complete'\n  AND cn.country_code !='[pl]'\n\
    \  AND (cn.name LIKE '%Film%'\n       OR cn.name LIKE '%Warner%')\n  AND ct.kind
    ='production companies'\n  AND k.keyword ='sequel'\n  AND lt.link LIKE '%follow%'\n\
    \  AND mc.note IS NULL\n  AND mi.info IN ('Sweden',\n                  'Germany',\n\
    \                  'Swedish',\n                  'German')\n  AND t.production_year
    BETWEEN 1950 AND 2000\n  AND lt.id = ml.link_type_id\n  AND ml.movie_id = t.id\n\
    \  AND t.id = mk.movie_id\n  AND mk.keyword_id = k.id\n  AND t.id = mc.movie_id\n\
    \  AND mc.company_type_id = ct.id\n  AND mc.company_id = cn.id\n  AND mi.movie_id
    = t.id\n  AND t.id = cc.movie_id\n  AND cct1.id = cc.subject_id\n  AND cct2.id
    = cc.status_id\n  AND ml.movie_id = mk.movie_id\n  AND ml.movie_id = mc.movie_id\n\
    \  AND mk.movie_id = mc.movie_id\n  AND ml.movie_id = mi.movie_id\n  AND mk.movie_id
    = mi.movie_id\n  AND mc.movie_id = mi.movie_id\n  AND ml.movie_id = cc.movie_id\n\
    \  AND mk.movie_id = cc.movie_id\n  AND mc.movie_id = cc.movie_id\n  AND mi.movie_id
    = cc.movie_id"
  qep:
  - node: 'Aggregate: min(cn.`name`), min(lt.link), min(t.title) (cost=1732 rows=1)
      (actual time=23.9..23.9 rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=1732 rows=0.58) (actual time=15.7..23.7 rows=477
      loops=1)
    actual_rows: 477.0
    estimated_rows: 0.58
    q_error: 822.4137931034484
  - node: Nested loop inner join (cost=1680 rows=0.27) (actual time=15.7..21 rows=172
      loops=1)
    actual_rows: 172.0
    estimated_rows: 0.27
    q_error: 637.037037037037
  - node: Nested loop inner join (cost=1605 rows=2.7) (actual time=15.7..18.1 rows=3278
      loops=1)
    actual_rows: 3278.0
    estimated_rows: 2.7
    q_error: 1214.074074074074
  - node: Inner hash join (cct1.id = cc.subject_id) (cost=1508 rows=0.234) (actual
      time=15.7..15.7 rows=269 loops=1)
    actual_rows: 269.0
    estimated_rows: 0.234
    q_error: 1149.5726495726494
  - node: "Filter: (cct1.kind in ('cast','crew')) (cost=0.0185 rows=1) (actual time=0.0097..0.0142
      rows=2 loops=1)"
    actual_rows: 2.0
    estimated_rows: 1.0
    q_error: 2.0
  - node: Table scan on cct1 (cost=0.0185 rows=4) (actual time=0.0078..0.011 rows=4
      loops=1)
    actual_rows: 4.0
    estimated_rows: 4.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: Nested loop inner join (cost=1507 rows=0.935) (actual time=0.657..15.5 rows=269
      loops=1)
    actual_rows: 269.0
    estimated_rows: 0.935
    q_error: 287.7005347593583
  - node: Nested loop inner join (cost=1499 rows=0.717) (actual time=0.647..13.4 rows=699
      loops=1)
    actual_rows: 699.0
    estimated_rows: 0.717
    q_error: 974.8953974895397
  - node: Nested loop inner join (cost=1464 rows=3.8) (actual time=0.332..10.4 rows=2794
      loops=1)
    actual_rows: 2794.0
    estimated_rows: 3.8
    q_error: 735.2631578947369
  - node: Nested loop inner join (cost=1118 rows=11.7) (actual time=0.306..3.84 rows=1332
      loops=1)
    actual_rows: 1332.0
    estimated_rows: 11.7
    q_error: 113.84615384615385
  - node: Nested loop inner join (cost=159 rows=105) (actual time=0.282..2.3 rows=2315
      loops=1)
    actual_rows: 2315.0
    estimated_rows: 105.0
    q_error: 22.047619047619047
  - node: Inner hash join (no condition) (cost=3.2 rows=0.0555) (actual time=0.048..0.0585
      rows=2 loops=1)
    actual_rows: 2.0
    estimated_rows: 0.0555
    q_error: 36.03603603603604
  - node: "Filter: (lt.link like '%follow%') (cost=2.05 rows=2) (actual time=0.0064..0.0152
      rows=2 loops=1)"
    actual_rows: 2.0
    estimated_rows: 2.0
    q_error: 1.0
  - node: Table scan on lt (cost=2.05 rows=18) (actual time=0.0046..0.0109 rows=18
      loops=1)
    actual_rows: 18.0
    estimated_rows: 18.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: Inner hash join (no condition) (cost=1.3 rows=0.25) (actual time=0.0365..0.0377
      rows=1 loops=1)
    actual_rows: 1.0
    estimated_rows: 0.25
    q_error: 4.0
  - node: "Filter: (ct.kind = 'production companies') (cost=0.65 rows=1) (actual time=0.0055..0.0064
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on ct (cost=0.65 rows=4) (actual time=0.0049..0.0058 rows=4 loops=1)
    actual_rows: 4.0
    estimated_rows: 4.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: "Filter: (cct2.kind = 'complete') (cost=0.65 rows=1) (actual time=0.0204..0.0231
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on cct2 (cost=0.65 rows=4) (actual time=0.0176..0.0208 rows=4
      loops=1)
    actual_rows: 4.0
    estimated_rows: 4.0
    q_error: 1.0
  - node: Index lookup on ml using link_type_id_movie_link (link_type_id=lt.id) (cost=168
      rows=1898) (actual time=0.212..1.08 rows=1158 loops=2)
    actual_rows: 1158.0
    estimated_rows: 1898.0
    q_error: 1.6390328151986182
  - node: 'Filter: (t.production_year between 1950 and 2000) (cost=0.25 rows=0.111)
      (actual time=560e-6..591e-6 rows=0.575 loops=2315)'
    actual_rows: 0.575
    estimated_rows: 0.111
    q_error: 5.18018018018018
  - node: Single-row index lookup on t using PRIMARY (id=ml.movie_id) (cost=0.25 rows=1)
      (actual time=462e-6..479e-6 rows=1 loops=2315)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: 'Filter: ((mc.company_type_id = ct.id) and (mc.note is null)) (cost=0.811
      rows=0.324) (actual time=0.00341..0.00483 rows=2.1 loops=1332)'
    actual_rows: 2.1
    estimated_rows: 0.324
    q_error: 6.481481481481482
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=ml.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00164..0.00451 rows=4.13 loops=1332)
    actual_rows: 4.13
    estimated_rows: 3.24
    q_error: 1.2746913580246912
  - node: "Filter: ((cn.country_code <> '[pl]') and ((cn.`name` like '%Film%') or
      (cn.`name` like '%Warner%'))) (cost=0.25 rows=0.189) (actual time=956e-6..969e-6
      rows=0.25 loops=2794)"
    actual_rows: 0.25
    estimated_rows: 0.189
    q_error: 1.3227513227513228
  - node: Single-row index lookup on cn using PRIMARY (id=mc.company_id) (cost=0.25
      rows=1) (actual time=617e-6..633e-6 rows=1 loops=2794)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: 'Filter: (cc.status_id = cct2.id) (cost=0.331 rows=1.3) (actual time=0.00286..0.00302
      rows=0.385 loops=699)'
    actual_rows: 0.385
    estimated_rows: 1.3
    q_error: 3.376623376623377
  - node: Index lookup on cc using movie_id_complete_cast (movie_id=ml.movie_id) (cost=0.331
      rows=1.3) (actual time=0.00278..0.00293 rows=0.476 loops=699)
    actual_rows: 0.476
    estimated_rows: 1.3
    q_error: 2.73109243697479
  - node: Index lookup on mk using movie_id_movie_keyword (movie_id=ml.movie_id) (cost=2.92
      rows=11.5) (actual time=0.00513..0.00841 rows=12.2 loops=269)
    actual_rows: 12.2
    estimated_rows: 11.5
    q_error: 1.0608695652173912
  - node: "Filter: (k.keyword = 'sequel') (cost=0.192 rows=0.1) (actual time=820e-6..823e-6
      rows=0.0525 loops=3278)"
    actual_rows: 0.0525
    estimated_rows: 0.1
    q_error: 1.9047619047619049
  - node: Single-row index lookup on k using PRIMARY (id=mk.keyword_id) (cost=0.192
      rows=1) (actual time=694e-6..708e-6 rows=1 loops=3278)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (mi.info in ('Sweden','Germany','Swedish','German')) (cost=1.35
      rows=2.15) (actual time=0.00578..0.0154 rows=2.77 loops=172)"
    actual_rows: 2.77
    estimated_rows: 2.15
    q_error: 1.2883720930232558
  - node: Index lookup on mi using movie_id_movie_info (movie_id=ml.movie_id) (cost=1.35
      rows=5.37) (actual time=994e-6..0.0131 rows=19.4 loops=172)
    actual_rows: 19.4
    estimated_rows: 5.37
    q_error: 3.6126629422718803

- query: "-- JOB Query 27b\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(cn.name) AS producing_company,\n       MIN(lt.link) AS link_type,\n\
    \       MIN(t.title) AS complete_western_sequel\nFROM complete_cast AS cc,\n \
    \    comp_cast_type AS cct1,\n     comp_cast_type AS cct2,\n     company_name
    AS cn,\n     company_type AS ct,\n     keyword AS k,\n     link_type AS lt,\n\
    \     movie_companies AS mc,\n     movie_info AS mi,\n     movie_keyword AS mk,\n\
    \     movie_link AS ml,\n     title AS t\nWHERE cct1.kind IN ('cast',\n      \
    \              'crew')\n  AND cct2.kind = 'complete'\n  AND cn.country_code !='[pl]'\n\
    \  AND (cn.name LIKE '%Film%'\n       OR cn.name LIKE '%Warner%')\n  AND ct.kind
    ='production companies'\n  AND k.keyword ='sequel'\n  AND lt.link LIKE '%follow%'\n\
    \  AND mc.note IS NULL\n  AND mi.info IN ('Sweden',\n                  'Germany',\n\
    \                  'Swedish',\n                  'German')\n  AND t.production_year
    = 1998\n  AND lt.id = ml.link_type_id\n  AND ml.movie_id = t.id\n  AND t.id =
    mk.movie_id\n  AND mk.keyword_id = k.id\n  AND t.id = mc.movie_id\n  AND mc.company_type_id
    = ct.id\n  AND mc.company_id = cn.id\n  AND mi.movie_id = t.id\n  AND t.id = cc.movie_id\n\
    \  AND cct1.id = cc.subject_id\n  AND cct2.id = cc.status_id\n  AND ml.movie_id
    = mk.movie_id\n  AND ml.movie_id = mc.movie_id\n  AND mk.movie_id = mc.movie_id\n\
    \  AND ml.movie_id = mi.movie_id\n  AND mk.movie_id = mi.movie_id\n  AND mc.movie_id
    = mi.movie_id\n  AND ml.movie_id = cc.movie_id\n  AND mk.movie_id = cc.movie_id\n\
    \  AND mc.movie_id = cc.movie_id\n  AND mi.movie_id = cc.movie_id"
  qep:
  - node: 'Aggregate: min(cn.`name`), min(lt.link), min(t.title) (cost=1671 rows=1)
      (actual time=7.45..7.45 rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=1671 rows=0.522) (actual time=5.27..7.36 rows=247
      loops=1)
    actual_rows: 247.0
    estimated_rows: 0.522
    q_error: 473.1800766283525
  - node: Nested loop inner join (cost=1624 rows=0.243) (actual time=5.26..6.38 rows=95
      loops=1)
    actual_rows: 95.0
    estimated_rows: 0.243
    q_error: 390.9465020576132
  - node: Nested loop inner join (cost=1557 rows=2.43) (actual time=5.24..5.78 rows=703
      loops=1)
    actual_rows: 703.0
    estimated_rows: 2.43
    q_error: 289.30041152263374
  - node: Inner hash join (cct1.id = cc.subject_id) (cost=1469 rows=0.21) (actual
      time=5.23..5.25 rows=95 loops=1)
    actual_rows: 95.0
    estimated_rows: 0.21
    q_error: 452.3809523809524
  - node: "Filter: (cct1.kind in ('cast','crew')) (cost=0.0204 rows=1) (actual time=0.0054..0.0069
      rows=2 loops=1)"
    actual_rows: 2.0
    estimated_rows: 1.0
    q_error: 2.0
  - node: Table scan on cct1 (cost=0.0204 rows=4) (actual time=0.004..0.0048 rows=4
      loops=1)
    actual_rows: 4.0
    estimated_rows: 4.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: Nested loop inner join (cost=1468 rows=0.842) (actual time=1.98..5.18 rows=95
      loops=1)
    actual_rows: 95.0
    estimated_rows: 0.842
    q_error: 112.82660332541568
  - node: Nested loop inner join (cost=1461 rows=0.646) (actual time=0.412..4.73 rows=274
      loops=1)
    actual_rows: 274.0
    estimated_rows: 0.646
    q_error: 424.1486068111455
  - node: Nested loop inner join (cost=1430 rows=3.42) (actual time=0.406..4.2 rows=547
      loops=1)
    actual_rows: 547.0
    estimated_rows: 3.42
    q_error: 159.94152046783626
  - node: Nested loop inner join (cost=1118 rows=10.5) (actual time=0.39..3.34 rows=141
      loops=1)
    actual_rows: 141.0
    estimated_rows: 10.5
    q_error: 13.428571428571429
  - node: Nested loop inner join (cost=159 rows=105) (actual time=0.263..2.12 rows=2315
      loops=1)
    actual_rows: 2315.0
    estimated_rows: 105.0
    q_error: 22.047619047619047
  - node: Inner hash join (no condition) (cost=3.2 rows=0.0555) (actual time=0.0479..0.0554
      rows=2 loops=1)
    actual_rows: 2.0
    estimated_rows: 0.0555
    q_error: 36.03603603603604
  - node: "Filter: (lt.link like '%follow%') (cost=2.05 rows=2) (actual time=0.0062..0.0125
      rows=2 loops=1)"
    actual_rows: 2.0
    estimated_rows: 2.0
    q_error: 1.0
  - node: Table scan on lt (cost=2.05 rows=18) (actual time=0.0043..0.0085 rows=18
      loops=1)
    actual_rows: 18.0
    estimated_rows: 18.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: Inner hash join (no condition) (cost=1.3 rows=0.25) (actual time=0.0366..0.0377
      rows=1 loops=1)
    actual_rows: 1.0
    estimated_rows: 0.25
    q_error: 4.0
  - node: "Filter: (ct.kind = 'production companies') (cost=0.65 rows=1) (actual time=0.0047..0.0055
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on ct (cost=0.65 rows=4) (actual time=0.0043..0.005 rows=4 loops=1)
    actual_rows: 4.0
    estimated_rows: 4.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: "Filter: (cct2.kind = 'complete') (cost=0.65 rows=1) (actual time=0.0211..0.0239
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on cct2 (cost=0.65 rows=4) (actual time=0.0179..0.022 rows=4
      loops=1)
    actual_rows: 4.0
    estimated_rows: 4.0
    q_error: 1.0
  - node: Index lookup on ml using link_type_id_movie_link (link_type_id=lt.id) (cost=168
      rows=1898) (actual time=0.2..0.99 rows=1158 loops=2)
    actual_rows: 1158.0
    estimated_rows: 1898.0
    q_error: 1.6390328151986182
  - node: 'Filter: (t.production_year = 1998) (cost=0.25 rows=0.1) (actual time=471e-6..474e-6
      rows=0.0609 loops=2315)'
    actual_rows: 0.0609
    estimated_rows: 0.1
    q_error: 1.6420361247947455
  - node: Single-row index lookup on t using PRIMARY (id=ml.movie_id) (cost=0.25 rows=1)
      (actual time=360e-6..375e-6 rows=1 loops=2315)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: 'Filter: ((mc.company_type_id = ct.id) and (mc.note is null)) (cost=0.811
      rows=0.324) (actual time=0.00323..0.0059 rows=3.88 loops=141)'
    actual_rows: 3.88
    estimated_rows: 0.324
    q_error: 11.975308641975309
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=ml.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00233..0.00552 rows=4.91 loops=141)
    actual_rows: 4.91
    estimated_rows: 3.24
    q_error: 1.515432098765432
  - node: "Filter: ((cn.country_code <> '[pl]') and ((cn.`name` like '%Film%') or
      (cn.`name` like '%Warner%'))) (cost=0.25 rows=0.189) (actual time=864e-6..884e-6
      rows=0.501 loops=547)"
    actual_rows: 0.501
    estimated_rows: 0.189
    q_error: 2.6507936507936507
  - node: Single-row index lookup on cn using PRIMARY (id=mc.company_id) (cost=0.25
      rows=1) (actual time=613e-6..628e-6 rows=1 loops=547)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: 'Filter: (cc.status_id = cct2.id) (cost=0.332 rows=1.3) (actual time=0.00146..0.00157
      rows=0.347 loops=274)'
    actual_rows: 0.347
    estimated_rows: 1.3
    q_error: 3.746397694524496
  - node: Index lookup on cc using movie_id_complete_cast (movie_id=ml.movie_id) (cost=0.332
      rows=1.3) (actual time=0.00136..0.00148 rows=0.555 loops=274)
    actual_rows: 0.555
    estimated_rows: 1.3
    q_error: 2.3423423423423424
  - node: Index lookup on mk using movie_id_movie_keyword (movie_id=ml.movie_id) (cost=2.92
      rows=11.5) (actual time=0.00445..0.00532 rows=7.4 loops=95)
    actual_rows: 7.4
    estimated_rows: 11.5
    q_error: 1.554054054054054
  - node: "Filter: (k.keyword = 'sequel') (cost=0.192 rows=0.1) (actual time=773e-6..780e-6
      rows=0.135 loops=703)"
    actual_rows: 0.135
    estimated_rows: 0.1
    q_error: 1.35
  - node: Single-row index lookup on k using PRIMARY (id=mk.keyword_id) (cost=0.192
      rows=1) (actual time=643e-6..659e-6 rows=1 loops=703)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (mi.info in ('Sweden','Germany','Swedish','German')) (cost=1.35
      rows=2.15) (actual time=0.00421..0.0102 rows=2.6 loops=95)"
    actual_rows: 2.6
    estimated_rows: 2.15
    q_error: 1.2093023255813955
  - node: Index lookup on mi using movie_id_movie_info (movie_id=ml.movie_id) (cost=1.35
      rows=5.37) (actual time=946e-6..0.00852 rows=12.6 loops=95)
    actual_rows: 12.6
    estimated_rows: 5.37
    q_error: 2.346368715083799

- query: "-- JOB Query 27c\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(cn.name) AS producing_company,\n       MIN(lt.link) AS link_type,\n\
    \       MIN(t.title) AS complete_western_sequel\nFROM complete_cast AS cc,\n \
    \    comp_cast_type AS cct1,\n     comp_cast_type AS cct2,\n     company_name
    AS cn,\n     company_type AS ct,\n     keyword AS k,\n     link_type AS lt,\n\
    \     movie_companies AS mc,\n     movie_info AS mi,\n     movie_keyword AS mk,\n\
    \     movie_link AS ml,\n     title AS t\nWHERE cct1.kind = 'cast'\n  AND cct2.kind
    LIKE 'complete%'\n  AND cn.country_code !='[pl]'\n  AND (cn.name LIKE '%Film%'\n\
    \       OR cn.name LIKE '%Warner%')\n  AND ct.kind ='production companies'\n \
    \ AND k.keyword ='sequel'\n  AND lt.link LIKE '%follow%'\n  AND mc.note IS NULL\n\
    \  AND mi.info IN ('Sweden',\n                  'Norway',\n                  'Germany',\n\
    \                  'Denmark',\n                  'Swedish',\n                \
    \  'Denish',\n                  'Norwegian',\n                  'German',\n  \
    \                'English')\n  AND t.production_year BETWEEN 1950 AND 2010\n \
    \ AND lt.id = ml.link_type_id\n  AND ml.movie_id = t.id\n  AND t.id = mk.movie_id\n\
    \  AND mk.keyword_id = k.id\n  AND t.id = mc.movie_id\n  AND mc.company_type_id
    = ct.id\n  AND mc.company_id = cn.id\n  AND mi.movie_id = t.id\n  AND t.id = cc.movie_id\n\
    \  AND cct1.id = cc.subject_id\n  AND cct2.id = cc.status_id\n  AND ml.movie_id
    = mk.movie_id\n  AND ml.movie_id = mc.movie_id\n  AND mk.movie_id = mc.movie_id\n\
    \  AND ml.movie_id = mi.movie_id\n  AND mk.movie_id = mi.movie_id\n  AND mc.movie_id
    = mi.movie_id\n  AND ml.movie_id = cc.movie_id\n  AND mk.movie_id = cc.movie_id\n\
    \  AND mc.movie_id = cc.movie_id\n  AND mi.movie_id = cc.movie_id"
  qep:
  - node: 'Aggregate: min(cn.`name`), min(lt.link), min(t.title) (cost=1713 rows=1)
      (actual time=55.8..55.8 rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=1713 rows=0.725) (actual time=7.65..55.6 rows=743
      loops=1)
    actual_rows: 743.0
    estimated_rows: 0.725
    q_error: 1024.8275862068965
  - node: Nested loop inner join (cost=1661 rows=0.27) (actual time=7.63..52.5 rows=172
      loops=1)
    actual_rows: 172.0
    estimated_rows: 0.27
    q_error: 637.037037037037
  - node: Nested loop inner join (cost=1586 rows=2.7) (actual time=1.94..49.2 rows=3296
      loops=1)
    actual_rows: 3296.0
    estimated_rows: 2.7
    q_error: 1220.7407407407406
  - node: Nested loop inner join (cost=1489 rows=0.234) (actual time=1.92..46.6 rows=277
      loops=1)
    actual_rows: 277.0
    estimated_rows: 0.234
    q_error: 1183.7606837606836
  - node: Nested loop inner join (cost=1480 rows=0.179) (actual time=0.509..42.5 rows=2274
      loops=1)
    actual_rows: 2274.0
    estimated_rows: 0.179
    q_error: 12703.91061452514
  - node: Nested loop inner join (cost=1446 rows=0.95) (actual time=0.294..32.4 rows=8678
      loops=1)
    actual_rows: 8678.0
    estimated_rows: 0.95
    q_error: 9134.736842105263
  - node: Nested loop inner join (cost=1103 rows=2.93) (actual time=0.283..8.04 rows=4496
      loops=1)
    actual_rows: 4496.0
    estimated_rows: 2.93
    q_error: 1534.4709897610921
  - node: Nested loop inner join (cost=152 rows=26.3) (actual time=0.275..4.67 rows=4630
      loops=1)
    actual_rows: 4630.0
    estimated_rows: 26.3
    q_error: 176.04562737642584
  - node: Inner hash join (no condition) (cost=3.74 rows=0.0139) (actual time=0.0619..0.0786
      rows=4 loops=1)
    actual_rows: 4.0
    estimated_rows: 0.0139
    q_error: 287.7697841726619
  - node: "Filter: (lt.link like '%follow%') (cost=2.05 rows=2) (actual time=0.0049..0.0157
      rows=2 loops=1)"
    actual_rows: 2.0
    estimated_rows: 2.0
    q_error: 1.0
  - node: Table scan on lt (cost=2.05 rows=18) (actual time=0.0046..0.0123 rows=18
      loops=1)
    actual_rows: 18.0
    estimated_rows: 18.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: Inner hash join (no condition) (cost=1.88 rows=0.0625) (actual time=0.0494..0.0505
      rows=2 loops=1)
    actual_rows: 2.0
    estimated_rows: 0.0625
    q_error: 32.0
  - node: "Filter: (ct.kind = 'production companies') (cost=0.651 rows=1) (actual
      time=0.0043..0.0052 rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on ct (cost=0.651 rows=4) (actual time=0.0037..0.0046 rows=4
      loops=1)
    actual_rows: 4.0
    estimated_rows: 4.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: Inner hash join (no condition) (cost=1.3 rows=0.25) (actual time=0.0391..0.0403
      rows=2 loops=1)
    actual_rows: 2.0
    estimated_rows: 0.25
    q_error: 8.0
  - node: "Filter: (cct2.kind like 'complete%') (cost=0.65 rows=1) (actual time=0.0042..0.005
      rows=2 loops=1)"
    actual_rows: 2.0
    estimated_rows: 1.0
    q_error: 2.0
  - node: Table scan on cct2 (cost=0.65 rows=4) (actual time=0.0022..0.0028 rows=4
      loops=1)
    actual_rows: 4.0
    estimated_rows: 4.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: "Filter: (cct1.kind = 'cast') (cost=0.65 rows=1) (actual time=0.0208..0.0246
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on cct1 (cost=0.65 rows=4) (actual time=0.0188..0.022 rows=4
      loops=1)
    actual_rows: 4.0
    estimated_rows: 4.0
    q_error: 1.0
  - node: Index lookup on ml using link_type_id_movie_link (link_type_id=lt.id) (cost=168
      rows=1898) (actual time=0.219..1.1 rows=1158 loops=4)
    actual_rows: 1158.0
    estimated_rows: 1898.0
    q_error: 1.6390328151986182
  - node: 'Filter: (t.production_year between 1950 and 2010) (cost=0.25 rows=0.111)
      (actual time=575e-6..628e-6 rows=0.971 loops=4630)'
    actual_rows: 0.971
    estimated_rows: 0.111
    q_error: 8.747747747747747
  - node: Single-row index lookup on t using PRIMARY (id=ml.movie_id) (cost=0.25 rows=1)
      (actual time=475e-6..493e-6 rows=1 loops=4630)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: 'Filter: ((mc.company_type_id = ct.id) and (mc.note is null)) (cost=0.811
      rows=0.324) (actual time=0.00378..0.00527 rows=1.93 loops=4496)'
    actual_rows: 1.93
    estimated_rows: 0.324
    q_error: 5.9567901234567895
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=ml.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00158..0.00487 rows=4.4 loops=4496)
    actual_rows: 4.4
    estimated_rows: 3.24
    q_error: 1.3580246913580247
  - node: "Filter: ((cn.country_code <> '[pl]') and ((cn.`name` like '%Film%') or
      (cn.`name` like '%Warner%'))) (cost=0.25 rows=0.189) (actual time=0.00107..0.00108
      rows=0.262 loops=8678)"
    actual_rows: 0.262
    estimated_rows: 0.189
    q_error: 1.3862433862433863
  - node: Single-row index lookup on cn using PRIMARY (id=mc.company_id) (cost=0.25
      rows=1) (actual time=667e-6..685e-6 rows=1 loops=8678)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: 'Filter: ((cc.status_id = cct2.id) and (cc.subject_id = cct1.id)) (cost=0.331
      rows=1.3) (actual time=0.00168..0.00173 rows=0.122 loops=2274)'
    actual_rows: 0.122
    estimated_rows: 1.3
    q_error: 10.655737704918034
  - node: Index lookup on cc using movie_id_complete_cast (movie_id=ml.movie_id) (cost=0.331
      rows=1.3) (actual time=0.00154..0.00163 rows=0.296 loops=2274)
    actual_rows: 0.296
    estimated_rows: 1.3
    q_error: 4.391891891891892
  - node: Index lookup on mk using movie_id_movie_keyword (movie_id=ml.movie_id) (cost=2.92
      rows=11.5) (actual time=0.00547..0.00875 rows=11.9 loops=277)
    actual_rows: 11.9
    estimated_rows: 11.5
    q_error: 1.0347826086956522
  - node: "Filter: (k.keyword = 'sequel') (cost=0.192 rows=0.1) (actual time=923e-6..926e-6
      rows=0.0522 loops=3296)"
    actual_rows: 0.0522
    estimated_rows: 0.1
    q_error: 1.9157088122605364
  - node: Single-row index lookup on k using PRIMARY (id=mk.keyword_id) (cost=0.192
      rows=1) (actual time=789e-6..805e-6 rows=1 loops=3296)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (mi.info in ('Sweden','Norway','Germany','Denmark','Swedish','Denish','Norwegian','German','English'))
      (cost=1.35 rows=2.69) (actual time=0.00637..0.0178 rows=4.32 loops=172)"
    actual_rows: 4.32
    estimated_rows: 2.69
    q_error: 1.6059479553903346
  - node: Index lookup on mi using movie_id_movie_info (movie_id=ml.movie_id) (cost=1.35
      rows=5.37) (actual time=0.00128..0.0147 rows=19.4 loops=172)
    actual_rows: 19.4
    estimated_rows: 5.37
    q_error: 3.6126629422718803

- query: "-- JOB Query 28a\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(cn.name) AS movie_company,\n       MIN(mi_idx.info) AS rating,\n  \
    \     MIN(t.title) AS complete_euro_dark_movie\nFROM complete_cast AS cc,\n  \
    \   comp_cast_type AS cct1,\n     comp_cast_type AS cct2,\n     company_name AS
    cn,\n     company_type AS ct,\n     info_type AS it1,\n     info_type AS it2,\n\
    \     keyword AS k,\n     kind_type AS kt,\n     movie_companies AS mc,\n    \
    \ movie_info AS mi,\n     movie_info_idx AS mi_idx,\n     movie_keyword AS mk,\n\
    \     title AS t\nWHERE cct1.kind = 'crew'\n  AND cct2.kind != 'complete+verified'\n\
    \  AND cn.country_code != '[us]'\n  AND it1.info = 'countries'\n  AND it2.info
    = 'rating'\n  AND k.keyword IN ('murder',\n                    'murder-in-title',\n\
    \                    'blood',\n                    'violence')\n  AND kt.kind
    IN ('movie',\n                  'episode')\n  AND mc.note NOT LIKE '%(USA)%'\n\
    \  AND mc.note LIKE '%(200%)%'\n  AND mi.info IN ('Sweden',\n                \
    \  'Norway',\n                  'Germany',\n                  'Denmark',\n   \
    \               'Swedish',\n                  'Danish',\n                  'Norwegian',\n\
    \                  'German',\n                  'USA',\n                  'American')\n\
    \  AND mi_idx.info < '8.5'\n  AND t.production_year > 2000\n  AND kt.id = t.kind_id\n\
    \  AND t.id = mi.movie_id\n  AND t.id = mk.movie_id\n  AND t.id = mi_idx.movie_id\n\
    \  AND t.id = mc.movie_id\n  AND t.id = cc.movie_id\n  AND mk.movie_id = mi.movie_id\n\
    \  AND mk.movie_id = mi_idx.movie_id\n  AND mk.movie_id = mc.movie_id\n  AND mk.movie_id
    = cc.movie_id\n  AND mi.movie_id = mi_idx.movie_id\n  AND mi.movie_id = mc.movie_id\n\
    \  AND mi.movie_id = cc.movie_id\n  AND mc.movie_id = mi_idx.movie_id\n  AND mc.movie_id
    = cc.movie_id\n  AND mi_idx.movie_id = cc.movie_id\n  AND k.id = mk.keyword_id\n\
    \  AND it1.id = mi.info_type_id\n  AND it2.id = mi_idx.info_type_id\n  AND ct.id
    = mc.company_type_id\n  AND cn.id = mc.company_id\n  AND cct1.id = cc.subject_id\n\
    \  AND cct2.id = cc.status_id"
  qep:
  - node: 'Aggregate: min(cn.`name`), min(mi_idx.info), min(t.title) (cost=14726 rows=1)
      (actual time=9201..9201 rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=14725 rows=8.25) (actual time=2910..9198 rows=4803
      loops=1)
    actual_rows: 4803.0
    estimated_rows: 8.25
    q_error: 582.1818181818181
  - node: Nested loop inner join (cost=14659 rows=20.6) (actual time=2794..7929 rows=738406
      loops=1)
    actual_rows: 738406.0
    estimated_rows: 20.6
    q_error: 35844.95145631068
  - node: Nested loop inner join (cost=14477 rows=1.79) (actual time=2778..7195 rows=8650
      loops=1)
    actual_rows: 8650.0
    estimated_rows: 1.79
    q_error: 4832.402234636871
  - node: Nested loop inner join (cost=14467 rows=2.38) (actual time=2778..7188 rows=9701
      loops=1)
    actual_rows: 9701.0
    estimated_rows: 2.38
    q_error: 4076.0504201680674
  - node: Nested loop inner join (cost=14446 rows=1.83) (actual time=2774..6894 rows=69189
      loops=1)
    actual_rows: 69189.0
    estimated_rows: 1.83
    q_error: 37808.19672131148
  - node: Nested loop inner join (cost=14437 rows=2.03) (actual time=2774..6777 rows=76678
      loops=1)
    actual_rows: 76678.0
    estimated_rows: 2.03
    q_error: 37772.41379310345
  - node: Nested loop inner join (cost=14429 rows=2.03) (actual time=2774..6754 rows=76678
      loops=1)
    actual_rows: 76678.0
    estimated_rows: 2.03
    q_error: 37772.41379310345
  - node: Nested loop inner join (cost=14247 rows=6.34) (actual time=2771..6140 rows=68112
      loops=1)
    actual_rows: 68112.0
    estimated_rows: 6.34
    q_error: 10743.217665615142
  - node: Nested loop inner join (cost=13963 rows=63.4) (actual time=2771..5932 rows=203692
      loops=1)
    actual_rows: 203692.0
    estimated_rows: 63.4
    q_error: 3212.807570977918
  - node: Nested loop inner join (cost=12280 rows=58.6) (actual time=2769..5186 rows=216321
      loops=1)
    actual_rows: 216321.0
    estimated_rows: 58.6
    q_error: 3691.484641638225
  - node: Inner hash join (no condition) (cost=8343 rows=880) (actual time=2761..3621
      rows=1.23e+6 loops=1)
    actual_rows: 1230000.0
    estimated_rows: 880.0
    q_error: 1397.7272727272727
  - node: "Filter: (kt.kind in ('movie','episode')) (cost=0.00115 rows=2) (actual
      time=0.0284..0.0366 rows=2 loops=1)"
    actual_rows: 2.0
    estimated_rows: 2.0
    q_error: 1.0
  - node: Table scan on kt (cost=0.00115 rows=7) (actual time=0.0248..0.03 rows=7
      loops=1)
    actual_rows: 7.0
    estimated_rows: 7.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: Nested loop inner join (cost=8018 rows=1540) (actual time=0.0617..2120 rows=614251
      loops=1)
    actual_rows: 614251.0
    estimated_rows: 1540.0
    q_error: 398.8642857142857
  - node: Inner hash join (no condition) (cost=12.2 rows=1.13) (actual time=0.0367..0.0624
      rows=1 loops=1)
    actual_rows: 1.0
    estimated_rows: 1.13
    q_error: 1.13
  - node: "Filter: (it1.info = 'countries') (cost=11.6 rows=11.3) (actual time=0.0085..0.0332
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 11.3
    q_error: 11.3
  - node: Table scan on it1 (cost=11.6 rows=113) (actual time=0.0069..0.0267 rows=113
      loops=1)
    actual_rows: 113.0
    estimated_rows: 113.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: "Filter: (cct1.kind = 'crew') (cost=0.65 rows=1) (actual time=0.0187..0.0214
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on cct1 (cost=0.65 rows=4) (actual time=0.016..0.0192 rows=4
      loops=1)
    actual_rows: 4.0
    estimated_rows: 4.0
    q_error: 1.0
  - node: "Filter: (mi.info in ('Sweden','Norway','Germany','Denmark','Swedish','Danish','Norwegian','German','USA','American'))
      (cost=693 rows=1362) (actual time=0.0244..2092 rows=614251 loops=1)"
    actual_rows: 614251.0
    estimated_rows: 1362.0
    q_error: 450.99192364170335
  - node: Index lookup on mi using info_type_id_movie_info (info_type_id=it1.id) (cost=693
      rows=2725) (actual time=0.0216..1857 rows=1.33e+6 loops=1)
    actual_rows: 1330000.0
    estimated_rows: 2725.0
    q_error: 488.07339449541286
  - node: 'Filter: ((t.kind_id = kt.id) and (t.production_year > 2000)) (cost=0.125
      rows=0.0667) (actual time=0.00118..0.00119 rows=0.176 loops=1.23e+6)'
    actual_rows: 0.176
    estimated_rows: 0.0667
    q_error: 2.638680659670165
  - node: Single-row index lookup on t using PRIMARY (id=mi.movie_id) (cost=0.125
      rows=1) (actual time=0.001..0.00103 rows=1 loops=1.23e+6)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (mi_idx.info < '8.5') (cost=0.811 rows=1.08) (actual time=0.00229..0.00332
      rows=0.942 loops=216321)"
    actual_rows: 0.942
    estimated_rows: 1.08
    q_error: 1.1464968152866244
  - node: Index lookup on mi_idx using movie_id_movie_info_idx (movie_id=mi.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00216..0.00311 rows=0.982 loops=216321)
    actual_rows: 0.982
    estimated_rows: 3.24
    q_error: 3.2993890020366603
  - node: "Filter: (it2.info = 'rating') (cost=0.125 rows=0.1) (actual time=884e-6..908e-6
      rows=0.334 loops=203692)"
    actual_rows: 0.334
    estimated_rows: 0.1
    q_error: 3.34
  - node: Single-row index lookup on it2 using PRIMARY (id=mi_idx.info_type_id) (cost=0.125
      rows=1) (actual time=693e-6..715e-6 rows=1 loops=203692)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: ((not((mc.note like '%(USA)%'))) and (mc.note like '%(200%)%'))
      (cost=0.811 rows=0.32) (actual time=0.00564..0.00885 rows=1.13 loops=68112)"
    actual_rows: 1.13
    estimated_rows: 0.32
    q_error: 3.5312499999999996
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=mi.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00284..0.00735 rows=4.14 loops=68112)
    actual_rows: 4.14
    estimated_rows: 3.24
    q_error: 1.2777777777777777
  - node: Single-row covering index lookup on ct using PRIMARY (id=mc.company_type_id)
      (cost=0.117 rows=1) (actual time=126e-6..148e-6 rows=1 loops=76678)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (cn.country_code <> '[us]') (cost=0.117 rows=0.9) (actual time=0.00131..0.00138
      rows=0.902 loops=76678)"
    actual_rows: 0.902
    estimated_rows: 0.9
    q_error: 1.0022222222222221
  - node: Single-row index lookup on cn using PRIMARY (id=mc.company_id) (cost=0.117
      rows=1) (actual time=0.00115..0.00117 rows=1 loops=76678)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: 'Filter: (cc.subject_id = cct1.id) (cost=0.328 rows=1.3) (actual time=0.00406..0.00415
      rows=0.14 loops=69189)'
    actual_rows: 0.14
    estimated_rows: 1.3
    q_error: 9.285714285714285
  - node: Index lookup on cc using movie_id_complete_cast (movie_id=mi.movie_id) (cost=0.328
      rows=1.3) (actual time=0.00373..0.00399 rows=0.675 loops=69189)
    actual_rows: 0.675
    estimated_rows: 1.3
    q_error: 1.9259259259259258
  - node: "Filter: (cct2.kind <> 'complete+verified') (cost=0.117 rows=0.75) (actual
      time=468e-6..533e-6 rows=0.892 loops=9701)"
    actual_rows: 0.892
    estimated_rows: 0.75
    q_error: 1.1893333333333334
  - node: Single-row index lookup on cct2 using PRIMARY (id=cc.status_id) (cost=0.117
      rows=1) (actual time=192e-6..215e-6 rows=1 loops=9701)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mk using movie_id_movie_keyword (movie_id=mi.movie_id) (cost=2.9
      rows=11.5) (actual time=0.00923..0.0806 rows=85.4 loops=8650)
    actual_rows: 85.4
    estimated_rows: 11.5
    q_error: 7.42608695652174
  - node: "Filter: (k.keyword in ('murder','murder-in-title','blood','violence'))
      (cost=0.0888 rows=0.4) (actual time=0.00164..0.00164 rows=0.0065 loops=738406)"
    actual_rows: 0.0065
    estimated_rows: 0.4
    q_error: 61.53846153846155
  - node: Single-row index lookup on k using PRIMARY (id=mk.keyword_id) (cost=0.0888
      rows=1) (actual time=0.00138..0.00141 rows=1 loops=738406)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 28b\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(cn.name) AS movie_company,\n       MIN(mi_idx.info) AS rating,\n  \
    \     MIN(t.title) AS complete_euro_dark_movie\nFROM complete_cast AS cc,\n  \
    \   comp_cast_type AS cct1,\n     comp_cast_type AS cct2,\n     company_name AS
    cn,\n     company_type AS ct,\n     info_type AS it1,\n     info_type AS it2,\n\
    \     keyword AS k,\n     kind_type AS kt,\n     movie_companies AS mc,\n    \
    \ movie_info AS mi,\n     movie_info_idx AS mi_idx,\n     movie_keyword AS mk,\n\
    \     title AS t\nWHERE cct1.kind = 'crew'\n  AND cct2.kind != 'complete+verified'\n\
    \  AND cn.country_code != '[us]'\n  AND it1.info = 'countries'\n  AND it2.info
    = 'rating'\n  AND k.keyword IN ('murder',\n                    'murder-in-title',\n\
    \                    'blood',\n                    'violence')\n  AND kt.kind
    IN ('movie',\n                  'episode')\n  AND mc.note NOT LIKE '%(USA)%'\n\
    \  AND mc.note LIKE '%(200%)%'\n  AND mi.info IN ('Sweden',\n                \
    \  'Germany',\n                  'Swedish',\n                  'German')\n  AND
    mi_idx.info > '6.5'\n  AND t.production_year > 2005\n  AND kt.id = t.kind_id\n\
    \  AND t.id = mi.movie_id\n  AND t.id = mk.movie_id\n  AND t.id = mi_idx.movie_id\n\
    \  AND t.id = mc.movie_id\n  AND t.id = cc.movie_id\n  AND mk.movie_id = mi.movie_id\n\
    \  AND mk.movie_id = mi_idx.movie_id\n  AND mk.movie_id = mc.movie_id\n  AND mk.movie_id
    = cc.movie_id\n  AND mi.movie_id = mi_idx.movie_id\n  AND mi.movie_id = mc.movie_id\n\
    \  AND mi.movie_id = cc.movie_id\n  AND mc.movie_id = mi_idx.movie_id\n  AND mc.movie_id
    = cc.movie_id\n  AND mi_idx.movie_id = cc.movie_id\n  AND k.id = mk.keyword_id\n\
    \  AND it1.id = mi.info_type_id\n  AND it2.id = mi_idx.info_type_id\n  AND ct.id
    = mc.company_type_id\n  AND cn.id = mc.company_id\n  AND cct1.id = cc.subject_id\n\
    \  AND cct2.id = cc.status_id"
  qep:
  - node: 'Aggregate: min(cn.`name`), min(mi_idx.info), min(t.title) (cost=13385 rows=1)
      (actual time=3365..3365 rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=13384 rows=6.6) (actual time=2561..3365 rows=148
      loops=1)
    actual_rows: 148.0
    estimated_rows: 6.6
    q_error: 22.424242424242426
  - node: Nested loop inner join (cost=13331 rows=16.5) (actual time=2561..3338 rows=15989
      loops=1)
    actual_rows: 15989.0
    estimated_rows: 16.5
    q_error: 969.030303030303
  - node: Nested loop inner join (cost=13185 rows=1.43) (actual time=2558..3322 rows=165
      loops=1)
    actual_rows: 165.0
    estimated_rows: 1.43
    q_error: 115.38461538461539
  - node: Nested loop inner join (cost=13177 rows=1.91) (actual time=2558..3322 rows=196
      loops=1)
    actual_rows: 196.0
    estimated_rows: 1.91
    q_error: 102.61780104712042
  - node: Nested loop inner join (cost=13160 rows=1.46) (actual time=2558..3315 rows=2977
      loops=1)
    actual_rows: 2977.0
    estimated_rows: 1.46
    q_error: 2039.041095890411
  - node: Nested loop inner join (cost=13153 rows=1.62) (actual time=2558..3310 rows=3069
      loops=1)
    actual_rows: 3069.0
    estimated_rows: 1.62
    q_error: 1894.4444444444443
  - node: Nested loop inner join (cost=13147 rows=1.62) (actual time=2558..3309 rows=3069
      loops=1)
    actual_rows: 3069.0
    estimated_rows: 1.62
    q_error: 1894.4444444444443
  - node: Nested loop inner join (cost=13001 rows=5.07) (actual time=2558..3286 rows=1611
      loops=1)
    actual_rows: 1611.0
    estimated_rows: 5.07
    q_error: 317.7514792899408
  - node: Nested loop inner join (cost=12774 rows=50.7) (actual time=2558..3283 rows=2788
      loops=1)
    actual_rows: 2788.0
    estimated_rows: 50.7
    q_error: 54.99013806706114
  - node: Nested loop inner join (cost=11428 rows=46.9) (actual time=2558..3235 rows=13408
      loops=1)
    actual_rows: 13408.0
    estimated_rows: 46.9
    q_error: 285.8848614072495
  - node: Inner hash join (no condition) (cost=8278 rows=704) (actual time=2550..3082
      rows=118232 loops=1)
    actual_rows: 118232.0
    estimated_rows: 704.0
    q_error: 167.9431818181818
  - node: "Filter: (kt.kind in ('movie','episode')) (cost=0.00116 rows=2) (actual
      time=0.0277..0.0375 rows=2 loops=1)"
    actual_rows: 2.0
    estimated_rows: 2.0
    q_error: 1.0
  - node: Table scan on kt (cost=0.00116 rows=7) (actual time=0.0238..0.0306 rows=7
      loops=1)
    actual_rows: 7.0
    estimated_rows: 7.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: Nested loop inner join (cost=8018 rows=1232) (actual time=0.269..2017 rows=59116
      loops=1)
    actual_rows: 59116.0
    estimated_rows: 1232.0
    q_error: 47.98376623376623
  - node: Inner hash join (no condition) (cost=12.2 rows=1.13) (actual time=0.0366..0.0723
      rows=1 loops=1)
    actual_rows: 1.0
    estimated_rows: 1.13
    q_error: 1.13
  - node: "Filter: (it1.info = 'countries') (cost=11.6 rows=11.3) (actual time=0.0073..0.0418
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 11.3
    q_error: 11.3
  - node: Table scan on it1 (cost=11.6 rows=113) (actual time=0.0059..0.0337 rows=113
      loops=1)
    actual_rows: 113.0
    estimated_rows: 113.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: "Filter: (cct1.kind = 'crew') (cost=0.65 rows=1) (actual time=0.0196..0.0224
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on cct1 (cost=0.65 rows=4) (actual time=0.0164..0.0199 rows=4
      loops=1)
    actual_rows: 4.0
    estimated_rows: 4.0
    q_error: 1.0
  - node: "Filter: (mi.info in ('Sweden','Germany','Swedish','German')) (cost=691
      rows=1090) (actual time=0.232..2014 rows=59116 loops=1)"
    actual_rows: 59116.0
    estimated_rows: 1090.0
    q_error: 54.2348623853211
  - node: Index lookup on mi using info_type_id_movie_info (info_type_id=it1.id) (cost=691
      rows=2725) (actual time=0.0203..1856 rows=1.33e+6 loops=1)
    actual_rows: 1330000.0
    estimated_rows: 2725.0
    q_error: 488.07339449541286
  - node: 'Filter: ((t.kind_id = kt.id) and (t.production_year > 2005)) (cost=0.125
      rows=0.0667) (actual time=0.0012..0.00121 rows=0.113 loops=118232)'
    actual_rows: 0.113
    estimated_rows: 0.0667
    q_error: 1.694152923538231
  - node: Single-row index lookup on t using PRIMARY (id=mi.movie_id) (cost=0.125
      rows=1) (actual time=0.00103..0.00106 rows=1 loops=118232)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (mi_idx.info > '6.5') (cost=0.811 rows=1.08) (actual time=0.00332..0.00354
      rows=0.208 loops=13408)"
    actual_rows: 0.208
    estimated_rows: 1.08
    q_error: 5.1923076923076925
  - node: Index lookup on mi_idx using movie_id_movie_info_idx (movie_id=mi.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00232..0.00333 rows=1.1 loops=13408)
    actual_rows: 1.1
    estimated_rows: 3.24
    q_error: 2.9454545454545453
  - node: "Filter: (it2.info = 'rating') (cost=0.125 rows=0.1) (actual time=737e-6..773e-6
      rows=0.578 loops=2788)"
    actual_rows: 0.578
    estimated_rows: 0.1
    q_error: 5.779999999999999
  - node: Single-row index lookup on it2 using PRIMARY (id=mi_idx.info_type_id) (cost=0.125
      rows=1) (actual time=508e-6..528e-6 rows=1 loops=2788)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: ((not((mc.note like '%(USA)%'))) and (mc.note like '%(200%)%'))
      (cost=0.811 rows=0.32) (actual time=0.00837..0.014 rows=1.91 loops=1611)"
    actual_rows: 1.91
    estimated_rows: 0.32
    q_error: 5.96875
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=mi.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00348..0.0113 rows=7.15 loops=1611)
    actual_rows: 7.15
    estimated_rows: 3.24
    q_error: 2.20679012345679
  - node: Single-row covering index lookup on ct using PRIMARY (id=mc.company_type_id)
      (cost=0.117 rows=1) (actual time=118e-6..138e-6 rows=1 loops=3069)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (cn.country_code <> '[us]') (cost=0.117 rows=0.9) (actual time=0.00143..0.00149
      rows=0.97 loops=3069)"
    actual_rows: 0.97
    estimated_rows: 0.9
    q_error: 1.0777777777777777
  - node: Single-row index lookup on cn using PRIMARY (id=mc.company_id) (cost=0.117
      rows=1) (actual time=0.00129..0.00131 rows=1 loops=3069)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: 'Filter: (cc.subject_id = cct1.id) (cost=0.329 rows=1.3) (actual time=0.00235..0.00238
      rows=0.0658 loops=2977)'
    actual_rows: 0.0658
    estimated_rows: 1.3
    q_error: 19.756838905775076
  - node: Index lookup on cc using movie_id_complete_cast (movie_id=mi.movie_id) (cost=0.329
      rows=1.3) (actual time=0.00208..0.00226 rows=0.481 loops=2977)
    actual_rows: 0.481
    estimated_rows: 1.3
    q_error: 2.702702702702703
  - node: "Filter: (cct2.kind <> 'complete+verified') (cost=0.117 rows=0.75) (actual
      time=463e-6..516e-6 rows=0.842 loops=196)"
    actual_rows: 0.842
    estimated_rows: 0.75
    q_error: 1.1226666666666667
  - node: Single-row index lookup on cct2 using PRIMARY (id=cc.status_id) (cost=0.117
      rows=1) (actual time=216e-6..232e-6 rows=1 loops=196)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mk using movie_id_movie_keyword (movie_id=mi.movie_id) (cost=2.91
      rows=11.5) (actual time=0.0107..0.0886 rows=96.9 loops=165)
    actual_rows: 96.9
    estimated_rows: 11.5
    q_error: 8.42608695652174
  - node: "Filter: (k.keyword in ('murder','murder-in-title','blood','violence'))
      (cost=0.0888 rows=0.4) (actual time=0.00161..0.00161 rows=0.00926 loops=15989)"
    actual_rows: 0.00926
    estimated_rows: 0.4
    q_error: 43.19654427645789
  - node: Single-row index lookup on k using PRIMARY (id=mk.keyword_id) (cost=0.0888
      rows=1) (actual time=0.00136..0.00139 rows=1 loops=15989)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 28c\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(cn.name) AS movie_company,\n       MIN(mi_idx.info) AS rating,\n  \
    \     MIN(t.title) AS complete_euro_dark_movie\nFROM complete_cast AS cc,\n  \
    \   comp_cast_type AS cct1,\n     comp_cast_type AS cct2,\n     company_name AS
    cn,\n     company_type AS ct,\n     info_type AS it1,\n     info_type AS it2,\n\
    \     keyword AS k,\n     kind_type AS kt,\n     movie_companies AS mc,\n    \
    \ movie_info AS mi,\n     movie_info_idx AS mi_idx,\n     movie_keyword AS mk,\n\
    \     title AS t\nWHERE cct1.kind = 'cast'\n  AND cct2.kind = 'complete'\n  AND
    cn.country_code != '[us]'\n  AND it1.info = 'countries'\n  AND it2.info = 'rating'\n\
    \  AND k.keyword IN ('murder',\n                    'murder-in-title',\n     \
    \               'blood',\n                    'violence')\n  AND kt.kind IN ('movie',\n\
    \                  'episode')\n  AND mc.note NOT LIKE '%(USA)%'\n  AND mc.note
    LIKE '%(200%)%'\n  AND mi.info IN ('Sweden',\n                  'Norway',\n  \
    \                'Germany',\n                  'Denmark',\n                  'Swedish',\n\
    \                  'Danish',\n                  'Norwegian',\n               \
    \   'German',\n                  'USA',\n                  'American')\n  AND
    mi_idx.info < '8.5'\n  AND t.production_year > 2005\n  AND kt.id = t.kind_id\n\
    \  AND t.id = mi.movie_id\n  AND t.id = mk.movie_id\n  AND t.id = mi_idx.movie_id\n\
    \  AND t.id = mc.movie_id\n  AND t.id = cc.movie_id\n  AND mk.movie_id = mi.movie_id\n\
    \  AND mk.movie_id = mi_idx.movie_id\n  AND mk.movie_id = mc.movie_id\n  AND mk.movie_id
    = cc.movie_id\n  AND mi.movie_id = mi_idx.movie_id\n  AND mi.movie_id = mc.movie_id\n\
    \  AND mi.movie_id = cc.movie_id\n  AND mc.movie_id = mi_idx.movie_id\n  AND mc.movie_id
    = cc.movie_id\n  AND mi_idx.movie_id = cc.movie_id\n  AND k.id = mk.keyword_id\n\
    \  AND it1.id = mi.info_type_id\n  AND it2.id = mi_idx.info_type_id\n  AND ct.id
    = mc.company_type_id\n  AND cn.id = mc.company_id\n  AND cct1.id = cc.subject_id\n\
    \  AND cct2.id = cc.status_id"
  qep:
  - node: 'Aggregate: min(cn.`name`), min(mi_idx.info), min(t.title) (cost=14251 rows=1)
      (actual time=9724..9724 rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=14251 rows=2.75) (actual time=3126..9720 rows=8373
      loops=1)
    actual_rows: 8373.0
    estimated_rows: 2.75
    q_error: 3044.7272727272725
  - node: Nested loop inner join (cost=14165 rows=6.87) (actual time=2966..7815 rows=1.15e+6
      loops=1)
    actual_rows: 1150000.0
    estimated_rows: 6.87
    q_error: 167394.46870451237
  - node: Nested loop inner join (cost=13923 rows=0.596) (actual time=2964..6735 rows=11455
      loops=1)
    actual_rows: 11455.0
    estimated_rows: 0.596
    q_error: 19219.798657718122
  - node: Nested loop inner join (cost=13903 rows=0.457) (actual time=2963..6634 rows=35930
      loops=1)
    actual_rows: 35930.0
    estimated_rows: 0.457
    q_error: 78621.4442013129
  - node: Nested loop inner join (cost=13894 rows=0.508) (actual time=2963..6570 rows=40333
      loops=1)
    actual_rows: 40333.0
    estimated_rows: 0.508
    q_error: 79395.66929133858
  - node: Nested loop inner join (cost=13886 rows=0.508) (actual time=2963..6558 rows=40333
      loops=1)
    actual_rows: 40333.0
    estimated_rows: 0.508
    q_error: 79395.66929133858
  - node: Nested loop inner join (cost=13706 rows=1.58) (actual time=2963..6160 rows=44414
      loops=1)
    actual_rows: 44414.0
    estimated_rows: 1.58
    q_error: 28110.12658227848
  - node: Nested loop inner join (cost=13427 rows=15.8) (actual time=2963..6028 rows=133055
      loops=1)
    actual_rows: 133055.0
    estimated_rows: 15.8
    q_error: 8421.20253164557
  - node: Nested loop inner join (cost=11758 rows=14.7) (actual time=2962..5515 rows=165761
      loops=1)
    actual_rows: 165761.0
    estimated_rows: 14.7
    q_error: 11276.258503401361
  - node: Inner hash join (no condition) (cost=7887 rows=220) (actual time=2956..3965
      rows=1.23e+6 loops=1)
    actual_rows: 1230000.0
    estimated_rows: 220.0
    q_error: 5590.909090909091
  - node: "Filter: (kt.kind in ('movie','episode')) (cost=0.00153 rows=2) (actual
      time=0.0266..0.0339 rows=2 loops=1)"
    actual_rows: 2.0
    estimated_rows: 2.0
    q_error: 1.0
  - node: Table scan on kt (cost=0.00153 rows=7) (actual time=0.0229..0.028 rows=7
      loops=1)
    actual_rows: 7.0
    estimated_rows: 7.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: Nested loop inner join (cost=7787 rows=385) (actual time=0.0661..2298 rows=614251
      loops=1)
    actual_rows: 614251.0
    estimated_rows: 385.0
    q_error: 1595.4571428571428
  - node: Inner hash join (no condition) (cost=12 rows=0.283) (actual time=0.0436..0.0703
      rows=1 loops=1)
    actual_rows: 1.0
    estimated_rows: 0.283
    q_error: 3.53356890459364
  - node: "Filter: (it1.info = 'countries') (cost=11.6 rows=11.3) (actual time=0.0075..0.0332
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 11.3
    q_error: 11.3
  - node: Table scan on it1 (cost=11.6 rows=113) (actual time=0.006..0.0268 rows=113
      loops=1)
    actual_rows: 113.0
    estimated_rows: 113.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: Inner hash join (no condition) (cost=1.3 rows=0.25) (actual time=0.0314..0.0325
      rows=1 loops=1)
    actual_rows: 1.0
    estimated_rows: 0.25
    q_error: 4.0
  - node: "Filter: (cct2.kind = 'complete') (cost=0.65 rows=1) (actual time=0.0025..0.0031
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on cct2 (cost=0.65 rows=4) (actual time=0.002..0.0026 rows=4
      loops=1)
    actual_rows: 4.0
    estimated_rows: 4.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: "Filter: (cct1.kind = 'cast') (cost=0.65 rows=1) (actual time=0.0178..0.0214
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on cct1 (cost=0.65 rows=4) (actual time=0.016..0.0195 rows=4
      loops=1)
    actual_rows: 4.0
    estimated_rows: 4.0
    q_error: 1.0
  - node: "Filter: (mi.info in ('Sweden','Norway','Germany','Denmark','Swedish','Danish','Norwegian','German','USA','American'))
      (cost=693 rows=1362) (actual time=0.0223..2267 rows=614251 loops=1)"
    actual_rows: 614251.0
    estimated_rows: 1362.0
    q_error: 450.99192364170335
  - node: Index lookup on mi using info_type_id_movie_info (info_type_id=it1.id) (cost=693
      rows=2725) (actual time=0.0191..2004 rows=1.33e+6 loops=1)
    actual_rows: 1330000.0
    estimated_rows: 2725.0
    q_error: 488.07339449541286
  - node: 'Filter: ((t.kind_id = kt.id) and (t.production_year > 2005)) (cost=0.125
      rows=0.0667) (actual time=0.00117..0.00118 rows=0.135 loops=1.23e+6)'
    actual_rows: 0.135
    estimated_rows: 0.0667
    q_error: 2.0239880059970017
  - node: Single-row index lookup on t using PRIMARY (id=mi.movie_id) (cost=0.125
      rows=1) (actual time=993e-6..0.00101 rows=1 loops=1.23e+6)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (mi_idx.info < '8.5') (cost=0.811 rows=1.08) (actual time=0.00211..0.00297
      rows=0.803 loops=165761)"
    actual_rows: 0.803
    estimated_rows: 1.08
    q_error: 1.3449564134495642
  - node: Index lookup on mi_idx using movie_id_movie_info_idx (movie_id=mi.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00199..0.00278 rows=0.838 loops=165761)
    actual_rows: 0.838
    estimated_rows: 3.24
    q_error: 3.866348448687351
  - node: "Filter: (it2.info = 'rating') (cost=0.125 rows=0.1) (actual time=864e-6..888e-6
      rows=0.334 loops=133055)"
    actual_rows: 0.334
    estimated_rows: 0.1
    q_error: 3.34
  - node: Single-row index lookup on it2 using PRIMARY (id=mi_idx.info_type_id) (cost=0.125
      rows=1) (actual time=674e-6..695e-6 rows=1 loops=133055)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: ((not((mc.note like '%(USA)%'))) and (mc.note like '%(200%)%'))
      (cost=0.811 rows=0.32) (actual time=0.00609..0.00882 rows=0.908 loops=44414)"
    actual_rows: 0.908
    estimated_rows: 0.32
    q_error: 2.8375
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=mi.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00273..0.00724 rows=4.26 loops=44414)
    actual_rows: 4.26
    estimated_rows: 3.24
    q_error: 1.3148148148148147
  - node: Single-row covering index lookup on ct using PRIMARY (id=mc.company_type_id)
      (cost=0.117 rows=1) (actual time=130e-6..150e-6 rows=1 loops=40333)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (cn.country_code <> '[us]') (cost=0.117 rows=0.9) (actual time=0.00139..0.00145
      rows=0.891 loops=40333)"
    actual_rows: 0.891
    estimated_rows: 0.9
    q_error: 1.0101010101010102
  - node: Single-row index lookup on cn using PRIMARY (id=mc.company_id) (cost=0.117
      rows=1) (actual time=0.00122..0.00124 rows=1 loops=40333)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: 'Filter: ((cc.status_id = cct2.id) and (cc.subject_id = cct1.id)) (cost=0.328
      rows=1.3) (actual time=0.00248..0.0027 rows=0.319 loops=35930)'
    actual_rows: 0.319
    estimated_rows: 1.3
    q_error: 4.075235109717869
  - node: Index lookup on cc using movie_id_complete_cast (movie_id=mi.movie_id) (cost=0.328
      rows=1.3) (actual time=0.00225..0.00251 rows=0.564 loops=35930)
    actual_rows: 0.564
    estimated_rows: 1.3
    q_error: 2.3049645390070923
  - node: Index lookup on mk using movie_id_movie_keyword (movie_id=mi.movie_id) (cost=2.9
      rows=11.5) (actual time=0.00956..0.0896 rows=101 loops=11455)
    actual_rows: 101.0
    estimated_rows: 11.5
    q_error: 8.782608695652174
  - node: "Filter: (k.keyword in ('murder','murder-in-title','blood','violence'))
      (cost=0.0887 rows=0.4) (actual time=0.00158..0.00158 rows=0.00727 loops=1.15e+6)"
    actual_rows: 0.00727
    estimated_rows: 0.4
    q_error: 55.02063273727648
  - node: Single-row index lookup on k using PRIMARY (id=mk.keyword_id) (cost=0.0887
      rows=1) (actual time=0.00134..0.00136 rows=1 loops=1.15e+6)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 29a\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(chn.name) AS voiced_char,\n       MIN(n.name) AS voicing_actress,\n\
    \       MIN(t.title) AS voiced_animation\nFROM aka_name AS an,\n     complete_cast
    AS cc,\n     comp_cast_type AS cct1,\n     comp_cast_type AS cct2,\n     char_name
    AS chn,\n     cast_info AS ci,\n     company_name AS cn,\n     info_type AS it,\n\
    \     info_type AS it3,\n     keyword AS k,\n     movie_companies AS mc,\n   \
    \  movie_info AS mi,\n     movie_keyword AS mk,\n     name AS n,\n     person_info
    AS pi,\n     role_type AS rt,\n     title AS t\nWHERE cct1.kind ='cast'\n  AND
    cct2.kind ='complete+verified'\n  AND chn.name = 'Queen'\n  AND ci.note IN ('(voice)',\n\
    \                  '(voice) (uncredited)',\n                  '(voice: English
    version)')\n  AND cn.country_code ='[us]'\n  AND it.info = 'release dates'\n \
    \ AND it3.info = 'trivia'\n  AND k.keyword = 'computer-animation'\n  AND mi.info
    IS NOT NULL\n  AND (mi.info LIKE 'Japan:%200%'\n       OR mi.info LIKE 'USA:%200%')\n\
    \  AND n.gender ='f'\n  AND n.name LIKE '%An%'\n  AND rt.role ='actress'\n  AND
    t.title = 'Shrek 2'\n  AND t.production_year BETWEEN 2000 AND 2010\n  AND t.id
    = mi.movie_id\n  AND t.id = mc.movie_id\n  AND t.id = ci.movie_id\n  AND t.id
    = mk.movie_id\n  AND t.id = cc.movie_id\n  AND mc.movie_id = ci.movie_id\n  AND
    mc.movie_id = mi.movie_id\n  AND mc.movie_id = mk.movie_id\n  AND mc.movie_id
    = cc.movie_id\n  AND mi.movie_id = ci.movie_id\n  AND mi.movie_id = mk.movie_id\n\
    \  AND mi.movie_id = cc.movie_id\n  AND ci.movie_id = mk.movie_id\n  AND ci.movie_id
    = cc.movie_id\n  AND mk.movie_id = cc.movie_id\n  AND cn.id = mc.company_id\n\
    \  AND it.id = mi.info_type_id\n  AND n.id = ci.person_id\n  AND rt.id = ci.role_id\n\
    \  AND n.id = an.person_id\n  AND ci.person_id = an.person_id\n  AND chn.id =
    ci.person_role_id\n  AND n.id = pi.person_id\n  AND ci.person_id = pi.person_id\n\
    \  AND it3.id = pi.info_type_id\n  AND k.id = mk.keyword_id\n  AND cct1.id = cc.subject_id\n\
    \  AND cct2.id = cc.status_id"
  qep:
  - node: 'Aggregate: min(chn.`name`), min(n.`name`), min(t.title) (cost=1933 rows=1)
      (actual time=16403..16403 rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=1933 rows=441e-6) (actual time=400..16402 rows=1620
      loops=1)
    actual_rows: 1620.0
    estimated_rows: 0.000441
    q_error: 3673469.387755102
  - node: Nested loop inner join (cost=1933 rows=0.00441) (actual time=400..16195
      rows=174960 loops=1)
    actual_rows: 174960.0
    estimated_rows: 0.00441
    q_error: 39673469.3877551
  - node: Nested loop inner join (cost=1933 rows=382e-6) (actual time=400..16048 rows=1620
      loops=1)
    actual_rows: 1620.0
    estimated_rows: 0.000382
    q_error: 4240837.696335078
  - node: Nested loop inner join (cost=1933 rows=0.00382) (actual time=399..16046
      rows=4890 loops=1)
    actual_rows: 4890.0
    estimated_rows: 0.00382
    q_error: 1280104.712041885
  - node: Nested loop inner join (cost=1933 rows=779e-6) (actual time=397..16037 rows=30
      loops=1)
    actual_rows: 30.0
    estimated_rows: 0.000779
    q_error: 38510.91142490372
  - node: Nested loop inner join (cost=1933 rows=0.00779) (actual time=397..16037
      rows=132 loops=1)
    actual_rows: 132.0
    estimated_rows: 0.00779
    q_error: 16944.801026957637
  - node: Nested loop inner join (cost=1933 rows=0.0024) (actual time=397..16036 rows=6
      loops=1)
    actual_rows: 6.0
    estimated_rows: 0.0024
    q_error: 2500.0
  - node: Nested loop inner join (cost=1933 rows=0.0016) (actual time=397..16036 rows=2
      loops=1)
    actual_rows: 2.0
    estimated_rows: 0.0016
    q_error: 1250.0
  - node: Nested loop inner join (cost=1933 rows=0.00123) (actual time=397..16036
      rows=2 loops=1)
    actual_rows: 2.0
    estimated_rows: 0.00123
    q_error: 1626.0162601626016
  - node: Nested loop inner join (cost=1932 rows=0.0123) (actual time=397..16036 rows=2
      loops=1)
    actual_rows: 2.0
    estimated_rows: 0.0123
    q_error: 162.60162601626016
  - node: Nested loop inner join (cost=1932 rows=0.0109) (actual time=396..16035 rows=1
      loops=1)
    actual_rows: 1.0
    estimated_rows: 0.0109
    q_error: 91.74311926605505
  - node: Nested loop inner join (cost=1930 rows=0.218) (actual time=396..16035 rows=1
      loops=1)
    actual_rows: 1.0
    estimated_rows: 0.218
    q_error: 4.587155963302752
  - node: Nested loop inner join (cost=1908 rows=2.18) (actual time=396..16035 rows=20
      loops=1)
    actual_rows: 20.0
    estimated_rows: 2.18
    q_error: 9.174311926605505
  - node: Nested loop inner join (cost=1468 rows=43.5) (actual time=1.47..15665 rows=243161
      loops=1)
    actual_rows: 243161.0
    estimated_rows: 43.5
    q_error: 5589.908045977011
  - node: Inner hash join (no condition) (cost=2.66 rows=0.03) (actual time=0.0442..0.0573
      rows=1 loops=1)
    actual_rows: 1.0
    estimated_rows: 0.03
    q_error: 33.333333333333336
  - node: "Filter: (rt.`role` = 'actress') (cost=1.45 rows=1.2) (actual time=0.0053..0.0166
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.2
    q_error: 1.2
  - node: Table scan on rt (cost=1.45 rows=12) (actual time=0.0047..0.0141 rows=12
      loops=1)
    actual_rows: 12.0
    estimated_rows: 12.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: Inner hash join (no condition) (cost=1.3 rows=0.25) (actual time=0.0345..0.0353
      rows=1 loops=1)
    actual_rows: 1.0
    estimated_rows: 0.25
    q_error: 4.0
  - node: "Filter: (cct2.kind = 'complete+verified') (cost=0.65 rows=1) (actual time=0.0029..0.0034
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on cct2 (cost=0.65 rows=4) (actual time=0.0021..0.0028 rows=4
      loops=1)
    actual_rows: 4.0
    estimated_rows: 4.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: "Filter: (cct1.kind = 'cast') (cost=0.65 rows=1) (actual time=0.0198..0.0235
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on cct1 (cost=0.65 rows=4) (actual time=0.018..0.0212 rows=4
      loops=1)
    actual_rows: 4.0
    estimated_rows: 4.0
    q_error: 1.0
  - node: "Filter: ((ci.note in ('(voice)','(voice) (uncredited)','(voice: English
      version)')) and (ci.person_role_id is not null)) (cost=1330 rows=1451) (actual
      time=1.42..15654 rows=243161 loops=1)"
    actual_rows: 243161.0
    estimated_rows: 1451.0
    q_error: 167.5816678152998
  - node: Index lookup on ci using role_id_cast_info (role_id=rt.id) (cost=1330 rows=4836)
      (actual time=0.0231..15040 rows=7.45e+6 loops=1)
    actual_rows: 7450000.0
    estimated_rows: 4836.0
    q_error: 1540.5293631100083
  - node: "Filter: ((t.title = 'Shrek 2') and (t.production_year between 2000 and
      2010)) (cost=0.25 rows=0.05) (actual time=0.00144..0.00144 rows=82.3e-6 loops=243161)"
    actual_rows: 8.23e-05
    estimated_rows: 0.05
    q_error: 607.5334143377886
  - node: Single-row index lookup on t using PRIMARY (id=ci.movie_id) (cost=0.25 rows=1)
      (actual time=0.00124..0.00126 rows=1 loops=243161)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (chn.`name` = 'Queen') (cost=0.25 rows=0.1) (actual time=0.00557..0.00558
      rows=0.05 loops=20)"
    actual_rows: 0.05
    estimated_rows: 0.1
    q_error: 2.0
  - node: Single-row index lookup on chn using PRIMARY (id=ci.person_role_id) (cost=0.25
      rows=1) (actual time=0.00511..0.00514 rows=1 loops=20)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: ((n.gender = 'f') and (n.`name` like '%An%')) (cost=0.251 rows=0.05)
      (actual time=0.0091..0.0091 rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 0.05
    q_error: 20.0
  - node: Single-row index lookup on n using PRIMARY (id=ci.person_id) (cost=0.251
      rows=1) (actual time=0.0069..0.0069 rows=1 loops=1)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: ((mi.info like 'Japan:%200%') or (mi.info like 'USA:%200%')) (cost=1.6
      rows=1.13) (actual time=0.772..0.907 rows=2 loops=1)"
    actual_rows: 2.0
    estimated_rows: 1.13
    q_error: 1.7699115044247788
  - node: Index lookup on mi using movie_id_movie_info (movie_id=ci.movie_id) (cost=1.6
      rows=5.37) (actual time=0.0112..0.854 rows=457 loops=1)
    actual_rows: 457.0
    estimated_rows: 5.37
    q_error: 85.1024208566108
  - node: "Filter: (it.info = 'release dates') (cost=0.27 rows=0.1) (actual time=0.00315..0.00335
      rows=1 loops=2)"
    actual_rows: 1.0
    estimated_rows: 0.1
    q_error: 10.0
  - node: Single-row index lookup on it using PRIMARY (id=mi.info_type_id) (cost=0.27
      rows=1) (actual time=0.00255..0.00255 rows=1 loops=2)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: 'Filter: ((cc.status_id = cct2.id) and (cc.subject_id = cct1.id)) (cost=2.98
      rows=1.3) (actual time=0.0135..0.0159 rows=1 loops=2)'
    actual_rows: 1.0
    estimated_rows: 1.3
    q_error: 1.3
  - node: Index lookup on cc using movie_id_complete_cast (movie_id=ci.movie_id) (cost=2.98
      rows=1.3) (actual time=0.0117..0.014 rows=1 loops=2)
    actual_rows: 1.0
    estimated_rows: 1.3
    q_error: 1.3
  - node: Covering index lookup on an using person_id_aka_name (person_id=ci.person_id)
      (cost=2.68 rows=1.5) (actual time=0.0058..0.00975 rows=3 loops=2)
    actual_rows: 3.0
    estimated_rows: 1.5
    q_error: 2.0
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=ci.movie_id)
      (cost=4.19 rows=3.24) (actual time=0.011..0.0356 rows=22 loops=6)
    actual_rows: 22.0
    estimated_rows: 3.24
    q_error: 6.790123456790123
  - node: "Filter: (cn.country_code = '[us]') (cost=0.145 rows=0.1) (actual time=0.00169..0.0017
      rows=0.227 loops=132)"
    actual_rows: 0.227
    estimated_rows: 0.1
    q_error: 2.27
  - node: Single-row index lookup on cn using PRIMARY (id=mc.company_id) (cost=0.145
      rows=1) (actual time=0.00148..0.0015 rows=1 loops=132)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on pi using person_id_person_info (person_id=ci.person_id)
      (cost=20 rows=4.9) (actual time=0.0873..0.284 rows=163 loops=30)
    actual_rows: 163.0
    estimated_rows: 4.9
    q_error: 33.265306122448976
  - node: "Filter: (it3.info = 'trivia') (cost=0.1 rows=0.1) (actual time=432e-6..453e-6
      rows=0.331 loops=4890)"
    actual_rows: 0.331
    estimated_rows: 0.1
    q_error: 3.31
  - node: Single-row index lookup on it3 using PRIMARY (id=pi.info_type_id) (cost=0.1
      rows=1) (actual time=243e-6..263e-6 rows=1 loops=4890)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mk using movie_id_movie_keyword (movie_id=ci.movie_id) (cost=78.4
      rows=11.5) (actual time=0.00965..0.0859 rows=108 loops=1620)
    actual_rows: 108.0
    estimated_rows: 11.5
    q_error: 9.391304347826088
  - node: "Filter: (k.keyword = 'computer-animation') (cost=0.0638 rows=0.1) (actual
      time=0.00111..0.00111 rows=0.00926 loops=174960)"
    actual_rows: 0.00926
    estimated_rows: 0.1
    q_error: 10.799136069114473
  - node: Single-row index lookup on k using PRIMARY (id=mk.keyword_id) (cost=0.0638
      rows=1) (actual time=940e-6..959e-6 rows=1 loops=174960)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 29b\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(chn.name) AS voiced_char,\n       MIN(n.name) AS voicing_actress,\n\
    \       MIN(t.title) AS voiced_animation\nFROM aka_name AS an,\n     complete_cast
    AS cc,\n     comp_cast_type AS cct1,\n     comp_cast_type AS cct2,\n     char_name
    AS chn,\n     cast_info AS ci,\n     company_name AS cn,\n     info_type AS it,\n\
    \     info_type AS it3,\n     keyword AS k,\n     movie_companies AS mc,\n   \
    \  movie_info AS mi,\n     movie_keyword AS mk,\n     name AS n,\n     person_info
    AS pi,\n     role_type AS rt,\n     title AS t\nWHERE cct1.kind ='cast'\n  AND
    cct2.kind ='complete+verified'\n  AND chn.name = 'Queen'\n  AND ci.note IN ('(voice)',\n\
    \                  '(voice) (uncredited)',\n                  '(voice: English
    version)')\n  AND cn.country_code ='[us]'\n  AND it.info = 'release dates'\n \
    \ AND it3.info = 'height'\n  AND k.keyword = 'computer-animation'\n  AND mi.info
    LIKE 'USA:%200%'\n  AND n.gender ='f'\n  AND n.name LIKE '%An%'\n  AND rt.role
    ='actress'\n  AND t.title = 'Shrek 2'\n  AND t.production_year BETWEEN 2000 AND
    2005\n  AND t.id = mi.movie_id\n  AND t.id = mc.movie_id\n  AND t.id = ci.movie_id\n\
    \  AND t.id = mk.movie_id\n  AND t.id = cc.movie_id\n  AND mc.movie_id = ci.movie_id\n\
    \  AND mc.movie_id = mi.movie_id\n  AND mc.movie_id = mk.movie_id\n  AND mc.movie_id
    = cc.movie_id\n  AND mi.movie_id = ci.movie_id\n  AND mi.movie_id = mk.movie_id\n\
    \  AND mi.movie_id = cc.movie_id\n  AND ci.movie_id = mk.movie_id\n  AND ci.movie_id
    = cc.movie_id\n  AND mk.movie_id = cc.movie_id\n  AND cn.id = mc.company_id\n\
    \  AND it.id = mi.info_type_id\n  AND n.id = ci.person_id\n  AND rt.id = ci.role_id\n\
    \  AND n.id = an.person_id\n  AND ci.person_id = an.person_id\n  AND chn.id =
    ci.person_role_id\n  AND n.id = pi.person_id\n  AND ci.person_id = pi.person_id\n\
    \  AND it3.id = pi.info_type_id\n  AND k.id = mk.keyword_id\n  AND cct1.id = cc.subject_id\n\
    \  AND cct2.id = cc.status_id"
  qep:
  - node: 'Aggregate: min(chn.`name`), min(n.`name`), min(t.title) (cost=1933 rows=1)
      (actual time=16330..16330 rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=1933 rows=233e-6) (actual time=413..16330 rows=15
      loops=1)
    actual_rows: 15.0
    estimated_rows: 0.000233
    q_error: 64377.68240343348
  - node: Nested loop inner join (cost=1933 rows=0.00233) (actual time=413..16328
      rows=1620 loops=1)
    actual_rows: 1620.0
    estimated_rows: 0.00233
    q_error: 695278.9699570815
  - node: Nested loop inner join (cost=1933 rows=202e-6) (actual time=413..16326 rows=15
      loops=1)
    actual_rows: 15.0
    estimated_rows: 0.000202
    q_error: 74257.42574257425
  - node: Nested loop inner join (cost=1933 rows=0.00202) (actual time=413..16325
      rows=2445 loops=1)
    actual_rows: 2445.0
    estimated_rows: 0.00202
    q_error: 1210396.0396039602
  - node: Nested loop inner join (cost=1933 rows=413e-6) (actual time=413..16323 rows=15
      loops=1)
    actual_rows: 15.0
    estimated_rows: 0.000413
    q_error: 36319.61259079903
  - node: Nested loop inner join (cost=1933 rows=0.00413) (actual time=413..16323
      rows=66 loops=1)
    actual_rows: 66.0
    estimated_rows: 0.00413
    q_error: 15980.629539951575
  - node: Nested loop inner join (cost=1933 rows=0.00127) (actual time=413..16323
      rows=3 loops=1)
    actual_rows: 3.0
    estimated_rows: 0.00127
    q_error: 2362.2047244094488
  - node: Nested loop inner join (cost=1933 rows=847e-6) (actual time=413..16323 rows=1
      loops=1)
    actual_rows: 1.0
    estimated_rows: 0.000847
    q_error: 1180.637544273908
  - node: Nested loop inner join (cost=1933 rows=649e-6) (actual time=413..16323 rows=1
      loops=1)
    actual_rows: 1.0
    estimated_rows: 0.000649
    q_error: 1540.8320493066258
  - node: Nested loop inner join (cost=1932 rows=0.00649) (actual time=413..16323
      rows=1 loops=1)
    actual_rows: 1.0
    estimated_rows: 0.00649
    q_error: 154.08320493066256
  - node: Nested loop inner join (cost=1932 rows=0.0109) (actual time=412..16322 rows=1
      loops=1)
    actual_rows: 1.0
    estimated_rows: 0.0109
    q_error: 91.74311926605505
  - node: Nested loop inner join (cost=1930 rows=0.218) (actual time=412..16322 rows=1
      loops=1)
    actual_rows: 1.0
    estimated_rows: 0.218
    q_error: 4.587155963302752
  - node: Nested loop inner join (cost=1908 rows=2.18) (actual time=412..16321 rows=20
      loops=1)
    actual_rows: 20.0
    estimated_rows: 2.18
    q_error: 9.174311926605505
  - node: Nested loop inner join (cost=1468 rows=43.5) (actual time=1.55..15931 rows=243161
      loops=1)
    actual_rows: 243161.0
    estimated_rows: 43.5
    q_error: 5589.908045977011
  - node: Inner hash join (no condition) (cost=2.66 rows=0.03) (actual time=0.0572..0.0697
      rows=1 loops=1)
    actual_rows: 1.0
    estimated_rows: 0.03
    q_error: 33.333333333333336
  - node: "Filter: (rt.`role` = 'actress') (cost=1.45 rows=1.2) (actual time=0.0061..0.0167
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.2
    q_error: 1.2
  - node: Table scan on rt (cost=1.45 rows=12) (actual time=0.0057..0.0143 rows=12
      loops=1)
    actual_rows: 12.0
    estimated_rows: 12.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: Inner hash join (no condition) (cost=1.3 rows=0.25) (actual time=0.0457..0.0467
      rows=1 loops=1)
    actual_rows: 1.0
    estimated_rows: 0.25
    q_error: 4.0
  - node: "Filter: (cct2.kind = 'complete+verified') (cost=0.65 rows=1) (actual time=0.0029..0.0033
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on cct2 (cost=0.65 rows=4) (actual time=0.002..0.0026 rows=4
      loops=1)
    actual_rows: 4.0
    estimated_rows: 4.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: "Filter: (cct1.kind = 'cast') (cost=0.65 rows=1) (actual time=0.0292..0.0334
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on cct1 (cost=0.65 rows=4) (actual time=0.0271..0.0308 rows=4
      loops=1)
    actual_rows: 4.0
    estimated_rows: 4.0
    q_error: 1.0
  - node: "Filter: ((ci.note in ('(voice)','(voice) (uncredited)','(voice: English
      version)')) and (ci.person_role_id is not null)) (cost=1330 rows=1451) (actual
      time=1.49..15920 rows=243161 loops=1)"
    actual_rows: 243161.0
    estimated_rows: 1451.0
    q_error: 167.5816678152998
  - node: Index lookup on ci using role_id_cast_info (role_id=rt.id) (cost=1330 rows=4836)
      (actual time=0.0262..15240 rows=7.45e+6 loops=1)
    actual_rows: 7450000.0
    estimated_rows: 4836.0
    q_error: 1540.5293631100083
  - node: "Filter: ((t.title = 'Shrek 2') and (t.production_year between 2000 and
      2005)) (cost=0.25 rows=0.05) (actual time=0.00152..0.00152 rows=82.3e-6 loops=243161)"
    actual_rows: 8.23e-05
    estimated_rows: 0.05
    q_error: 607.5334143377886
  - node: Single-row index lookup on t using PRIMARY (id=ci.movie_id) (cost=0.25 rows=1)
      (actual time=0.0013..0.00132 rows=1 loops=243161)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (chn.`name` = 'Queen') (cost=0.25 rows=0.1) (actual time=0.00544..0.00544
      rows=0.05 loops=20)"
    actual_rows: 0.05
    estimated_rows: 0.1
    q_error: 2.0
  - node: Single-row index lookup on chn using PRIMARY (id=ci.person_role_id) (cost=0.25
      rows=1) (actual time=0.00495..0.00498 rows=1 loops=20)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: ((n.gender = 'f') and (n.`name` like '%An%')) (cost=0.251 rows=0.05)
      (actual time=0.0092..0.0093 rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 0.05
    q_error: 20.0
  - node: Single-row index lookup on n using PRIMARY (id=ci.person_id) (cost=0.251
      rows=1) (actual time=0.0068..0.0068 rows=1 loops=1)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (mi.info like 'USA:%200%') (cost=1.48 rows=0.597) (actual time=0.998..1.15
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 0.597
    q_error: 1.6750418760469012
  - node: Index lookup on mi using movie_id_movie_info (movie_id=ci.movie_id) (cost=1.48
      rows=5.37) (actual time=0.0137..1.13 rows=457 loops=1)
    actual_rows: 457.0
    estimated_rows: 5.37
    q_error: 85.1024208566108
  - node: "Filter: (it.info = 'release dates') (cost=0.288 rows=0.1) (actual time=0.0062..0.0062
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 0.1
    q_error: 10.0
  - node: Single-row index lookup on it using PRIMARY (id=mi.info_type_id) (cost=0.288
      rows=1) (actual time=0.0058..0.0058 rows=1 loops=1)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: 'Filter: ((cc.status_id = cct2.id) and (cc.subject_id = cct1.id)) (cost=5.35
      rows=1.3) (actual time=0.017..0.019 rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.3
    q_error: 1.3
  - node: Index lookup on cc using movie_id_complete_cast (movie_id=ci.movie_id) (cost=5.35
      rows=1.3) (actual time=0.0153..0.0171 rows=1 loops=1)
    actual_rows: 1.0
    estimated_rows: 1.3
    q_error: 1.3
  - node: Covering index lookup on an using person_id_aka_name (person_id=ci.person_id)
      (cost=4.77 rows=1.5) (actual time=0.0073..0.0103 rows=3 loops=1)
    actual_rows: 3.0
    estimated_rows: 1.5
    q_error: 2.0
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=ci.movie_id)
      (cost=7.18 rows=3.24) (actual time=0.00807..0.029 rows=22 loops=3)
    actual_rows: 22.0
    estimated_rows: 3.24
    q_error: 6.790123456790123
  - node: "Filter: (cn.country_code = '[us]') (cost=0.188 rows=0.1) (actual time=0.00149..0.0015
      rows=0.227 loops=66)"
    actual_rows: 0.227
    estimated_rows: 0.1
    q_error: 2.27
  - node: Single-row index lookup on cn using PRIMARY (id=mc.company_id) (cost=0.188
      rows=1) (actual time=0.00132..0.00133 rows=1 loops=66)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on pi using person_id_person_info (person_id=ci.person_id)
      (cost=34 rows=4.9) (actual time=0.00797..0.154 rows=163 loops=15)
    actual_rows: 163.0
    estimated_rows: 4.9
    q_error: 33.265306122448976
  - node: "Filter: (it3.info = 'height') (cost=0.163 rows=0.1) (actual time=270e-6..270e-6
      rows=0.00613 loops=2445)"
    actual_rows: 0.00613
    estimated_rows: 0.1
    q_error: 16.31321370309951
  - node: Single-row index lookup on it3 using PRIMARY (id=pi.info_type_id) (cost=0.163
      rows=1) (actual time=136e-6..153e-6 rows=1 loops=2445)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mk using movie_id_movie_keyword (movie_id=ci.movie_id) (cost=145
      rows=11.5) (actual time=0.0111..0.0899 rows=108 loops=15)
    actual_rows: 108.0
    estimated_rows: 11.5
    q_error: 9.391304347826088
  - node: "Filter: (k.keyword = 'computer-animation') (cost=0.115 rows=0.1) (actual
      time=0.00138..0.00138 rows=0.00926 loops=1620)"
    actual_rows: 0.00926
    estimated_rows: 0.1
    q_error: 10.799136069114473
  - node: Single-row index lookup on k using PRIMARY (id=mk.keyword_id) (cost=0.115
      rows=1) (actual time=0.00123..0.00125 rows=1 loops=1620)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 29c\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(chn.name) AS voiced_char,\n       MIN(n.name) AS voicing_actress,\n\
    \       MIN(t.title) AS voiced_animation\nFROM aka_name AS an,\n     complete_cast
    AS cc,\n     comp_cast_type AS cct1,\n     comp_cast_type AS cct2,\n     char_name
    AS chn,\n     cast_info AS ci,\n     company_name AS cn,\n     info_type AS it,\n\
    \     info_type AS it3,\n     keyword AS k,\n     movie_companies AS mc,\n   \
    \  movie_info AS mi,\n     movie_keyword AS mk,\n     name AS n,\n     person_info
    AS pi,\n     role_type AS rt,\n     title AS t\nWHERE cct1.kind ='cast'\n  AND
    cct2.kind ='complete+verified'\n  AND ci.note IN ('(voice)',\n               \
    \   '(voice: Japanese version)',\n                  '(voice) (uncredited)',\n\
    \                  '(voice: English version)')\n  AND cn.country_code ='[us]'\n\
    \  AND it.info = 'release dates'\n  AND it3.info = 'trivia'\n  AND k.keyword =
    'computer-animation'\n  AND mi.info IS NOT NULL\n  AND (mi.info LIKE 'Japan:%200%'\n\
    \       OR mi.info LIKE 'USA:%200%')\n  AND n.gender ='f'\n  AND n.name LIKE '%An%'\n\
    \  AND rt.role ='actress'\n  AND t.production_year BETWEEN 2000 AND 2010\n  AND
    t.id = mi.movie_id\n  AND t.id = mc.movie_id\n  AND t.id = ci.movie_id\n  AND
    t.id = mk.movie_id\n  AND t.id = cc.movie_id\n  AND mc.movie_id = ci.movie_id\n\
    \  AND mc.movie_id = mi.movie_id\n  AND mc.movie_id = mk.movie_id\n  AND mc.movie_id
    = cc.movie_id\n  AND mi.movie_id = ci.movie_id\n  AND mi.movie_id = mk.movie_id\n\
    \  AND mi.movie_id = cc.movie_id\n  AND ci.movie_id = mk.movie_id\n  AND ci.movie_id
    = cc.movie_id\n  AND mk.movie_id = cc.movie_id\n  AND cn.id = mc.company_id\n\
    \  AND it.id = mi.info_type_id\n  AND n.id = ci.person_id\n  AND rt.id = ci.role_id\n\
    \  AND n.id = an.person_id\n  AND ci.person_id = an.person_id\n  AND chn.id =
    ci.person_role_id\n  AND n.id = pi.person_id\n  AND ci.person_id = pi.person_id\n\
    \  AND it3.id = pi.info_type_id\n  AND k.id = mk.keyword_id\n  AND cct1.id = cc.subject_id\n\
    \  AND cct2.id = cc.status_id"
  qep:
  - node: 'Aggregate: min(chn.`name`), min(n.`name`), min(t.title) (cost=2216 rows=1)
      (actual time=43075..43075 rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=2216 rows=0.0131) (actual time=447..43066 rows=22402
      loops=1)
    actual_rows: 22402.0
    estimated_rows: 0.0131
    q_error: 1710076.3358778625
  - node: Nested loop inner join (cost=2216 rows=0.131) (actual time=447..29037 rows=11.1e+6
      loops=1)
    actual_rows: 11100000.0
    estimated_rows: 0.131
    q_error: 84732824.4274809
  - node: Nested loop inner join (cost=2214 rows=0.0113) (actual time=447..19596 rows=95186
      loops=1)
    actual_rows: 95186.0
    estimated_rows: 0.0113
    q_error: 8423539.82300885
  - node: Nested loop inner join (cost=2214 rows=0.113) (actual time=447..19415 rows=320363
      loops=1)
    actual_rows: 320363.0
    estimated_rows: 0.113
    q_error: 2835070.796460177
  - node: Nested loop inner join (cost=2210 rows=0.0231) (actual time=121..18926 rows=6139
      loops=1)
    actual_rows: 6139.0
    estimated_rows: 0.0231
    q_error: 265757.57575757575
  - node: Nested loop inner join (cost=2209 rows=0.231) (actual time=121..18887 rows=23166
      loops=1)
    actual_rows: 23166.0
    estimated_rows: 0.231
    q_error: 100285.71428571428
  - node: Nested loop inner join (cost=2207 rows=0.0712) (actual time=121..18852 rows=909
      loops=1)
    actual_rows: 909.0
    estimated_rows: 0.0712
    q_error: 12766.85393258427
  - node: Nested loop inner join (cost=2206 rows=0.0474) (actual time=121..18848 rows=336
      loops=1)
    actual_rows: 336.0
    estimated_rows: 0.0474
    q_error: 7088.60759493671
  - node: Nested loop inner join (cost=2206 rows=0.0363) (actual time=15.3..18763
      rows=32808 loops=1)
    actual_rows: 32808.0
    estimated_rows: 0.0363
    q_error: 903801.652892562
  - node: Nested loop inner join (cost=2202 rows=0.363) (actual time=15.3..18739 rows=32808
      loops=1)
    actual_rows: 32808.0
    estimated_rows: 0.363
    q_error: 90380.1652892562
  - node: Nested loop inner join (cost=2184 rows=0.322) (actual time=15.2..17264 rows=34685
      loops=1)
    actual_rows: 34685.0
    estimated_rows: 0.322
    q_error: 107717.39130434782
  - node: Nested loop inner join (cost=2119 rows=6.45) (actual time=2.48..17130 rows=144670
      loops=1)
    actual_rows: 144670.0
    estimated_rows: 6.45
    q_error: 22429.457364341084
  - node: Nested loop inner join (cost=2054 rows=6.45) (actual time=2.47..16969 rows=144670
      loops=1)
    actual_rows: 144670.0
    estimated_rows: 6.45
    q_error: 22429.457364341084
  - node: Nested loop inner join (cost=1468 rows=58) (actual time=1.35..16547 rows=255750
      loops=1)
    actual_rows: 255750.0
    estimated_rows: 58.0
    q_error: 4409.482758620689
  - node: Inner hash join (no condition) (cost=2.66 rows=0.03) (actual time=0.0481..0.0569
      rows=1 loops=1)
    actual_rows: 1.0
    estimated_rows: 0.03
    q_error: 33.333333333333336
  - node: "Filter: (rt.`role` = 'actress') (cost=1.45 rows=1.2) (actual time=0.0052..0.0124
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.2
    q_error: 1.2
  - node: Table scan on rt (cost=1.45 rows=12) (actual time=0.0046..0.0101 rows=12
      loops=1)
    actual_rows: 12.0
    estimated_rows: 12.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: Inner hash join (no condition) (cost=1.3 rows=0.25) (actual time=0.0379..0.0389
      rows=1 loops=1)
    actual_rows: 1.0
    estimated_rows: 0.25
    q_error: 4.0
  - node: "Filter: (cct2.kind = 'complete+verified') (cost=0.65 rows=1) (actual time=0.0026..0.0031
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on cct2 (cost=0.65 rows=4) (actual time=0.0019..0.0025 rows=4
      loops=1)
    actual_rows: 4.0
    estimated_rows: 4.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: "Filter: (cct1.kind = 'cast') (cost=0.65 rows=1) (actual time=0.0234..0.0272
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on cct1 (cost=0.65 rows=4) (actual time=0.0216..0.0251 rows=4
      loops=1)
    actual_rows: 4.0
    estimated_rows: 4.0
    q_error: 1.0
  - node: "Filter: ((ci.note in ('(voice)','(voice: Japanese version)','(voice) (uncredited)','(voice:
      English version)')) and (ci.person_role_id is not null)) (cost=1370 rows=1935)
      (actual time=1.3..16534 rows=255750 loops=1)"
    actual_rows: 255750.0
    estimated_rows: 1935.0
    q_error: 132.1705426356589
  - node: Index lookup on ci using role_id_cast_info (role_id=rt.id) (cost=1370 rows=4836)
      (actual time=0.0255..15823 rows=7.45e+6 loops=1)
    actual_rows: 7450000.0
    estimated_rows: 4836.0
    q_error: 1540.5293631100083
  - node: 'Filter: (t.production_year between 2000 and 2010) (cost=0.25 rows=0.111)
      (actual time=0.00148..0.00152 rows=0.566 loops=255750)'
    actual_rows: 0.566
    estimated_rows: 0.111
    q_error: 5.0990990990990985
  - node: Single-row index lookup on t using PRIMARY (id=ci.movie_id) (cost=0.25 rows=1)
      (actual time=0.00131..0.00134 rows=1 loops=255750)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Single-row index lookup on chn using PRIMARY (id=ci.person_role_id) (cost=0.25
      rows=1) (actual time=935e-6..958e-6 rows=1 loops=144670)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: ((n.gender = 'f') and (n.`name` like '%An%')) (cost=0.25 rows=0.05)
      (actual time=787e-6..804e-6 rows=0.24 loops=144670)"
    actual_rows: 0.24
    estimated_rows: 0.05
    q_error: 4.8
  - node: Single-row index lookup on n using PRIMARY (id=ci.person_id) (cost=0.25
      rows=1) (actual time=373e-6..396e-6 rows=1 loops=144670)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: ((mi.info like 'Japan:%200%') or (mi.info like 'USA:%200%')) (cost=1.35
      rows=1.13) (actual time=0.0396..0.0424 rows=0.946 loops=34685)"
    actual_rows: 0.946
    estimated_rows: 1.13
    q_error: 1.1945031712473573
  - node: Index lookup on mi using movie_id_movie_info (movie_id=ci.movie_id) (cost=1.35
      rows=5.37) (actual time=0.0122..0.0404 rows=10.9 loops=34685)
    actual_rows: 10.9
    estimated_rows: 5.37
    q_error: 2.0297951582867784
  - node: "Filter: (it.info = 'release dates') (cost=0.251 rows=0.1) (actual time=473e-6..545e-6
      rows=1 loops=32808)"
    actual_rows: 1.0
    estimated_rows: 0.1
    q_error: 10.0
  - node: Single-row index lookup on it using PRIMARY (id=mi.info_type_id) (cost=0.251
      rows=1) (actual time=159e-6..182e-6 rows=1 loops=32808)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: 'Filter: ((cc.status_id = cct2.id) and (cc.subject_id = cct1.id)) (cost=0.416
      rows=1.3) (actual time=0.00246..0.00248 rows=0.0102 loops=32808)'
    actual_rows: 0.0102
    estimated_rows: 1.3
    q_error: 127.45098039215686
  - node: Index lookup on cc using movie_id_complete_cast (movie_id=ci.movie_id) (cost=0.416
      rows=1.3) (actual time=0.00232..0.00235 rows=0.0679 loops=32808)
    actual_rows: 0.0679
    estimated_rows: 1.3
    q_error: 19.14580265095729
  - node: Covering index lookup on an using person_id_aka_name (person_id=ci.person_id)
      (cost=0.415 rows=1.5) (actual time=0.00716..0.0106 rows=2.71 loops=336)
    actual_rows: 2.71
    estimated_rows: 1.5
    q_error: 1.8066666666666666
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=ci.movie_id)
      (cost=0.925 rows=3.24) (actual time=0.0075..0.0369 rows=25.5 loops=909)
    actual_rows: 25.5
    estimated_rows: 3.24
    q_error: 7.87037037037037
  - node: "Filter: (cn.country_code = '[us]') (cost=0.114 rows=0.1) (actual time=0.00155..0.00157
      rows=0.265 loops=23166)"
    actual_rows: 0.265
    estimated_rows: 0.1
    q_error: 2.65
  - node: Single-row index lookup on cn using PRIMARY (id=mc.company_id) (cost=0.114
      rows=1) (actual time=0.00132..0.00134 rows=1 loops=23166)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on pi using person_id_person_info (person_id=ci.person_id)
      (cost=4.81 rows=4.9) (actual time=0.0236..0.0773 rows=52.2 loops=6139)
    actual_rows: 52.2
    estimated_rows: 4.9
    q_error: 10.653061224489795
  - node: "Filter: (it3.info = 'trivia') (cost=0.0371 rows=0.1) (actual time=457e-6..476e-6
      rows=0.297 loops=320363)"
    actual_rows: 0.297
    estimated_rows: 0.1
    q_error: 2.9699999999999998
  - node: Single-row index lookup on it3 using PRIMARY (id=pi.info_type_id) (cost=0.0371
      rows=1) (actual time=271e-6..291e-6 rows=1 loops=320363)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mk using movie_id_movie_keyword (movie_id=ci.movie_id) (cost=5.43
      rows=11.5) (actual time=0.00966..0.094 rows=117 loops=95186)
    actual_rows: 117.0
    estimated_rows: 11.5
    q_error: 10.173913043478262
  - node: "Filter: (k.keyword = 'computer-animation') (cost=0.00903 rows=0.1) (actual
      time=0.00119..0.00119 rows=0.00201 loops=11.1e+6)"
    actual_rows: 0.00201
    estimated_rows: 0.1
    q_error: 49.75124378109453
  - node: Single-row index lookup on k using PRIMARY (id=mk.keyword_id) (cost=0.00903
      rows=1) (actual time=0.00102..0.00104 rows=1 loops=11.1e+6)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 30a\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(mi.info) AS movie_budget,\n       MIN(mi_idx.info) AS movie_votes,\n\
    \       MIN(n.name) AS writer,\n       MIN(t.title) AS complete_violent_movie\n
    FROM complete_cast AS cc,\n     comp_cast_type AS cct1,\n     comp_cast_type AS
    cct2,\n     cast_info AS ci,\n     info_type AS it1,\n     info_type AS it2,\n\
    \     keyword AS k,\n     movie_info AS mi,\n     movie_info_idx AS mi_idx,\n\
    \     movie_keyword AS mk,\n     name AS n,\n     title AS t\nWHERE cct1.kind
    IN ('cast',\n                    'crew')\n  AND cct2.kind ='complete+verified'\n\
    \  AND ci.note IN ('(writer)',\n                  '(head writer)',\n         \
    \         '(written by)',\n                  '(story)',\n                  '(story
    editor)')\n  AND it1.info = 'genres'\n  AND it2.info = 'votes'\n  AND k.keyword
    IN ('murder',\n                    'violence',\n                    'blood',\n\
    \                    'gore',\n                    'death',\n                 \
    \   'female-nudity',\n                    'hospital')\n  AND mi.info IN ('Horror',\n\
    \                  'Thriller')\n  AND n.gender = 'm'\n  AND t.production_year
    > 2000\n  AND t.id = mi.movie_id\n  AND t.id = mi_idx.movie_id\n  AND t.id = ci.movie_id\n\
    \  AND t.id = mk.movie_id\n  AND t.id = cc.movie_id\n  AND ci.movie_id = mi.movie_id\n\
    \  AND ci.movie_id = mi_idx.movie_id\n  AND ci.movie_id = mk.movie_id\n  AND ci.movie_id
    = cc.movie_id\n  AND mi.movie_id = mi_idx.movie_id\n  AND mi.movie_id = mk.movie_id\n\
    \  AND mi.movie_id = cc.movie_id\n  AND mi_idx.movie_id = mk.movie_id\n  AND mi_idx.movie_id
    = cc.movie_id\n  AND mk.movie_id = cc.movie_id\n  AND n.id = ci.person_id\n  AND
    it1.id = mi.info_type_id\n  AND it2.id = mi_idx.info_type_id\n  AND k.id = mk.keyword_id\n\
    \  AND cct1.id = cc.subject_id\n  AND cct2.id = cc.status_id"
  qep:
  - node: 'Aggregate: min(mi.info), min(mi_idx.info), min(n.`name`), min(t.title)
      (cost=20067 rows=1) (actual time=2905..2905 rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=20057 rows=96.8) (actual time=2632..2904 rows=757
      loops=1)
    actual_rows: 757.0
    estimated_rows: 96.8
    q_error: 7.820247933884298
  - node: Nested loop inner join (cost=19979 rows=194) (actual time=2632..2816 rows=34335
      loops=1)
    actual_rows: 34335.0
    estimated_rows: 194.0
    q_error: 176.98453608247422
  - node: Nested loop inner join (cost=18023 rows=16.8) (actual time=2632..2774 rows=274
      loops=1)
    actual_rows: 274.0
    estimated_rows: 16.8
    q_error: 16.30952380952381
  - node: Nested loop inner join (cost=17609 rows=168) (actual time=2632..2772 rows=384
      loops=1)
    actual_rows: 384.0
    estimated_rows: 168.0
    q_error: 2.2857142857142856
  - node: Nested loop inner join (cost=14220 rows=21.7) (actual time=2632..2638 rows=432
      loops=1)
    actual_rows: 432.0
    estimated_rows: 21.7
    q_error: 19.907834101382488
  - node: Nested loop inner join (cost=12534 rows=217) (actual time=2632..2636 rows=1303
      loops=1)
    actual_rows: 1303.0
    estimated_rows: 217.0
    q_error: 6.0046082949308754
  - node: Inner hash join (cct1.id = cc.subject_id) (cost=10343 rows=66.9) (actual
      time=2632..2632 rows=432 loops=1)
    actual_rows: 432.0
    estimated_rows: 66.9
    q_error: 6.4573991031390126
  - node: "Filter: (cct1.kind in ('cast','crew')) (cost=465e-6 rows=1) (actual time=0.0091..0.0163
      rows=2 loops=1)"
    actual_rows: 2.0
    estimated_rows: 1.0
    q_error: 2.0
  - node: Table scan on cct1 (cost=465e-6 rows=4) (actual time=0.0082..0.0137 rows=4
      loops=1)
    actual_rows: 4.0
    estimated_rows: 4.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: Nested loop inner join (cost=10315 rows=268) (actual time=24.1..2631 rows=432
      loops=1)
    actual_rows: 432.0
    estimated_rows: 268.0
    q_error: 1.6119402985074627
  - node: Nested loop inner join (cost=9619 rows=205) (actual time=0.109..2531 rows=49247
      loops=1)
    actual_rows: 49247.0
    estimated_rows: 205.0
    q_error: 240.22926829268292
  - node: Nested loop inner join (cost=8018 rows=616) (actual time=0.102..2416 rows=72258
      loops=1)
    actual_rows: 72258.0
    estimated_rows: 616.0
    q_error: 117.30194805194805
  - node: Inner hash join (no condition) (cost=12.2 rows=1.13) (actual time=0.0362..0.0685
      rows=1 loops=1)
    actual_rows: 1.0
    estimated_rows: 1.13
    q_error: 1.13
  - node: "Filter: (it1.info = 'genres') (cost=11.6 rows=11.3) (actual time=0.0069..0.0381
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 11.3
    q_error: 11.3
  - node: Table scan on it1 (cost=11.6 rows=113) (actual time=0.0062..0.0307 rows=113
      loops=1)
    actual_rows: 113.0
    estimated_rows: 113.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: "Filter: (cct2.kind = 'complete+verified') (cost=0.65 rows=1) (actual time=0.0203..0.0224
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on cct2 (cost=0.65 rows=4) (actual time=0.017..0.02 rows=4 loops=1)
    actual_rows: 4.0
    estimated_rows: 4.0
    q_error: 1.0
  - node: "Filter: (mi.info in ('Horror','Thriller')) (cost=686 rows=545) (actual
      time=0.0657..2412 rows=72258 loops=1)"
    actual_rows: 72258.0
    estimated_rows: 545.0
    q_error: 132.58348623853212
  - node: Index lookup on mi using info_type_id_movie_info (info_type_id=it1.id) (cost=686
      rows=2725) (actual time=0.0219..2223 rows=1.53e+6 loops=1)
    actual_rows: 1530000.0
    estimated_rows: 2725.0
    q_error: 561.4678899082569
  - node: 'Filter: (t.production_year > 2000) (cost=0.25 rows=0.333) (actual time=0.00142..0.00146
      rows=0.682 loops=72258)'
    actual_rows: 0.682
    estimated_rows: 0.333
    q_error: 2.0480480480480483
  - node: Single-row index lookup on t using PRIMARY (id=mi.movie_id) (cost=0.25 rows=1)
      (actual time=0.00127..0.00129 rows=1 loops=72258)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: 'Filter: (cc.status_id = cct2.id) (cost=0.326 rows=1.3) (actual time=0.00191..0.00191
      rows=0.00877 loops=49247)'
    actual_rows: 0.00877
    estimated_rows: 1.3
    q_error: 148.23261117445838
  - node: Index lookup on cc using movie_id_complete_cast (movie_id=mi.movie_id) (cost=0.326
      rows=1.3) (actual time=0.00179..0.00181 rows=0.0464 loops=49247)
    actual_rows: 0.0464
    estimated_rows: 1.3
    q_error: 28.01724137931035
  - node: Index lookup on mi_idx using movie_id_movie_info_idx (movie_id=mi.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00616..0.0105 rows=3.02 loops=432)
    actual_rows: 3.02
    estimated_rows: 3.24
    q_error: 1.0728476821192054
  - node: "Filter: (it2.info = 'votes') (cost=0.192 rows=0.1) (actual time=0.00138..0.00141
      rows=0.332 loops=1303)"
    actual_rows: 0.332
    estimated_rows: 0.1
    q_error: 3.32
  - node: Single-row index lookup on it2 using PRIMARY (id=mi_idx.info_type_id) (cost=0.192
      rows=1) (actual time=0.00113..0.00116 rows=1 loops=1303)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (ci.note in ('(writer)','(head writer)','(written by)','(story)','(story
      editor)')) (cost=3.87 rows=7.73) (actual time=0.203..0.31 rows=0.889 loops=432)"
    actual_rows: 0.889
    estimated_rows: 7.73
    q_error: 8.695163104611924
  - node: Index lookup on ci using movie_id_cast_info (movie_id=mi.movie_id) (cost=3.87
      rows=15.5) (actual time=0.00528..0.293 rows=122 loops=432)
    actual_rows: 122.0
    estimated_rows: 15.5
    q_error: 7.870967741935484
  - node: "Filter: (n.gender = 'm') (cost=0.0591 rows=0.1) (actual time=0.00308..0.00313
      rows=0.714 loops=384)"
    actual_rows: 0.714
    estimated_rows: 0.1
    q_error: 7.14
  - node: Single-row index lookup on n using PRIMARY (id=ci.person_id) (cost=0.0591
      rows=1) (actual time=0.00284..0.00287 rows=1 loops=384)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mk using movie_id_movie_keyword (movie_id=mi.movie_id) (cost=2.89
      rows=11.5) (actual time=0.0179..0.151 rows=125 loops=274)
    actual_rows: 125.0
    estimated_rows: 11.5
    q_error: 10.869565217391305
  - node: "Filter: (k.keyword in ('murder','violence','blood','gore','death','female-nudity','hospital'))
      (cost=0.00765 rows=0.5) (actual time=0.00248..0.00248 rows=0.022 loops=34335)"
    actual_rows: 0.022
    estimated_rows: 0.5
    q_error: 22.72727272727273
  - node: Single-row index lookup on k using PRIMARY (id=mk.keyword_id) (cost=0.00765
      rows=1) (actual time=0.00222..0.00224 rows=1 loops=34335)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 30b\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(mi.info) AS movie_budget,\n       MIN(mi_idx.info) AS movie_votes,\n\
    \       MIN(n.name) AS writer,\n       MIN(t.title) AS complete_gore_movie\nFROM
    complete_cast AS cc,\n     comp_cast_type AS cct1,\n     comp_cast_type AS cct2,\n\
    \     cast_info AS ci,\n     info_type AS it1,\n     info_type AS it2,\n     keyword
    AS k,\n     movie_info AS mi,\n     movie_info_idx AS mi_idx,\n     movie_keyword
    AS mk,\n     name AS n,\n     title AS t\nWHERE cct1.kind IN ('cast',\n      \
    \              'crew')\n  AND cct2.kind ='complete+verified'\n  AND ci.note IN
    ('(writer)',\n                  '(head writer)',\n                  '(written
    by)',\n                  '(story)',\n                  '(story editor)')\n  AND
    it1.info = 'genres'\n  AND it2.info = 'votes'\n  AND k.keyword IN ('murder',\n\
    \                    'violence',\n                    'blood',\n             \
    \       'gore',\n                    'death',\n                    'female-nudity',\n\
    \                    'hospital')\n  AND mi.info IN ('Horror',\n              \
    \    'Thriller')\n  AND n.gender = 'm'\n  AND t.production_year > 2000\n  AND
    (t.title LIKE '%Freddy%'\n       OR t.title LIKE '%Jason%'\n       OR t.title
    LIKE 'Saw%')\n  AND t.id = mi.movie_id\n  AND t.id = mi_idx.movie_id\n  AND t.id
    = ci.movie_id\n  AND t.id = mk.movie_id\n  AND t.id = cc.movie_id\n  AND ci.movie_id
    = mi.movie_id\n  AND ci.movie_id = mi_idx.movie_id\n  AND ci.movie_id = mk.movie_id\n\
    \  AND ci.movie_id = cc.movie_id\n  AND mi.movie_id = mi_idx.movie_id\n  AND mi.movie_id
    = mk.movie_id\n  AND mi.movie_id = cc.movie_id\n  AND mi_idx.movie_id = mk.movie_id\n\
    \  AND mi_idx.movie_id = cc.movie_id\n  AND mk.movie_id = cc.movie_id\n  AND n.id
    = ci.person_id\n  AND it1.id = mi.info_type_id\n  AND it2.id = mi_idx.info_type_id\n\
    \  AND k.id = mk.keyword_id\n  AND cct1.id = cc.subject_id\n  AND cct2.id = cc.status_id"
  qep:
  - node: 'Aggregate: min(mi.info), min(mi_idx.info), min(n.`name`), min(t.title)
      (cost=12729 rows=1) (actual time=2901..2901 rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=12726 rows=28.8) (actual time=2897..2901 rows=28
      loops=1)
    actual_rows: 28.0
    estimated_rows: 28.8
    q_error: 1.0285714285714287
  - node: Nested loop inner join (cost=12703 rows=57.6) (actual time=2897..2899 rows=1060
      loops=1)
    actual_rows: 1060.0
    estimated_rows: 57.6
    q_error: 18.40277777777778
  - node: Nested loop inner join (cost=12121 rows=4.99) (actual time=2897..2898 rows=7
      loops=1)
    actual_rows: 7.0
    estimated_rows: 4.99
    q_error: 1.4028056112224447
  - node: Nested loop inner join (cost=11998 rows=49.9) (actual time=2897..2898 rows=7
      loops=1)
    actual_rows: 7.0
    estimated_rows: 49.9
    q_error: 7.128571428571428
  - node: Nested loop inner join (cost=10989 rows=6.46) (actual time=2897..2897 rows=3
      loops=1)
    actual_rows: 3.0
    estimated_rows: 6.46
    q_error: 2.1533333333333333
  - node: Nested loop inner join (cost=10487 rows=64.6) (actual time=2897..2897 rows=9
      loops=1)
    actual_rows: 9.0
    estimated_rows: 64.6
    q_error: 7.177777777777777
  - node: Inner hash join (cct1.id = cc.subject_id) (cost=9835 rows=19.9) (actual
      time=2897..2897 rows=3 loops=1)
    actual_rows: 3.0
    estimated_rows: 19.9
    q_error: 6.633333333333333
  - node: "Filter: (cct1.kind in ('cast','crew')) (cost=950e-6 rows=1) (actual time=0.0107..0.0146
      rows=2 loops=1)"
    actual_rows: 2.0
    estimated_rows: 1.0
    q_error: 2.0
  - node: Table scan on cct1 (cost=950e-6 rows=4) (actual time=0.0096..0.0123 rows=4
      loops=1)
    actual_rows: 4.0
    estimated_rows: 4.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: Nested loop inner join (cost=9826 rows=79.7) (actual time=765..2897 rows=3
      loops=1)
    actual_rows: 3.0
    estimated_rows: 79.7
    q_error: 26.566666666666666
  - node: Nested loop inner join (cost=9619 rows=61.1) (actual time=373..2897 rows=46
      loops=1)
    actual_rows: 46.0
    estimated_rows: 61.1
    q_error: 1.3282608695652174
  - node: Nested loop inner join (cost=8018 rows=616) (actual time=0.101..2744 rows=72258
      loops=1)
    actual_rows: 72258.0
    estimated_rows: 616.0
    q_error: 117.30194805194805
  - node: Inner hash join (no condition) (cost=12.2 rows=1.13) (actual time=0.0368..0.0728
      rows=1 loops=1)
    actual_rows: 1.0
    estimated_rows: 1.13
    q_error: 1.13
  - node: "Filter: (it1.info = 'genres') (cost=11.6 rows=11.3) (actual time=0.0065..0.0412
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 11.3
    q_error: 11.3
  - node: Table scan on it1 (cost=11.6 rows=113) (actual time=0.0059..0.0342 rows=113
      loops=1)
    actual_rows: 113.0
    estimated_rows: 113.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: "Filter: (cct2.kind = 'complete+verified') (cost=0.65 rows=1) (actual time=0.0203..0.0228
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on cct2 (cost=0.65 rows=4) (actual time=0.017..0.0204 rows=4
      loops=1)
    actual_rows: 4.0
    estimated_rows: 4.0
    q_error: 1.0
  - node: "Filter: (mi.info in ('Horror','Thriller')) (cost=686 rows=545) (actual
      time=0.0635..2740 rows=72258 loops=1)"
    actual_rows: 72258.0
    estimated_rows: 545.0
    q_error: 132.58348623853212
  - node: Index lookup on mi using info_type_id_movie_info (info_type_id=it1.id) (cost=686
      rows=2725) (actual time=0.0208..2511 rows=1.53e+6 loops=1)
    actual_rows: 1530000.0
    estimated_rows: 2725.0
    q_error: 561.4678899082569
  - node: "Filter: ((t.production_year > 2000) and ((t.title like '%Freddy%') or (t.title
      like '%Jason%') or (t.title like 'Saw%'))) (cost=0.25 rows=0.0992) (actual time=0.002..0.002
      rows=637e-6 loops=72258)"
    actual_rows: 0.000637
    estimated_rows: 0.0992
    q_error: 155.72998430141288
  - node: Single-row index lookup on t using PRIMARY (id=mi.movie_id) (cost=0.25 rows=1)
      (actual time=0.00144..0.00146 rows=1 loops=72258)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: 'Filter: (cc.status_id = cct2.id) (cost=0.326 rows=1.3) (actual time=0.00515..0.00522
      rows=0.0652 loops=46)'
    actual_rows: 0.0652
    estimated_rows: 1.3
    q_error: 19.938650306748468
  - node: Index lookup on cc using movie_id_complete_cast (movie_id=mi.movie_id) (cost=0.326
      rows=1.3) (actual time=0.0047..0.00493 rows=0.304 loops=46)
    actual_rows: 0.304
    estimated_rows: 1.3
    q_error: 4.276315789473684
  - node: Index lookup on mi_idx using movie_id_movie_info_idx (movie_id=mi.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00977..0.0148 rows=3 loops=3)
    actual_rows: 3.0
    estimated_rows: 3.24
    q_error: 1.08
  - node: "Filter: (it2.info = 'votes') (cost=0.192 rows=0.1) (actual time=0.00186..0.00188
      rows=0.333 loops=9)"
    actual_rows: 0.333
    estimated_rows: 0.1
    q_error: 3.33
  - node: Single-row index lookup on it2 using PRIMARY (id=mi_idx.info_type_id) (cost=0.192
      rows=1) (actual time=0.00156..0.0016 rows=1 loops=9)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (ci.note in ('(writer)','(head writer)','(written by)','(story)','(story
      editor)')) (cost=3.87 rows=7.73) (actual time=0.124..0.268 rows=2.33 loops=3)"
    actual_rows: 2.33
    estimated_rows: 7.73
    q_error: 3.3175965665236054
  - node: Index lookup on ci using movie_id_cast_info (movie_id=mi.movie_id) (cost=3.87
      rows=15.5) (actual time=0.00617..0.254 rows=109 loops=3)
    actual_rows: 109.0
    estimated_rows: 15.5
    q_error: 7.032258064516129
  - node: "Filter: (n.gender = 'm') (cost=0.0591 rows=0.1) (actual time=0.00354..0.00363
      rows=1 loops=7)"
    actual_rows: 1.0
    estimated_rows: 0.1
    q_error: 10.0
  - node: Single-row index lookup on n using PRIMARY (id=ci.person_id) (cost=0.0591
      rows=1) (actual time=0.00324..0.00327 rows=1 loops=7)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mk using movie_id_movie_keyword (movie_id=mi.movie_id) (cost=2.89
      rows=11.5) (actual time=0.0164..0.15 rows=151 loops=7)
    actual_rows: 151.0
    estimated_rows: 11.5
    q_error: 13.130434782608695
  - node: "Filter: (k.keyword in ('murder','violence','blood','gore','death','female-nudity','hospital'))
      (cost=0.00767 rows=0.5) (actual time=0.00212..0.00212 rows=0.0264 loops=1060)"
    actual_rows: 0.0264
    estimated_rows: 0.5
    q_error: 18.93939393939394
  - node: Single-row index lookup on k using PRIMARY (id=mk.keyword_id) (cost=0.00767
      rows=1) (actual time=0.00188..0.0019 rows=1 loops=1060)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 30c\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(mi.info) AS movie_budget,\n       MIN(mi_idx.info) AS movie_votes,\n\
    \       MIN(n.name) AS writer,\n       MIN(t.title) AS complete_violent_movie\n
    FROM complete_cast AS cc,\n     comp_cast_type AS cct1,\n     comp_cast_type AS
    cct2,\n     cast_info AS ci,\n     info_type AS it1,\n     info_type AS it2,\n\
    \     keyword AS k,\n     movie_info AS mi,\n     movie_info_idx AS mi_idx,\n\
    \     movie_keyword AS mk,\n     name AS n,\n     title AS t\nWHERE cct1.kind
    = 'cast'\n  AND cct2.kind ='complete+verified'\n  AND ci.note IN ('(writer)',\n\
    \                  '(head writer)',\n                  '(written by)',\n     \
    \             '(story)',\n                  '(story editor)')\n  AND it1.info
    = 'genres'\n  AND it2.info = 'votes'\n  AND k.keyword IN ('murder',\n        \
    \            'violence',\n                    'blood',\n                    'gore',\n\
    \                    'death',\n                    'female-nudity',\n        \
    \            'hospital')\n  AND mi.info IN ('Horror',\n                  'Action',\n\
    \                  'Sci-Fi',\n                  'Thriller',\n                \
    \  'Crime',\n                  'War')\n  AND n.gender = 'm'\n  AND t.id = mi.movie_id\n\
    \  AND t.id = mi_idx.movie_id\n  AND t.id = ci.movie_id\n  AND t.id = mk.movie_id\n\
    \  AND t.id = cc.movie_id\n  AND ci.movie_id = mi.movie_id\n  AND ci.movie_id
    = mi_idx.movie_id\n  AND ci.movie_id = mk.movie_id\n  AND ci.movie_id = cc.movie_id\n\
    \  AND mi.movie_id = mi_idx.movie_id\n  AND mi.movie_id = mk.movie_id\n  AND mi.movie_id
    = cc.movie_id\n  AND mi_idx.movie_id = mk.movie_id\n  AND mi_idx.movie_id = cc.movie_id\n\
    \  AND mk.movie_id = cc.movie_id\n  AND n.id = ci.person_id\n  AND it1.id = mi.info_type_id\n\
    \  AND it2.id = mi_idx.info_type_id\n  AND k.id = mk.keyword_id\n  AND cct1.id
    = cc.subject_id\n  AND cct2.id = cc.status_id"
  qep:
  - node: 'Aggregate: min(mi.info), min(mi_idx.info), min(n.`name`), min(t.title)
      (cost=86194 rows=1) (actual time=6696..6696 rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=86122 rows=726) (actual time=13.8..6688 rows=8024
      loops=1)
    actual_rows: 8024.0
    estimated_rows: 726.0
    q_error: 11.052341597796143
  - node: Nested loop inner join (cost=85532 rows=1452) (actual time=9.2..5691 rows=338545
      loops=1)
    actual_rows: 338545.0
    estimated_rows: 1452.0
    q_error: 233.1577134986226
  - node: Nested loop inner join (cost=70863 rows=126) (actual time=9.19..5271 rows=4385
      loops=1)
    actual_rows: 4385.0
    estimated_rows: 126.0
    q_error: 34.801587301587304
  - node: Nested loop inner join (cost=67760 rows=1259) (actual time=3.39..5247 rows=7247
      loops=1)
    actual_rows: 7247.0
    estimated_rows: 1259.0
    q_error: 5.756155679110405
  - node: Nested loop inner join (cost=42337 rows=163) (actual time=0.2..3530 rows=10291
      loops=1)
    actual_rows: 10291.0
    estimated_rows: 163.0
    q_error: 63.13496932515337
  - node: Nested loop inner join (cost=41936 rows=163) (actual time=0.195..3510 rows=10291
      loops=1)
    actual_rows: 10291.0
    estimated_rows: 163.0
    q_error: 63.13496932515337
  - node: Nested loop inner join (cost=29292 rows=1627) (actual time=0.188..3458 rows=31054
      loops=1)
    actual_rows: 31054.0
    estimated_rows: 1627.0
    q_error: 19.086662569145666
  - node: Nested loop inner join (cost=12856 rows=502) (actual time=0.176..3368 rows=10327
      loops=1)
    actual_rows: 10327.0
    estimated_rows: 502.0
    q_error: 20.57171314741036
  - node: Nested loop inner join (cost=7787 rows=385) (actual time=0.134..2914 rows=186594
      loops=1)
    actual_rows: 186594.0
    estimated_rows: 385.0
    q_error: 484.65974025974026
  - node: Inner hash join (no condition) (cost=12 rows=0.283) (actual time=0.0809..0.112
      rows=1 loops=1)
    actual_rows: 1.0
    estimated_rows: 0.283
    q_error: 3.53356890459364
  - node: "Filter: (it1.info = 'genres') (cost=11.6 rows=11.3) (actual time=0.0066..0.0364
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 11.3
    q_error: 11.3
  - node: Table scan on it1 (cost=11.6 rows=113) (actual time=0.0061..0.0301 rows=113
      loops=1)
    actual_rows: 113.0
    estimated_rows: 113.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: Inner hash join (no condition) (cost=1.3 rows=0.25) (actual time=0.068..0.0688
      rows=1 loops=1)
    actual_rows: 1.0
    estimated_rows: 0.25
    q_error: 4.0
  - node: "Filter: (cct2.kind = 'complete+verified') (cost=0.65 rows=1) (actual time=0.0042..0.0047
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on cct2 (cost=0.65 rows=4) (actual time=0.0032..0.0039 rows=4
      loops=1)
    actual_rows: 4.0
    estimated_rows: 4.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: "Filter: (cct1.kind = 'cast') (cost=0.65 rows=1) (actual time=0.0505..0.0544
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on cct1 (cost=0.65 rows=4) (actual time=0.0482..0.0514 rows=4
      loops=1)
    actual_rows: 4.0
    estimated_rows: 4.0
    q_error: 1.0
  - node: "Filter: (mi.info in ('Horror','Action','Sci-Fi','Thriller','Crime','War'))
      (cost=693 rows=1362) (actual time=0.0524..2904 rows=186594 loops=1)"
    actual_rows: 186594.0
    estimated_rows: 1362.0
    q_error: 137.0
  - node: Index lookup on mi using info_type_id_movie_info (info_type_id=it1.id) (cost=693
      rows=2725) (actual time=0.0236..2617 rows=1.53e+6 loops=1)
    actual_rows: 1530000.0
    estimated_rows: 2725.0
    q_error: 561.4678899082569
  - node: 'Filter: ((cc.status_id = cct2.id) and (cc.subject_id = cct1.id)) (cost=0.326
      rows=1.3) (actual time=0.00227..0.00233 rows=0.0553 loops=186594)'
    actual_rows: 0.0553
    estimated_rows: 1.3
    q_error: 23.508137432188065
  - node: Index lookup on cc using movie_id_complete_cast (movie_id=mi.movie_id) (cost=0.326
      rows=1.3) (actual time=0.0021..0.00219 rows=0.182 loops=186594)
    actual_rows: 0.182
    estimated_rows: 1.3
    q_error: 7.142857142857143
  - node: Index lookup on mi_idx using movie_id_movie_info_idx (movie_id=mi.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00458..0.00837 rows=3.01 loops=10327)
    actual_rows: 3.01
    estimated_rows: 3.24
    q_error: 1.0764119601328905
  - node: "Filter: (it2.info = 'votes') (cost=0.192 rows=0.1) (actual time=0.00151..0.00154
      rows=0.331 loops=31054)"
    actual_rows: 0.331
    estimated_rows: 0.1
    q_error: 3.31
  - node: Single-row index lookup on it2 using PRIMARY (id=mi_idx.info_type_id) (cost=0.192
      rows=1) (actual time=0.00118..0.0012 rows=1 loops=31054)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Single-row index lookup on t using PRIMARY (id=mi.movie_id) (cost=0.0591
      rows=1) (actual time=0.00167..0.0017 rows=1 loops=10291)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (ci.note in ('(writer)','(head writer)','(written by)','(story)','(story
      editor)')) (cost=3.87 rows=7.73) (actual time=0.13..0.167 rows=0.704 loops=10291)"
    actual_rows: 0.704
    estimated_rows: 7.73
    q_error: 10.980113636363638
  - node: Index lookup on ci using movie_id_cast_info (movie_id=mi.movie_id) (cost=3.87
      rows=15.5) (actual time=0.00467..0.157 rows=66.8 loops=10291)
    actual_rows: 66.8
    estimated_rows: 15.5
    q_error: 4.309677419354839
  - node: "Filter: (n.gender = 'm') (cost=0.0591 rows=0.1) (actual time=0.00301..0.00307
      rows=0.605 loops=7247)"
    actual_rows: 0.605
    estimated_rows: 0.1
    q_error: 6.05
  - node: Single-row index lookup on n using PRIMARY (id=ci.person_id) (cost=0.0591
      rows=1) (actual time=0.00269..0.00271 rows=1 loops=7247)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mk using movie_id_movie_keyword (movie_id=mi.movie_id) (cost=2.89
      rows=11.5) (actual time=0.0163..0.0919 rows=77.2 loops=4385)
    actual_rows: 77.2
    estimated_rows: 11.5
    q_error: 6.71304347826087
  - node: "Filter: (k.keyword in ('murder','violence','blood','gore','death','female-nudity','hospital'))
      (cost=0.00765 rows=0.5) (actual time=0.00286..0.00286 rows=0.0237 loops=338545)"
    actual_rows: 0.0237
    estimated_rows: 0.5
    q_error: 21.09704641350211
  - node: Single-row index lookup on k using PRIMARY (id=mk.keyword_id) (cost=0.00765
      rows=1) (actual time=0.00256..0.00259 rows=1 loops=338545)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 31a\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(mi.info) AS movie_budget,\n       MIN(mi_idx.info) AS movie_votes,\n\
    \       MIN(n.name) AS writer,\n       MIN(t.title) AS violent_liongate_movie\n
    FROM cast_info AS ci,\n     company_name AS cn,\n     info_type AS it1,\n    \
    \ info_type AS it2,\n     keyword AS k,\n     movie_companies AS mc,\n     movie_info
    AS mi,\n     movie_info_idx AS mi_idx,\n     movie_keyword AS mk,\n     name AS
    n,\n     title AS t\nWHERE ci.note IN ('(writer)',\n                  '(head writer)',\n\
    \                  '(written by)',\n                  '(story)',\n           \
    \       '(story editor)')\n  AND cn.name LIKE 'Lionsgate%'\n  AND it1.info = 'genres'\n\
    \  AND it2.info = 'votes'\n  AND k.keyword IN ('murder',\n                   \
    \ 'violence',\n                    'blood',\n                    'gore',\n   \
    \                 'death',\n                    'female-nudity',\n           \
    \         'hospital')\n  AND mi.info IN ('Horror',\n                  'Thriller')\n\
    \  AND n.gender = 'm'\n  AND t.id = mi.movie_id\n  AND t.id = mi_idx.movie_id\n\
    \  AND t.id = ci.movie_id\n  AND t.id = mk.movie_id\n  AND t.id = mc.movie_id\n\
    \  AND ci.movie_id = mi.movie_id\n  AND ci.movie_id = mi_idx.movie_id\n  AND ci.movie_id
    = mk.movie_id\n  AND ci.movie_id = mc.movie_id\n  AND mi.movie_id = mi_idx.movie_id\n\
    \  AND mi.movie_id = mk.movie_id\n  AND mi.movie_id = mc.movie_id\n  AND mi_idx.movie_id
    = mk.movie_id\n  AND mi_idx.movie_id = mc.movie_id\n  AND mk.movie_id = mc.movie_id\n\
    \  AND n.id = ci.person_id\n  AND it1.id = mi.info_type_id\n  AND it2.id = mi_idx.info_type_id\n\
    \  AND k.id = mk.keyword_id\n  AND cn.id = mc.company_id"
  qep:
  - node: 'Aggregate: min(mi.info), min(mi_idx.info), min(n.`name`), min(t.title)
      (cost=36085 rows=1) (actual time=3945..3945 rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=35764 rows=3211) (actual time=236..3944 rows=1273
      loops=1)
    actual_rows: 1273.0
    estimated_rows: 3211.0
    q_error: 2.5223880597014925
  - node: Nested loop inner join (cost=35102 rows=6422) (actual time=236..3829 rows=47262
      loops=1)
    actual_rows: 47262.0
    estimated_rows: 6422.0
    q_error: 7.359389598255995
  - node: Nested loop inner join (cost=32854 rows=557) (actual time=231..3775 rows=439
      loops=1)
    actual_rows: 439.0
    estimated_rows: 557.0
    q_error: 1.2687927107061503
  - node: Nested loop inner join (cost=32166 rows=5565) (actual time=231..3773 rows=588
      loops=1)
    actual_rows: 588.0
    estimated_rows: 5565.0
    q_error: 9.464285714285714
  - node: Nested loop inner join (cost=28270 rows=720) (actual time=45..3636 rows=661
      loops=1)
    actual_rows: 661.0
    estimated_rows: 720.0
    q_error: 1.0892586989409985
  - node: Nested loop inner join (cost=28181 rows=720) (actual time=45..3635 rows=661
      loops=1)
    actual_rows: 661.0
    estimated_rows: 720.0
    q_error: 1.0892586989409985
  - node: Nested loop inner join (cost=27034 rows=6477) (actual time=0.127..3324 rows=229623
      loops=1)
    actual_rows: 229623.0
    estimated_rows: 6477.0
    q_error: 35.452061139416394
  - node: Nested loop inner join (cost=24767 rows=1997) (actual time=0.113..2948 rows=39066
      loops=1)
    actual_rows: 39066.0
    estimated_rows: 1997.0
    q_error: 19.56234351527291
  - node: Nested loop inner join (cost=17778 rows=19969) (actual time=0.106..2823
      rows=117278 loops=1)
    actual_rows: 117278.0
    estimated_rows: 19969.0
    q_error: 5.873003154890079
  - node: Nested loop inner join (cost=10789 rows=6158) (actual time=0.0936..2514
      rows=72258 loops=1)
    actual_rows: 72258.0
    estimated_rows: 6158.0
    q_error: 11.734004546930821
  - node: "Filter: (it1.info = 'genres') (cost=11.6 rows=11.3) (actual time=0.0241..0.064
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 11.3
    q_error: 11.3
  - node: Table scan on it1 (cost=11.6 rows=113) (actual time=0.0216..0.054 rows=113
      loops=1)
    actual_rows: 113.0
    estimated_rows: 113.0
    q_error: 1.0
  - node: "Filter: (mi.info in ('Horror','Thriller')) (cost=686 rows=545) (actual
      time=0.0687..2510 rows=72258 loops=1)"
    actual_rows: 72258.0
    estimated_rows: 545.0
    q_error: 132.58348623853212
  - node: Index lookup on mi using info_type_id_movie_info (info_type_id=it1.id) (cost=686
      rows=2725) (actual time=0.0218..2313 rows=1.53e+6 loops=1)
    actual_rows: 1530000.0
    estimated_rows: 2725.0
    q_error: 561.4678899082569
  - node: Index lookup on mi_idx using movie_id_movie_info_idx (movie_id=mi.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.0025..0.0041 rows=1.62 loops=72258)
    actual_rows: 1.62
    estimated_rows: 3.24
    q_error: 2.0
  - node: "Filter: (it2.info = 'votes') (cost=0.25 rows=0.1) (actual time=924e-6..952e-6
      rows=0.333 loops=117278)"
    actual_rows: 0.333
    estimated_rows: 0.1
    q_error: 3.33
  - node: Single-row index lookup on it2 using PRIMARY (id=mi_idx.info_type_id) (cost=0.25
      rows=1) (actual time=707e-6..729e-6 rows=1 loops=117278)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=mi.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00533..0.00922 rows=5.88 loops=39066)
    actual_rows: 5.88
    estimated_rows: 3.24
    q_error: 1.8148148148148147
  - node: "Filter: (cn.`name` like 'Lionsgate%') (cost=0.0771 rows=0.111) (actual
      time=0.00127..0.00127 rows=0.00288 loops=229623)"
    actual_rows: 0.00288
    estimated_rows: 0.111
    q_error: 38.541666666666664
  - node: Single-row index lookup on cn using PRIMARY (id=mc.company_id) (cost=0.0771
      rows=1) (actual time=0.00108..0.0011 rows=1 loops=229623)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Single-row index lookup on t using PRIMARY (id=mi.movie_id) (cost=0.0239
      rows=1) (actual time=0.00182..0.00185 rows=1 loops=661)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (ci.note in ('(writer)','(head writer)','(written by)','(story)','(story
      editor)')) (cost=3.87 rows=7.73) (actual time=0.15..0.207 rows=0.89 loops=661)"
    actual_rows: 0.89
    estimated_rows: 7.73
    q_error: 8.685393258426966
  - node: Index lookup on ci using movie_id_cast_info (movie_id=mi.movie_id) (cost=3.87
      rows=15.5) (actual time=0.00486..0.192 rows=93.7 loops=661)
    actual_rows: 93.7
    estimated_rows: 15.5
    q_error: 6.04516129032258
  - node: "Filter: (n.gender = 'm') (cost=0.0238 rows=0.1) (actual time=0.00277..0.00283
      rows=0.747 loops=588)"
    actual_rows: 0.747
    estimated_rows: 0.1
    q_error: 7.47
  - node: Single-row index lookup on n using PRIMARY (id=ci.person_id) (cost=0.0238
      rows=1) (actual time=0.0024..0.00243 rows=1 loops=588)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mk using movie_id_movie_keyword (movie_id=mi.movie_id) (cost=2.89
      rows=11.5) (actual time=0.0158..0.117 rows=108 loops=439)
    actual_rows: 108.0
    estimated_rows: 11.5
    q_error: 9.391304347826088
  - node: "Filter: (k.keyword in ('murder','violence','blood','gore','death','female-nudity','hospital'))
      (cost=0.00308 rows=0.5) (actual time=0.00234..0.00234 rows=0.0269 loops=47262)"
    actual_rows: 0.0269
    estimated_rows: 0.5
    q_error: 18.587360594795538
  - node: Single-row index lookup on k using PRIMARY (id=mk.keyword_id) (cost=0.00308
      rows=1) (actual time=0.00206..0.00208 rows=1 loops=47262)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 31b\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(mi.info) AS movie_budget,\n       MIN(mi_idx.info) AS movie_votes,\n\
    \       MIN(n.name) AS writer,\n       MIN(t.title) AS violent_liongate_movie\n
    FROM cast_info AS ci,\n     company_name AS cn,\n     info_type AS it1,\n    \
    \ info_type AS it2,\n     keyword AS k,\n     movie_companies AS mc,\n     movie_info
    AS mi,\n     movie_info_idx AS mi_idx,\n     movie_keyword AS mk,\n     name AS
    n,\n     title AS t\nWHERE ci.note IN ('(writer)',\n                  '(head writer)',\n\
    \                  '(written by)',\n                  '(story)',\n           \
    \       '(story editor)')\n  AND cn.name LIKE 'Lionsgate%'\n  AND it1.info = 'genres'\n\
    \  AND it2.info = 'votes'\n  AND k.keyword IN ('murder',\n                   \
    \ 'violence',\n                    'blood',\n                    'gore',\n   \
    \                 'death',\n                    'female-nudity',\n           \
    \         'hospital')\n  AND mc.note LIKE '%(Blu-ray)%'\n  AND mi.info IN ('Horror',\n\
    \                  'Thriller')\n  AND n.gender = 'm'\n  AND t.production_year
    > 2000\n  AND (t.title LIKE '%Freddy%'\n       OR t.title LIKE '%Jason%'\n   \
    \    OR t.title LIKE 'Saw%')\n  AND t.id = mi.movie_id\n  AND t.id = mi_idx.movie_id\n\
    \  AND t.id = ci.movie_id\n  AND t.id = mk.movie_id\n  AND t.id = mc.movie_id\n\
    \  AND ci.movie_id = mi.movie_id\n  AND ci.movie_id = mi_idx.movie_id\n  AND ci.movie_id
    = mk.movie_id\n  AND ci.movie_id = mc.movie_id\n  AND mi.movie_id = mi_idx.movie_id\n\
    \  AND mi.movie_id = mk.movie_id\n  AND mi.movie_id = mc.movie_id\n  AND mi_idx.movie_id
    = mk.movie_id\n  AND mi_idx.movie_id = mc.movie_id\n  AND mk.movie_id = mc.movie_id\n\
    \  AND n.id = ci.person_id\n  AND it1.id = mi.info_type_id\n  AND it2.id = mi_idx.info_type_id\n\
    \  AND k.id = mk.keyword_id\n  AND cn.id = mc.company_id"
  qep:
  - node: 'Aggregate: min(mi.info), min(mi_idx.info), min(n.`name`), min(t.title)
      (cost=13860 rows=1) (actual time=2527..2527 rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=13856 rows=35.4) (actual time=1692..2527 rows=84
      loops=1)
    actual_rows: 84.0
    estimated_rows: 35.4
    q_error: 2.3728813559322033
  - node: Nested loop inner join (cost=13849 rows=70.8) (actual time=1691..2520 rows=2686
      loops=1)
    actual_rows: 2686.0
    estimated_rows: 70.8
    q_error: 37.93785310734464
  - node: Nested loop inner join (cost=13824 rows=6.13) (actual time=1691..2517 rows=19
      loops=1)
    actual_rows: 19.0
    estimated_rows: 6.13
    q_error: 3.0995106035889073
  - node: Nested loop inner join (cost=13813 rows=61.3) (actual time=1691..2517 rows=19
      loops=1)
    actual_rows: 19.0
    estimated_rows: 61.3
    q_error: 3.2263157894736842
  - node: Nested loop inner join (cost=13770 rows=7.93) (actual time=1691..2514 rows=11
      loops=1)
    actual_rows: 11.0
    estimated_rows: 7.93
    q_error: 1.3871374527112232
  - node: Nested loop inner join (cost=13742 rows=79.3) (actual time=1691..2514 rows=33
      loops=1)
    actual_rows: 33.0
    estimated_rows: 79.3
    q_error: 2.403030303030303
  - node: Nested loop inner join (cost=13715 rows=24.5) (actual time=1691..2514 rows=11
      loops=1)
    actual_rows: 11.0
    estimated_rows: 24.5
    q_error: 2.227272727272727
  - node: Nested loop inner join (cost=13637 rows=220) (actual time=759..2514 rows=32
      loops=1)
    actual_rows: 32.0
    estimated_rows: 220.0
    q_error: 6.875
  - node: Nested loop inner join (cost=12944 rows=611) (actual time=359..2513 rows=46
      loops=1)
    actual_rows: 46.0
    estimated_rows: 611.0
    q_error: 13.282608695652174
  - node: Nested loop inner join (cost=10789 rows=6158) (actual time=0.09..2389 rows=72258
      loops=1)
    actual_rows: 72258.0
    estimated_rows: 6158.0
    q_error: 11.734004546930821
  - node: "Filter: (it1.info = 'genres') (cost=11.6 rows=11.3) (actual time=0.0215..0.154
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 11.3
    q_error: 11.3
  - node: Table scan on it1 (cost=11.6 rows=113) (actual time=0.019..0.122 rows=113
      loops=1)
    actual_rows: 113.0
    estimated_rows: 113.0
    q_error: 1.0
  - node: "Filter: (mi.info in ('Horror','Thriller')) (cost=686 rows=545) (actual
      time=0.0679..2386 rows=72258 loops=1)"
    actual_rows: 72258.0
    estimated_rows: 545.0
    q_error: 132.58348623853212
  - node: Index lookup on mi using info_type_id_movie_info (info_type_id=it1.id) (cost=686
      rows=2725) (actual time=0.0214..2197 rows=1.53e+6 loops=1)
    actual_rows: 1530000.0
    estimated_rows: 2725.0
    q_error: 561.4678899082569
  - node: "Filter: ((t.production_year > 2000) and ((t.title like '%Freddy%') or (t.title
      like '%Jason%') or (t.title like 'Saw%'))) (cost=0.25 rows=0.0992) (actual time=0.00163..0.00163
      rows=637e-6 loops=72258)"
    actual_rows: 0.000637
    estimated_rows: 0.0992
    q_error: 155.72998430141288
  - node: Single-row index lookup on t using PRIMARY (id=mi.movie_id) (cost=0.25 rows=1)
      (actual time=0.00119..0.00121 rows=1 loops=72258)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (mc.note like '%(Blu-ray)%') (cost=0.811 rows=0.36) (actual time=0.0107..0.0173
      rows=0.696 loops=46)"
    actual_rows: 0.696
    estimated_rows: 0.36
    q_error: 1.9333333333333333
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=mi.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00447..0.0145 rows=9.61 loops=46)
    actual_rows: 9.61
    estimated_rows: 3.24
    q_error: 2.966049382716049
  - node: "Filter: (cn.`name` like 'Lionsgate%') (cost=0.25 rows=0.111) (actual time=0.0022..0.00223
      rows=0.344 loops=32)"
    actual_rows: 0.344
    estimated_rows: 0.111
    q_error: 3.099099099099099
  - node: Single-row index lookup on cn using PRIMARY (id=mc.company_id) (cost=0.25
      rows=1) (actual time=0.00195..0.00196 rows=1 loops=32)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mi_idx using movie_id_movie_info_idx (movie_id=mi.movie_id)
      (cost=0.824 rows=3.24) (actual time=0.00641..0.0109 rows=3 loops=11)
    actual_rows: 3.0
    estimated_rows: 3.24
    q_error: 1.08
  - node: "Filter: (it2.info = 'votes') (cost=0.25 rows=0.1) (actual time=0.0018..0.00183
      rows=0.333 loops=33)"
    actual_rows: 0.333
    estimated_rows: 0.1
    q_error: 3.33
  - node: Single-row index lookup on it2 using PRIMARY (id=mi_idx.info_type_id) (cost=0.25
      rows=1) (actual time=0.00145..0.00149 rows=1 loops=33)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (ci.note in ('(writer)','(head writer)','(written by)','(story)','(story
      editor)')) (cost=3.96 rows=7.73) (actual time=0.185..0.241 rows=1.73 loops=11)"
    actual_rows: 1.73
    estimated_rows: 7.73
    q_error: 4.46820809248555
  - node: Index lookup on ci using movie_id_cast_info (movie_id=mi.movie_id) (cost=3.96
      rows=15.5) (actual time=0.00438..0.229 rows=88.8 loops=11)
    actual_rows: 88.8
    estimated_rows: 15.5
    q_error: 5.729032258064516
  - node: "Filter: (n.gender = 'm') (cost=0.0773 rows=0.1) (actual time=0.00367..0.00374
      rows=1 loops=19)"
    actual_rows: 1.0
    estimated_rows: 0.1
    q_error: 10.0
  - node: Single-row index lookup on n using PRIMARY (id=ci.person_id) (cost=0.0773
      rows=1) (actual time=0.00333..0.00334 rows=1 loops=19)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mk using movie_id_movie_keyword (movie_id=mi.movie_id) (cost=3.07
      rows=11.5) (actual time=0.0156..0.166 rows=141 loops=19)
    actual_rows: 141.0
    estimated_rows: 11.5
    q_error: 12.26086956521739
  - node: "Filter: (k.keyword in ('murder','violence','blood','gore','death','female-nudity','hospital'))
      (cost=0.0107 rows=0.5) (actual time=0.00228..0.00228 rows=0.0313 loops=2686)"
    actual_rows: 0.0313
    estimated_rows: 0.5
    q_error: 15.974440894568689
  - node: Single-row index lookup on k using PRIMARY (id=mk.keyword_id) (cost=0.0107
      rows=1) (actual time=0.00199..0.00201 rows=1 loops=2686)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 31c\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(mi.info) AS movie_budget,\n       MIN(mi_idx.info) AS movie_votes,\n\
    \       MIN(n.name) AS writer,\n       MIN(t.title) AS violent_liongate_movie\n
    FROM cast_info AS ci,\n     company_name AS cn,\n     info_type AS it1,\n    \
    \ info_type AS it2,\n     keyword AS k,\n     movie_companies AS mc,\n     movie_info
    AS mi,\n     movie_info_idx AS mi_idx,\n     movie_keyword AS mk,\n     name AS
    n,\n     title AS t\nWHERE ci.note IN ('(writer)',\n                  '(head writer)',\n\
    \                  '(written by)',\n                  '(story)',\n           \
    \       '(story editor)')\n  AND cn.name LIKE 'Lionsgate%'\n  AND it1.info = 'genres'\n\
    \  AND it2.info = 'votes'\n  AND k.keyword IN ('murder',\n                   \
    \ 'violence',\n                    'blood',\n                    'gore',\n   \
    \                 'death',\n                    'female-nudity',\n           \
    \         'hospital')\n  AND mi.info IN ('Horror',\n                  'Action',\n\
    \                  'Sci-Fi',\n                  'Thriller',\n                \
    \  'Crime',\n                  'War')\n  AND t.id = mi.movie_id\n  AND t.id =
    mi_idx.movie_id\n  AND t.id = ci.movie_id\n  AND t.id = mk.movie_id\n  AND t.id
    = mc.movie_id\n  AND ci.movie_id = mi.movie_id\n  AND ci.movie_id = mi_idx.movie_id\n\
    \  AND ci.movie_id = mk.movie_id\n  AND ci.movie_id = mc.movie_id\n  AND mi.movie_id
    = mi_idx.movie_id\n  AND mi.movie_id = mk.movie_id\n  AND mi.movie_id = mc.movie_id\n\
    \  AND mi_idx.movie_id = mk.movie_id\n  AND mi_idx.movie_id = mc.movie_id\n  AND
    mk.movie_id = mc.movie_id\n  AND n.id = ci.person_id\n  AND it1.id = mi.info_type_id\n\
    \  AND it2.id = mi_idx.info_type_id\n  AND k.id = mk.keyword_id\n  AND cn.id =
    mc.company_id"
  qep:
  - node: 'Aggregate: min(mi.info), min(mi_idx.info), min(n.`name`), min(t.title)
      (cost=136744 rows=1) (actual time=6057..6057 rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=128716 rows=80279) (actual time=270..6055 rows=2825
      loops=1)
    actual_rows: 2825.0
    estimated_rows: 80279.0
    q_error: 28.417345132743364
  - node: Nested loop inner join (cost=120523 rows=80279) (actual time=270..6052 rows=2825
      loops=1)
    actual_rows: 2825.0
    estimated_rows: 80279.0
    q_error: 28.417345132743364
  - node: Nested loop inner join (cost=64327 rows=10380) (actual time=269..5556 rows=2840
      loops=1)
    actual_rows: 2840.0
    estimated_rows: 10380.0
    q_error: 3.6549295774647885
  - node: Nested loop inner join (cost=61758 rows=20760) (actual time=30.7..5304 rows=110436
      loops=1)
    actual_rows: 110436.0
    estimated_rows: 20760.0
    q_error: 5.319653179190752
  - node: Nested loop inner join (cost=54492 rows=1799) (actual time=30.7..5189 rows=1235
      loops=1)
    actual_rows: 1235.0
    estimated_rows: 1799.0
    q_error: 1.4566801619433198
  - node: Nested loop inner join (cost=54269 rows=1799) (actual time=30.7..5187 rows=1235
      loops=1)
    actual_rows: 1235.0
    estimated_rows: 1799.0
    q_error: 1.4566801619433198
  - node: Nested loop inner join (cost=51401 rows=16193) (actual time=0.103..4498
      rows=574510 loops=1)
    actual_rows: 574510.0
    estimated_rows: 16193.0
    q_error: 35.47891064040017
  - node: Nested loop inner join (cost=45734 rows=4992) (actual time=0.0914..3652
      rows=102516 loops=1)
    actual_rows: 102516.0
    estimated_rows: 4992.0
    q_error: 20.536057692307693
  - node: Nested loop inner join (cost=28261 rows=49922) (actual time=0.0856..3340
      rows=307785 loops=1)
    actual_rows: 307785.0
    estimated_rows: 49922.0
    q_error: 6.165317895917632
  - node: Nested loop inner join (cost=10789 rows=15396) (actual time=0.0725..2602
      rows=186594 loops=1)
    actual_rows: 186594.0
    estimated_rows: 15396.0
    q_error: 12.119641465315667
  - node: "Filter: (it1.info = 'genres') (cost=11.6 rows=11.3) (actual time=0.021..0.0668
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 11.3
    q_error: 11.3
  - node: Table scan on it1 (cost=11.6 rows=113) (actual time=0.0187..0.0565 rows=113
      loops=1)
    actual_rows: 113.0
    estimated_rows: 113.0
    q_error: 1.0
  - node: "Filter: (mi.info in ('Horror','Action','Sci-Fi','Thriller','Crime','War'))
      (cost=693 rows=1362) (actual time=0.0505..2592 rows=186594 loops=1)"
    actual_rows: 186594.0
    estimated_rows: 1362.0
    q_error: 137.0
  - node: Index lookup on mi using info_type_id_movie_info (info_type_id=it1.id) (cost=693
      rows=2725) (actual time=0.0209..2336 rows=1.53e+6 loops=1)
    actual_rows: 1530000.0
    estimated_rows: 2725.0
    q_error: 561.4678899082569
  - node: Index lookup on mi_idx using movie_id_movie_info_idx (movie_id=mi.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00226..0.00379 rows=1.65 loops=186594)
    actual_rows: 1.65
    estimated_rows: 3.24
    q_error: 1.9636363636363638
  - node: "Filter: (it2.info = 'votes') (cost=0.25 rows=0.1) (actual time=878e-6..905e-6
      rows=0.333 loops=307785)"
    actual_rows: 0.333
    estimated_rows: 0.1
    q_error: 3.33
  - node: Single-row index lookup on it2 using PRIMARY (id=mi_idx.info_type_id) (cost=0.25
      rows=1) (actual time=672e-6..694e-6 rows=1 loops=307785)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mc using movie_id_movie_companies (movie_id=mi.movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00457..0.00789 rows=5.6 loops=102516)
    actual_rows: 5.6
    estimated_rows: 3.24
    q_error: 1.7283950617283947
  - node: "Filter: (cn.`name` like 'Lionsgate%') (cost=0.0771 rows=0.111) (actual
      time=0.00112..0.00112 rows=0.00215 loops=574510)"
    actual_rows: 0.00215
    estimated_rows: 0.111
    q_error: 51.627906976744185
  - node: Single-row index lookup on cn using PRIMARY (id=mc.company_id) (cost=0.0771
      rows=1) (actual time=934e-6..955e-6 rows=1 loops=574510)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Single-row index lookup on t using PRIMARY (id=mi.movie_id) (cost=0.0238
      rows=1) (actual time=0.00122..0.00124 rows=1 loops=1235)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mk using movie_id_movie_keyword (movie_id=mi.movie_id) (cost=2.89
      rows=11.5) (actual time=0.0142..0.0893 rows=89.4 loops=1235)
    actual_rows: 89.4
    estimated_rows: 11.5
    q_error: 7.773913043478261
  - node: "Filter: (k.keyword in ('murder','violence','blood','gore','death','female-nudity','hospital'))
      (cost=0.0238 rows=0.5) (actual time=0.0022..0.0022 rows=0.0257 loops=110436)"
    actual_rows: 0.0257
    estimated_rows: 0.5
    q_error: 19.455252918287936
  - node: Single-row index lookup on k using PRIMARY (id=mk.keyword_id) (cost=0.0238
      rows=1) (actual time=0.00195..0.00197 rows=1 loops=110436)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (ci.note in ('(writer)','(head writer)','(written by)','(story)','(story
      editor)')) (cost=3.87 rows=7.73) (actual time=0.118..0.174 rows=0.995 loops=2840)"
    actual_rows: 0.995
    estimated_rows: 7.73
    q_error: 7.768844221105528
  - node: Index lookup on ci using movie_id_cast_info (movie_id=mi.movie_id) (cost=3.87
      rows=15.5) (actual time=0.00214..0.158 rows=127 loops=2840)
    actual_rows: 127.0
    estimated_rows: 15.5
    q_error: 8.193548387096774
  - node: Single-row index lookup on n using PRIMARY (id=ci.person_id) (cost=0.00206
      rows=1) (actual time=0.00101..0.00103 rows=1 loops=2825)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 32a\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(lt.link) AS link_type,\n       MIN(t1.title) AS first_movie,\n    \
    \   MIN(t2.title) AS second_movie\nFROM keyword AS k,\n     link_type AS lt,\n\
    \     movie_keyword AS mk,\n     movie_link AS ml,\n     title AS t1,\n     title
    AS t2\nWHERE k.keyword ='10,000-mile-club'\n  AND mk.keyword_id = k.id\n  AND
    t1.id = mk.movie_id\n  AND ml.movie_id = t1.id\n  AND ml.linked_movie_id = t2.id\n\
    \  AND lt.id = ml.link_type_id\n  AND mk.movie_id = t1.id"
  qep:
  - node: 'Aggregate: min(lt.link), min(t1.title), min(t2.title) (cost=283687 rows=1)
      (actual time=797..797 rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=280184 rows=35035) (actual time=797..797 rows=0
      loops=1)
    actual_rows: 0.0
    estimated_rows: 35035.0
    q_error:
  - node: Nested loop inner join (cost=157561 rows=350351) (actual time=0.28..400
      rows=288192 loops=1)
    actual_rows: 288192.0
    estimated_rows: 350351.0
    q_error: 1.2156860703975128
  - node: Nested loop inner join (cost=34938 rows=30360) (actual time=0.264..83.7
      rows=29997 loops=1)
    actual_rows: 29997.0
    estimated_rows: 30360.0
    q_error: 1.012101210121012
  - node: Nested loop inner join (cost=24312 rows=30360) (actual time=0.258..35.3
      rows=29997 loops=1)
    actual_rows: 29997.0
    estimated_rows: 30360.0
    q_error: 1.012101210121012
  - node: Nested loop inner join (cost=13686 rows=30360) (actual time=0.251..19.2
      rows=29997 loops=1)
    actual_rows: 29997.0
    estimated_rows: 30360.0
    q_error: 1.012101210121012
  - node: Table scan on ml (cost=3060 rows=30360) (actual time=0.24..6.89 rows=29997
      loops=1)
    actual_rows: 29997.0
    estimated_rows: 30360.0
    q_error: 1.012101210121012
  - node: Single-row index lookup on lt using PRIMARY (id=ml.link_type_id) (cost=0.25
      rows=1) (actual time=265e-6..285e-6 rows=1 loops=29997)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Single-row index lookup on t1 using PRIMARY (id=ml.movie_id) (cost=0.25
      rows=1) (actual time=401e-6..421e-6 rows=1 loops=29997)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Single-row index lookup on t2 using PRIMARY (id=ml.linked_movie_id) (cost=0.25
      rows=1) (actual time=0.00147..0.00149 rows=1 loops=29997)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mk using movie_id_movie_keyword (movie_id=ml.movie_id) (cost=2.89
      rows=11.5) (actual time=0.00465..0.01 rows=9.61 loops=29997)
    actual_rows: 9.61
    estimated_rows: 11.5
    q_error: 1.1966701352757545
  - node: "Filter: (k.keyword = '10,000-mile-club') (cost=0.25 rows=0.1) (actual time=0.0013..0.0013
      rows=0 loops=288192)"
    actual_rows: 0.0
    estimated_rows: 0.1
    q_error:
  - node: Single-row index lookup on k using PRIMARY (id=mk.keyword_id) (cost=0.25
      rows=1) (actual time=0.00109..0.00111 rows=1 loops=288192)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 32b\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(lt.link) AS link_type,\n       MIN(t1.title) AS first_movie,\n    \
    \   MIN(t2.title) AS second_movie\nFROM keyword AS k,\n     link_type AS lt,\n\
    \     movie_keyword AS mk,\n     movie_link AS ml,\n     title AS t1,\n     title
    AS t2\nWHERE k.keyword ='character-name-in-title'\n  AND mk.keyword_id = k.id\n\
    \  AND t1.id = mk.movie_id\n  AND ml.movie_id = t1.id\n  AND ml.linked_movie_id
    = t2.id\n  AND lt.id = ml.link_type_id\n  AND mk.movie_id = t1.id"
  qep:
  - node: 'Aggregate: min(lt.link), min(t1.title), min(t2.title) (cost=283687 rows=1)
      (actual time=778..778 rows=1 loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=280184 rows=35035) (actual time=7.85..776 rows=4388
      loops=1)
    actual_rows: 4388.0
    estimated_rows: 35035.0
    q_error: 7.984275296262534
  - node: Nested loop inner join (cost=157561 rows=350351) (actual time=0.25..390
      rows=288192 loops=1)
    actual_rows: 288192.0
    estimated_rows: 350351.0
    q_error: 1.2156860703975128
  - node: Nested loop inner join (cost=34938 rows=30360) (actual time=0.237..74.8
      rows=29997 loops=1)
    actual_rows: 29997.0
    estimated_rows: 30360.0
    q_error: 1.012101210121012
  - node: Nested loop inner join (cost=24312 rows=30360) (actual time=0.233..30.8
      rows=29997 loops=1)
    actual_rows: 29997.0
    estimated_rows: 30360.0
    q_error: 1.012101210121012
  - node: Nested loop inner join (cost=13686 rows=30360) (actual time=0.228..17.6
      rows=29997 loops=1)
    actual_rows: 29997.0
    estimated_rows: 30360.0
    q_error: 1.012101210121012
  - node: Table scan on ml (cost=3060 rows=30360) (actual time=0.217..6.44 rows=29997
      loops=1)
    actual_rows: 29997.0
    estimated_rows: 30360.0
    q_error: 1.012101210121012
  - node: Single-row index lookup on lt using PRIMARY (id=ml.link_type_id) (cost=0.25
      rows=1) (actual time=234e-6..254e-6 rows=1 loops=29997)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Single-row index lookup on t1 using PRIMARY (id=ml.movie_id) (cost=0.25
      rows=1) (actual time=311e-6..331e-6 rows=1 loops=29997)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Single-row index lookup on t2 using PRIMARY (id=ml.linked_movie_id) (cost=0.25
      rows=1) (actual time=0.00131..0.00133 rows=1 loops=29997)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mk using movie_id_movie_keyword (movie_id=ml.movie_id) (cost=2.89
      rows=11.5) (actual time=0.00439..0.00998 rows=9.61 loops=29997)
    actual_rows: 9.61
    estimated_rows: 11.5
    q_error: 1.1966701352757545
  - node: "Filter: (k.keyword = 'character-name-in-title') (cost=0.25 rows=0.1) (actual
      time=0.00126..0.00126 rows=0.0152 loops=288192)"
    actual_rows: 0.0152
    estimated_rows: 0.1
    q_error: 6.578947368421053
  - node: Single-row index lookup on k using PRIMARY (id=mk.keyword_id) (cost=0.25
      rows=1) (actual time=0.00107..0.00109 rows=1 loops=288192)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 33a\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(cn1.name) AS first_company,\n       MIN(cn2.name) AS second_company,\n\
    \       MIN(mi_idx1.info) AS first_rating,\n       MIN(mi_idx2.info) AS second_rating,\n\
    \       MIN(t1.title) AS first_movie,\n       MIN(t2.title) AS second_movie\n
    FROM company_name AS cn1,\n     company_name AS cn2,\n     info_type AS it1,\n\
    \     info_type AS it2,\n     kind_type AS kt1,\n     kind_type AS kt2,\n    \
    \ link_type AS lt,\n     movie_companies AS mc1,\n     movie_companies AS mc2,\n\
    \     movie_info_idx AS mi_idx1,\n     movie_info_idx AS mi_idx2,\n     movie_link
    AS ml,\n     title AS t1,\n     title AS t2\nWHERE cn1.country_code = '[us]'\n\
    \  AND it1.info = 'rating'\n  AND it2.info = 'rating'\n  AND kt1.kind IN ('tv
    series')\n  AND kt2.kind IN ('tv series')\n  AND lt.link IN ('sequel',\n     \
    \             'follows',\n                  'followed by')\n  AND mi_idx2.info
    < '3.0'\n  AND t2.production_year BETWEEN 2005 AND 2008\n  AND lt.id = ml.link_type_id\n\
    \  AND t1.id = ml.movie_id\n  AND t2.id = ml.linked_movie_id\n  AND it1.id = mi_idx1.info_type_id\n\
    \  AND t1.id = mi_idx1.movie_id\n  AND kt1.id = t1.kind_id\n  AND cn1.id = mc1.company_id\n\
    \  AND t1.id = mc1.movie_id\n  AND ml.movie_id = mi_idx1.movie_id\n  AND ml.movie_id
    = mc1.movie_id\n  AND mi_idx1.movie_id = mc1.movie_id\n  AND it2.id = mi_idx2.info_type_id\n\
    \  AND t2.id = mi_idx2.movie_id\n  AND kt2.id = t2.kind_id\n  AND cn2.id = mc2.company_id\n\
    \  AND t2.id = mc2.movie_id\n  AND ml.linked_movie_id = mi_idx2.movie_id\n  AND
    ml.linked_movie_id = mc2.movie_id\n  AND mi_idx2.movie_id = mc2.movie_id"
  qep:
  - node: 'Aggregate: min(cn1.`name`), min(cn2.`name`), min(mi_idx1.info), min(mi_idx2.info),
      min(t1.title), min(t2.title) (cost=3702 rows=1) (actual time=5.5..5.5 rows=1
      loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=3702 rows=0.162) (actual time=0.676..5.48 rows=8
      loops=1)
    actual_rows: 8.0
    estimated_rows: 0.162
    q_error: 49.382716049382715
  - node: Nested loop inner join (cost=3702 rows=0.162) (actual time=0.674..5.47 rows=8
      loops=1)
    actual_rows: 8.0
    estimated_rows: 0.162
    q_error: 49.382716049382715
  - node: Nested loop inner join (cost=3701 rows=0.0499) (actual time=0.665..5.46
      rows=2 loops=1)
    actual_rows: 2.0
    estimated_rows: 0.0499
    q_error: 40.08016032064128
  - node: Nested loop inner join (cost=3700 rows=0.499) (actual time=0.657..5.43 rows=14
      loops=1)
    actual_rows: 14.0
    estimated_rows: 0.499
    q_error: 28.0561122244489
  - node: Nested loop inner join (cost=3697 rows=0.154) (actual time=0.647..5.4 rows=5
      loops=1)
    actual_rows: 5.0
    estimated_rows: 0.154
    q_error: 32.467532467532465
  - node: Nested loop inner join (cost=3689 rows=1.54) (actual time=0.642..5.38 rows=15
      loops=1)
    actual_rows: 15.0
    estimated_rows: 1.54
    q_error: 9.74025974025974
  - node: Nested loop inner join (cost=3680 rows=0.475) (actual time=0.636..5.36 rows=6
      loops=1)
    actual_rows: 6.0
    estimated_rows: 0.475
    q_error: 12.631578947368421
  - node: Nested loop inner join (cost=3651 rows=4.75) (actual time=0.303..5.29 rows=115
      loops=1)
    actual_rows: 115.0
    estimated_rows: 4.75
    q_error: 24.210526315789473
  - node: Nested loop inner join (cost=3567 rows=4.39) (actual time=0.292..4.86 rows=100
      loops=1)
    actual_rows: 100.0
    estimated_rows: 4.39
    q_error: 22.779043280182233
  - node: Nested loop inner join (cost=3046 rows=87.8) (actual time=0.267..3.29 rows=1454
      loops=1)
    actual_rows: 1454.0
    estimated_rows: 87.8
    q_error: 16.560364464692483
  - node: Nested loop inner join (cost=440 rows=439) (actual time=0.26..2.09 rows=2315
      loops=1)
    actual_rows: 2315.0
    estimated_rows: 439.0
    q_error: 5.2733485193621865
  - node: Inner hash join (no condition) (cost=3.49 rows=0.231) (actual time=0.0482..0.0563
      rows=2 loops=1)
    actual_rows: 2.0
    estimated_rows: 0.231
    q_error: 8.658008658008658
  - node: "Filter: (lt.link in ('sequel','follows','followed by')) (cost=2.05 rows=5.4)
      (actual time=0.0058..0.0126 rows=2 loops=1)"
    actual_rows: 2.0
    estimated_rows: 5.4
    q_error: 2.7
  - node: Table scan on lt (cost=2.05 rows=18) (actual time=0.0053..0.0094 rows=18
      loops=1)
    actual_rows: 18.0
    estimated_rows: 18.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: Inner hash join (no condition) (cost=1.9 rows=0.143) (actual time=0.0367..0.038
      rows=1 loops=1)
    actual_rows: 1.0
    estimated_rows: 0.143
    q_error: 6.993006993006993
  - node: "Filter: (kt2.kind = 'tv series') (cost=0.95 rows=1) (actual time=0.0055..0.0066
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on kt2 (cost=0.95 rows=7) (actual time=0.0048..0.0057 rows=7
      loops=1)
    actual_rows: 7.0
    estimated_rows: 7.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: "Filter: (kt1.kind = 'tv series') (cost=0.95 rows=1) (actual time=0.0215..0.0248
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on kt1 (cost=0.95 rows=7) (actual time=0.0189..0.0224 rows=7
      loops=1)
    actual_rows: 7.0
    estimated_rows: 7.0
    q_error: 1.0
  - node: Index lookup on ml using link_type_id_movie_link (link_type_id=lt.id) (cost=108
      rows=1898) (actual time=0.197..0.984 rows=1158 loops=2)
    actual_rows: 1158.0
    estimated_rows: 1898.0
    q_error: 1.6390328151986182
  - node: 'Filter: (t1.kind_id = kt1.id) (cost=0.25 rows=0.2) (actual time=418e-6..449e-6
      rows=0.628 loops=2315)'
    actual_rows: 0.628
    estimated_rows: 0.2
    q_error: 3.1399999999999997
  - node: Single-row index lookup on t1 using PRIMARY (id=ml.movie_id) (cost=0.25
      rows=1) (actual time=329e-6..345e-6 rows=1 loops=2315)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: 'Filter: ((t2.kind_id = kt2.id) and (t2.production_year between 2005 and
      2008)) (cost=0.25 rows=0.05) (actual time=0.00102..0.00103 rows=0.0688 loops=1454)'
    actual_rows: 0.0688
    estimated_rows: 0.05
    q_error: 1.376
  - node: Single-row index lookup on t2 using PRIMARY (id=ml.linked_movie_id) (cost=0.25
      rows=1) (actual time=894e-6..908e-6 rows=1 loops=1454)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (mi_idx2.info < '3.0') (cost=0.812 rows=1.08) (actual time=0.00272..0.00421
      rows=1.15 loops=100)"
    actual_rows: 1.15
    estimated_rows: 1.08
    q_error: 1.0648148148148147
  - node: Index lookup on mi_idx2 using movie_id_movie_info_idx (movie_id=ml.linked_movie_id)
      (cost=0.812 rows=3.24) (actual time=0.00255..0.00399 rows=2.37 loops=100)
    actual_rows: 2.37
    estimated_rows: 3.24
    q_error: 1.3670886075949367
  - node: "Filter: (it2.info = 'rating') (cost=0.25 rows=0.1) (actual time=493e-6..496e-6
      rows=0.0522 loops=115)"
    actual_rows: 0.0522
    estimated_rows: 0.1
    q_error: 1.9157088122605364
  - node: Single-row index lookup on it2 using PRIMARY (id=mi_idx2.info_type_id) (cost=0.25
      rows=1) (actual time=370e-6..382e-6 rows=1 loops=115)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mi_idx1 using movie_id_movie_info_idx (movie_id=ml.movie_id)
      (cost=0.84 rows=3.24) (actual time=0.00302..0.00455 rows=2.5 loops=6)
    actual_rows: 2.5
    estimated_rows: 3.24
    q_error: 1.296
  - node: "Filter: (it1.info = 'rating') (cost=0.232 rows=0.1) (actual time=707e-6..713e-6
      rows=0.333 loops=15)"
    actual_rows: 0.333
    estimated_rows: 0.1
    q_error: 3.33
  - node: Single-row index lookup on it1 using PRIMARY (id=mi_idx1.info_type_id) (cost=0.232
      rows=1) (actual time=587e-6..600e-6 rows=1 loops=15)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mc1 using movie_id_movie_companies (movie_id=ml.movie_id)
      (cost=0.901 rows=3.24) (actual time=0.00652..0.00708 rows=2.8 loops=5)
    actual_rows: 2.8
    estimated_rows: 3.24
    q_error: 1.1571428571428573
  - node: "Filter: (cn1.country_code = '[us]') (cost=0.0722 rows=0.1) (actual time=0.00166..0.00166
      rows=0.143 loops=14)"
    actual_rows: 0.143
    estimated_rows: 0.1
    q_error: 1.4299999999999997
  - node: Single-row index lookup on cn1 using PRIMARY (id=mc1.company_id) (cost=0.0722
      rows=1) (actual time=0.00146..0.00146 rows=1 loops=14)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mc2 using movie_id_movie_companies (movie_id=ml.linked_movie_id)
      (cost=1.09 rows=3.24) (actual time=0.0062..0.0069 rows=4 loops=2)
    actual_rows: 4.0
    estimated_rows: 3.24
    q_error: 1.2345679012345678
  - node: Single-row index lookup on cn2 using PRIMARY (id=mc2.company_id) (cost=0.0485
      rows=1) (actual time=0.00109..0.00111 rows=1 loops=8)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 33b\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(cn1.name) AS first_company,\n       MIN(cn2.name) AS second_company,\n\
    \       MIN(mi_idx1.info) AS first_rating,\n       MIN(mi_idx2.info) AS second_rating,\n\
    \       MIN(t1.title) AS first_movie,\n       MIN(t2.title) AS second_movie\n
    FROM company_name AS cn1,\n     company_name AS cn2,\n     info_type AS it1,\n\
    \     info_type AS it2,\n     kind_type AS kt1,\n     kind_type AS kt2,\n    \
    \ link_type AS lt,\n     movie_companies AS mc1,\n     movie_companies AS mc2,\n\
    \     movie_info_idx AS mi_idx1,\n     movie_info_idx AS mi_idx2,\n     movie_link
    AS ml,\n     title AS t1,\n     title AS t2\nWHERE cn1.country_code = '[nl]'\n\
    \  AND it1.info = 'rating'\n  AND it2.info = 'rating'\n  AND kt1.kind IN ('tv
    series')\n  AND kt2.kind IN ('tv series')\n  AND lt.link LIKE '%follow%'\n  AND
    mi_idx2.info < '3.0'\n  AND t2.production_year = 2007\n  AND lt.id = ml.link_type_id\n\
    \  AND t1.id = ml.movie_id\n  AND t2.id = ml.linked_movie_id\n  AND it1.id = mi_idx1.info_type_id\n\
    \  AND t1.id = mi_idx1.movie_id\n  AND kt1.id = t1.kind_id\n  AND cn1.id = mc1.company_id\n\
    \  AND t1.id = mc1.movie_id\n  AND ml.movie_id = mi_idx1.movie_id\n  AND ml.movie_id
    = mc1.movie_id\n  AND mi_idx1.movie_id = mc1.movie_id\n  AND it2.id = mi_idx2.info_type_id\n\
    \  AND t2.id = mi_idx2.movie_id\n  AND kt2.id = t2.kind_id\n  AND cn2.id = mc2.company_id\n\
    \  AND t2.id = mc2.movie_id\n  AND ml.linked_movie_id = mi_idx2.movie_id\n  AND
    ml.linked_movie_id = mc2.movie_id\n  AND mi_idx2.movie_id = mc2.movie_id"
  qep:
  - node: 'Aggregate: min(cn1.`name`), min(cn2.`name`), min(mi_idx1.info), min(mi_idx2.info),
      min(t1.title), min(t2.title) (cost=1350 rows=1) (actual time=5.3..5.3 rows=1
      loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=1350 rows=0.0222) (actual time=0.847..5.28
      rows=4 loops=1)
    actual_rows: 4.0
    estimated_rows: 0.0222
    q_error: 180.18018018018017
  - node: Nested loop inner join (cost=1350 rows=0.0222) (actual time=0.844..5.27
      rows=4 loops=1)
    actual_rows: 4.0
    estimated_rows: 0.0222
    q_error: 180.18018018018017
  - node: Nested loop inner join (cost=1350 rows=0.00685) (actual time=0.834..5.26
      rows=1 loops=1)
    actual_rows: 1.0
    estimated_rows: 0.00685
    q_error: 145.98540145985402
  - node: Nested loop inner join (cost=1350 rows=0.0685) (actual time=0.829..5.25
      rows=4 loops=1)
    actual_rows: 4.0
    estimated_rows: 0.0685
    q_error: 58.3941605839416
  - node: Nested loop inner join (cost=1349 rows=0.0211) (actual time=0.818..5.24
      rows=2 loops=1)
    actual_rows: 2.0
    estimated_rows: 0.0211
    q_error: 94.7867298578199
  - node: Nested loop inner join (cost=1346 rows=0.211) (actual time=0.813..5.23 rows=6
      loops=1)
    actual_rows: 6.0
    estimated_rows: 0.211
    q_error: 28.436018957345972
  - node: Nested loop inner join (cost=1342 rows=0.0651) (actual time=0.807..5.21
      rows=2 loops=1)
    actual_rows: 2.0
    estimated_rows: 0.0651
    q_error: 30.72196620583717
  - node: Nested loop inner join (cost=1332 rows=0.651) (actual time=0.723..5.19 rows=21
      loops=1)
    actual_rows: 21.0
    estimated_rows: 0.651
    q_error: 32.25806451612903
  - node: Nested loop inner join (cost=1301 rows=0.602) (actual time=0.385..5.07 rows=20
      loops=1)
    actual_rows: 20.0
    estimated_rows: 0.602
    q_error: 33.222591362126245
  - node: Nested loop inner join (cost=1110 rows=12) (actual time=0.279..3.4 rows=1454
      loops=1)
    actual_rows: 1454.0
    estimated_rows: 12.0
    q_error: 121.16666666666667
  - node: Nested loop inner join (cost=155 rows=60.2) (actual time=0.272..2.14 rows=2315
      loops=1)
    actual_rows: 2315.0
    estimated_rows: 60.2
    q_error: 38.455149501661126
  - node: Inner hash join (no condition) (cost=3.78 rows=0.0317) (actual time=0.0433..0.0528
      rows=2 loops=1)
    actual_rows: 2.0
    estimated_rows: 0.0317
    q_error: 63.09148264984227
  - node: "Filter: (lt.link like '%follow%') (cost=2.05 rows=2) (actual time=0.0062..0.0141
      rows=2 loops=1)"
    actual_rows: 2.0
    estimated_rows: 2.0
    q_error: 1.0
  - node: Table scan on lt (cost=2.05 rows=18) (actual time=0.0045..0.0091 rows=18
      loops=1)
    actual_rows: 18.0
    estimated_rows: 18.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: Inner hash join (no condition) (cost=1.9 rows=0.143) (actual time=0.033..0.0344
      rows=1 loops=1)
    actual_rows: 1.0
    estimated_rows: 0.143
    q_error: 6.993006993006993
  - node: "Filter: (kt2.kind = 'tv series') (cost=0.95 rows=1) (actual time=0.0026..0.0037
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on kt2 (cost=0.95 rows=7) (actual time=0.0023..0.0032 rows=7
      loops=1)
    actual_rows: 7.0
    estimated_rows: 7.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: "Filter: (kt1.kind = 'tv series') (cost=0.95 rows=1) (actual time=0.02..0.0233
      rows=1 loops=1)"
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Table scan on kt1 (cost=0.95 rows=7) (actual time=0.0171..0.0207 rows=7
      loops=1)
    actual_rows: 7.0
    estimated_rows: 7.0
    q_error: 1.0
  - node: Index lookup on ml using link_type_id_movie_link (link_type_id=lt.id) (cost=168
      rows=1898) (actual time=0.208..1.01 rows=1158 loops=2)
    actual_rows: 1158.0
    estimated_rows: 1898.0
    q_error: 1.6390328151986182
  - node: 'Filter: (t1.kind_id = kt1.id) (cost=0.25 rows=0.2) (actual time=439e-6..468e-6
      rows=0.628 loops=2315)'
    actual_rows: 0.628
    estimated_rows: 0.2
    q_error: 3.1399999999999997
  - node: Single-row index lookup on t1 using PRIMARY (id=ml.movie_id) (cost=0.25
      rows=1) (actual time=349e-6..363e-6 rows=1 loops=2315)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: 'Filter: ((t2.kind_id = kt2.id) and (t2.production_year = 2007)) (cost=0.25
      rows=0.05) (actual time=0.00109..0.00109 rows=0.0138 loops=1454)'
    actual_rows: 0.0138
    estimated_rows: 0.05
    q_error: 3.6231884057971016
  - node: Single-row index lookup on t2 using PRIMARY (id=ml.linked_movie_id) (cost=0.25
      rows=1) (actual time=966e-6..982e-6 rows=1 loops=1454)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (mi_idx2.info < '3.0') (cost=0.813 rows=1.08) (actual time=0.00452..0.00583
      rows=1.05 loops=20)"
    actual_rows: 1.05
    estimated_rows: 1.08
    q_error: 1.0285714285714287
  - node: Index lookup on mi_idx2 using movie_id_movie_info_idx (movie_id=ml.linked_movie_id)
      (cost=0.813 rows=3.24) (actual time=0.00415..0.00546 rows=1.95 loops=20)
    actual_rows: 1.95
    estimated_rows: 3.24
    q_error: 1.6615384615384616
  - node: "Filter: (it2.info = 'rating') (cost=0.25 rows=0.1) (actual time=1e-3..1e-3
      rows=0.0952 loops=21)"
    actual_rows: 0.0952
    estimated_rows: 0.1
    q_error: 1.050420168067227
  - node: Single-row index lookup on it2 using PRIMARY (id=mi_idx2.info_type_id) (cost=0.25
      rows=1) (actual time=833e-6..848e-6 rows=1 loops=21)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mi_idx1 using movie_id_movie_info_idx (movie_id=ml.movie_id)
      (cost=0.89 rows=3.24) (actual time=0.00535..0.00745 rows=3 loops=2)
    actual_rows: 3.0
    estimated_rows: 3.24
    q_error: 1.08
  - node: "Filter: (it1.info = 'rating') (cost=0.232 rows=0.1) (actual time=950e-6..967e-6
      rows=0.333 loops=6)"
    actual_rows: 0.333
    estimated_rows: 0.1
    q_error: 3.33
  - node: Single-row index lookup on it1 using PRIMARY (id=mi_idx1.info_type_id) (cost=0.232
      rows=1) (actual time=800e-6..800e-6 rows=1 loops=6)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mc1 using movie_id_movie_companies (movie_id=ml.movie_id)
      (cost=1.05 rows=3.24) (actual time=0.0078..0.00825 rows=2 loops=2)
    actual_rows: 2.0
    estimated_rows: 3.24
    q_error: 1.62
  - node: "Filter: (cn1.country_code = '[nl]') (cost=0.0737 rows=0.1) (actual time=0.0024..0.00243
      rows=0.25 loops=4)"
    actual_rows: 0.25
    estimated_rows: 0.1
    q_error: 2.5
  - node: Single-row index lookup on cn1 using PRIMARY (id=mc1.company_id) (cost=0.0737
      rows=1) (actual time=0.0021..0.00215 rows=1 loops=4)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mc2 using movie_id_movie_companies (movie_id=ml.linked_movie_id)
      (cost=1.56 rows=3.24) (actual time=0.0098..0.0106 rows=4 loops=1)
    actual_rows: 4.0
    estimated_rows: 3.24
    q_error: 1.2345679012345678
  - node: Single-row index lookup on cn2 using PRIMARY (id=mc2.company_id) (cost=0.0935
      rows=1) (actual time=0.00205..0.00205 rows=1 loops=4)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0

- query: "-- JOB Query 33c\n-- EXPLAIN (BUFFERS,\n-- VERBOSE /*, FORMAT YAML*/, ANALYZE)\n
    SELECT MIN(cn1.name) AS first_company,\n       MIN(cn2.name) AS second_company,\n\
    \       MIN(mi_idx1.info) AS first_rating,\n       MIN(mi_idx2.info) AS second_rating,\n\
    \       MIN(t1.title) AS first_movie,\n       MIN(t2.title) AS second_movie\n
    FROM company_name AS cn1,\n     company_name AS cn2,\n     info_type AS it1,\n\
    \     info_type AS it2,\n     kind_type AS kt1,\n     kind_type AS kt2,\n    \
    \ link_type AS lt,\n     movie_companies AS mc1,\n     movie_companies AS mc2,\n\
    \     movie_info_idx AS mi_idx1,\n     movie_info_idx AS mi_idx2,\n     movie_link
    AS ml,\n     title AS t1,\n     title AS t2\nWHERE cn1.country_code != '[us]'\n\
    \  AND it1.info = 'rating'\n  AND it2.info = 'rating'\n  AND kt1.kind IN ('tv
    series',\n                   'episode')\n  AND kt2.kind IN ('tv series',\n   \
    \                'episode')\n  AND lt.link IN ('sequel',\n                  'follows',\n\
    \                  'followed by')\n  AND mi_idx2.info < '3.5'\n  AND t2.production_year
    BETWEEN 2000 AND 2010\n  AND lt.id = ml.link_type_id\n  AND t1.id = ml.movie_id\n\
    \  AND t2.id = ml.linked_movie_id\n  AND it1.id = mi_idx1.info_type_id\n  AND
    t1.id = mi_idx1.movie_id\n  AND kt1.id = t1.kind_id\n  AND cn1.id = mc1.company_id\n\
    \  AND t1.id = mc1.movie_id\n  AND ml.movie_id = mi_idx1.movie_id\n  AND ml.movie_id
    = mc1.movie_id\n  AND mi_idx1.movie_id = mc1.movie_id\n  AND it2.id = mi_idx2.info_type_id\n\
    \  AND t2.id = mi_idx2.movie_id\n  AND kt2.id = t2.kind_id\n  AND cn2.id = mc2.company_id\n\
    \  AND t2.id = mc2.movie_id\n  AND ml.linked_movie_id = mi_idx2.movie_id\n  AND
    ml.linked_movie_id = mc2.movie_id\n  AND mi_idx2.movie_id = mc2.movie_id"
  qep:
  - node: 'Aggregate: min(cn1.`name`), min(cn2.`name`), min(mi_idx1.info), min(mi_idx2.info),
      min(t1.title), min(t2.title) (cost=5466 rows=1) (actual time=13.6..13.6 rows=1
      loops=1)'
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Nested loop inner join (cost=5465 rows=13) (actual time=3.97..13.6 rows=114
      loops=1)
    actual_rows: 114.0
    estimated_rows: 13.0
    q_error: 8.76923076923077
  - node: Nested loop inner join (cost=5463 rows=13) (actual time=3.96..13.5 rows=114
      loops=1)
    actual_rows: 114.0
    estimated_rows: 13.0
    q_error: 8.76923076923077
  - node: Nested loop inner join (cost=5451 rows=3.99) (actual time=3.96..13.3 rows=46
      loops=1)
    actual_rows: 46.0
    estimated_rows: 3.99
    q_error: 11.528822055137844
  - node: Nested loop inner join (cost=5450 rows=4.44) (actual time=3.95..13.3 rows=51
      loops=1)
    actual_rows: 51.0
    estimated_rows: 4.44
    q_error: 11.486486486486486
  - node: Nested loop inner join (cost=5446 rows=1.37) (actual time=3.94..13.2 rows=19
      loops=1)
    actual_rows: 19.0
    estimated_rows: 1.37
    q_error: 13.86861313868613
  - node: Nested loop inner join (cost=5439 rows=13.7) (actual time=3.94..13.1 rows=57
      loops=1)
    actual_rows: 57.0
    estimated_rows: 13.7
    q_error: 4.160583941605839
  - node: Nested loop inner join (cost=5426 rows=4.22) (actual time=3.93..13 rows=21
      loops=1)
    actual_rows: 21.0
    estimated_rows: 4.22
    q_error: 4.976303317535545
  - node: Nested loop inner join (cost=5404 rows=42.2) (actual time=0.876..12.5 rows=1088
      loops=1)
    actual_rows: 1088.0
    estimated_rows: 42.2
    q_error: 25.781990521327014
  - node: Nested loop inner join (cost=5286 rows=39) (actual time=0.854..9.08 rows=815
      loops=1)
    actual_rows: 815.0
    estimated_rows: 39.0
    q_error: 20.897435897435898
  - node: Nested loop inner join (cost=5216 rows=137) (actual time=0.845..8.61 rows=946
      loops=1)
    actual_rows: 946.0
    estimated_rows: 137.0
    q_error: 6.905109489051095
  - node: Nested loop inner join (cost=4580 rows=1230) (actual time=0.424..6.32 rows=2315
      loops=1)
    actual_rows: 2315.0
    estimated_rows: 1230.0
    q_error: 1.8821138211382114
  - node: Nested loop inner join (cost=1404 rows=6148) (actual time=0.25..3.9 rows=4630
      loops=1)
    actual_rows: 4630.0
    estimated_rows: 6148.0
    q_error: 1.3278617710583154
  - node: Inner hash join (no condition) (cost=3.54 rows=3.24) (actual time=0.0372..0.0465
      rows=4 loops=1)
    actual_rows: 4.0
    estimated_rows: 3.24
    q_error: 1.2345679012345678
  - node: "Filter: (lt.link in ('sequel','follows','followed by')) (cost=1.03 rows=5.4)
      (actual time=0.0053..0.012 rows=2 loops=1)"
    actual_rows: 2.0
    estimated_rows: 5.4
    q_error: 2.7
  - node: Table scan on lt (cost=1.03 rows=18) (actual time=0.005..0.0097 rows=18
      loops=1)
    actual_rows: 18.0
    estimated_rows: 18.0
    q_error: 1.0
  - node: Hash
    actual_rows:
    estimated_rows:
    q_error:
  - node: "Filter: (kt1.kind in ('tv series','episode')) (cost=0.95 rows=2) (actual
      time=0.0213..0.0247 rows=2 loops=1)"
    actual_rows: 2.0
    estimated_rows: 2.0
    q_error: 1.0
  - node: Table scan on kt1 (cost=0.95 rows=7) (actual time=0.0181..0.0217 rows=7
      loops=1)
    actual_rows: 7.0
    estimated_rows: 7.0
    q_error: 1.0
  - node: Index lookup on ml using link_type_id_movie_link (link_type_id=lt.id) (cost=90.3
      rows=1898) (actual time=0.179..0.925 rows=1158 loops=4)
    actual_rows: 1158.0
    estimated_rows: 1898.0
    q_error: 1.6390328151986182
  - node: 'Filter: (t1.kind_id = kt1.id) (cost=0.125 rows=0.2) (actual time=430e-6..453e-6
      rows=0.5 loops=4630)'
    actual_rows: 0.5
    estimated_rows: 0.2
    q_error: 2.5
  - node: Single-row index lookup on t1 using PRIMARY (id=ml.movie_id) (cost=0.125
      rows=1) (actual time=336e-6..351e-6 rows=1 loops=4630)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: 'Filter: (t2.production_year between 2000 and 2010) (cost=0.125 rows=0.111)
      (actual time=901e-6..921e-6 rows=0.409 loops=2315)'
    actual_rows: 0.409
    estimated_rows: 0.111
    q_error: 3.6846846846846844
  - node: Single-row index lookup on t2 using PRIMARY (id=ml.linked_movie_id) (cost=0.125
      rows=1) (actual time=797e-6..813e-6 rows=1 loops=2315)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (kt2.kind in ('tv series','episode')) (cost=0.125 rows=0.286) (actual
      time=373e-6..416e-6 rows=0.862 loops=946)"
    actual_rows: 0.862
    estimated_rows: 0.286
    q_error: 3.013986013986014
  - node: Single-row index lookup on kt2 using PRIMARY (id=t2.kind_id) (cost=0.125
      rows=1) (actual time=161e-6..177e-6 rows=1 loops=946)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: "Filter: (mi_idx2.info < '3.5') (cost=0.811 rows=1.08) (actual time=0.00236..0.00404
      rows=1.33 loops=815)"
    actual_rows: 1.33
    estimated_rows: 1.08
    q_error: 1.2314814814814814
  - node: Index lookup on mi_idx2 using movie_id_movie_info_idx (movie_id=ml.linked_movie_id)
      (cost=0.811 rows=3.24) (actual time=0.00223..0.00381 rows=2.79 loops=815)
    actual_rows: 2.79
    estimated_rows: 3.24
    q_error: 1.1612903225806452
  - node: "Filter: (it2.info = 'rating') (cost=0.125 rows=0.1) (actual time=440e-6..440e-6
      rows=0.0193 loops=1088)"
    actual_rows: 0.0193
    estimated_rows: 0.1
    q_error: 5.181347150259067
  - node: Single-row index lookup on it2 using PRIMARY (id=mi_idx2.info_type_id) (cost=0.125
      rows=1) (actual time=308e-6..323e-6 rows=1 loops=1088)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mi_idx1 using movie_id_movie_info_idx (movie_id=ml.movie_id)
      (cost=0.834 rows=3.24) (actual time=0.00246..0.00406 rows=2.71 loops=21)
    actual_rows: 2.71
    estimated_rows: 3.24
    q_error: 1.1955719557195572
  - node: "Filter: (it1.info = 'rating') (cost=0.116 rows=0.1) (actual time=649e-6..665e-6
      rows=0.333 loops=57)"
    actual_rows: 0.333
    estimated_rows: 0.1
    q_error: 3.33
  - node: Single-row index lookup on it1 using PRIMARY (id=mi_idx1.info_type_id) (cost=0.116
      rows=1) (actual time=514e-6..519e-6 rows=1 loops=57)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mc1 using movie_id_movie_companies (movie_id=ml.movie_id)
      (cost=0.882 rows=3.24) (actual time=0.00476..0.00524 rows=2.68 loops=19)
    actual_rows: 2.68
    estimated_rows: 3.24
    q_error: 1.208955223880597
  - node: "Filter: (cn1.country_code <> '[us]') (cost=0.0418 rows=0.9) (actual time=0.00106..0.0011
      rows=0.902 loops=51)"
    actual_rows: 0.902
    estimated_rows: 0.9
    q_error: 1.0022222222222221
  - node: Single-row index lookup on cn1 using PRIMARY (id=mc1.company_id) (cost=0.0418
      rows=1) (actual time=933e-6..951e-6 rows=1 loops=51)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
  - node: Index lookup on mc2 using movie_id_movie_companies (movie_id=ml.linked_movie_id)
      (cost=0.835 rows=3.24) (actual time=0.00288..0.00336 rows=2.48 loops=46)
    actual_rows: 2.48
    estimated_rows: 3.24
    q_error: 1.306451612903226
  - node: Single-row index lookup on cn2 using PRIMARY (id=mc2.company_id) (cost=0.0133
      rows=1) (actual time=661e-6..670e-6 rows=1 loops=114)
    actual_rows: 1.0
    estimated_rows: 1.0
    q_error: 1.0
